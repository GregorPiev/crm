<?php

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: *");
header("Content-Type: application/json");

//date_default_timezone_set("Europe/London");
date_default_timezone_set("UTC");

ini_set('memory_limit', '-1');

//error_reporting(E_ALL);
//ini_set('display_errors', 1);

require_once "inc/db.php";
require_once "inc/spotoption.php";

require_once "inc/SoapProxy.php";
require_once "inc/LeverateCrm.php";
require_once "inc/leverate.php";

require_once "inc/config.php";
require_once 'vendor/autoload.php';

require_once 'inc/safecharge.php';
//require_once "inc/brands_config/brand_db.php";

session_start();

if (isset($_GET['debug'])) {
    error_reporting(E_ALL);
    ini_set('display_errors', 1);
}

//if request is not login attempt
//and no session exists, block it
if (isset($_GET['cmd']) && $_GET['cmd'] != "login") {
    if ((!isset($_SESSION["user_is_loggedin"]) || !$_SESSION["user_is_loggedin"]) && $_GET['cmd'] != "resetPassword" && $_GET['cmd'] != "loginBrandChoice") {
        die('{"error":"No Access"}');
    }
}

$config = new config();
$system = $config::SYSTEM_NAME;
$site = $config::SITE_INITIALS;
$site_name = $config::SITE_NAME;
$site_name_lowercase = strtolower($config::SITE_NAME);


function spotExec($parms)
{   
    $apiData = array_merge(array('api_username' => $config::get_spot_api('username'), 'api_password' => $config::get_spot_api('password')), $parms);
    $URL = $config::get_spot_api('url');
    $ch = curl_init($URL);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS,
        http_build_query($apiData));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($ch);
    curl_close($ch);
    if (strstr($result, '<operation_status>successful</operation_status>'))
        return true;
    return false;
}


function hasOptionsAPI($parms)
{
    $config = new config();
    $url = $config::get_hasoption_api('url');
    $apiData = array_merge(array('NetworkId' => $config::get_hasoption_api('NetworkId'), 'NetworkToken' => $config::get_hasoption_api('NetworkToken')), $parms);
    $URL = $url . http_build_query($apiData);
    $result = file_get_contents($URL);
    return $result;
}

if (!isset($_GET['cmd']))
    die('{"error":"Missing arguments"}');


//if (!isset($_SESSION['userdata']) && $_GET['cmd']!='login')
//    die('{"error":"Access denied"}');
////var_dump($_SESSION['afgid']);
////var_dump($_POST["affiliate"]);
if ($_SESSION['afgid'] && $_SESSION['afgid'] != 0 && (!isset($_POST["affiliate"]) || (is_numeric($_POST["affiliate"]) && $_POST["affiliate"] == 0))) {
    $_POST["affiliate"] = $_SESSION['afgid'];
}

switch ($_GET['cmd']) {
    case 'SafeChargeback':
        $data = json_encode($_REQUEST);

        header('Content-Type: text/html; charset=utf-8');
        echo <<<EOF
<script type="text/javascript">
 console.log('here1', window);
     window.opener.postMessage($data, '*');
</script>
EOF;
   
        break;
    case 'SafeChargeUpdate':

        if(!empty($_POST['ppp_status'])) {//OK or FAIL

            $connection = new NEW_SITEDB();
            $connection->exec('SET SQL_SAFE_UPDATES=0;');
            $serilalized_data = serialize($_POST);
            $status = (!empty($_POST['Status'])) ? htmlspecialchars( strip_tags($_POST['Status']) )  :  htmlspecialchars( strip_tags($_POST['ppp_status']) );

            $depositid = htmlspecialchars( strip_tags($_POST['depositid']) );
            $response_msg['stutus'] = $status ;
            $response_msg['depositid'] = $depositid;
            $sql_log = "UPDATE lavarate_customer_deposit_log SET status = '".$status."', resultData = '".$serilalized_data."' , resultDate = NOW()  WHERE depositId='".$depositid."';";
            $results_log = $connection->exec($sql_log);

            if($_POST['Status'] == 'APPROVED' && $_POST['ExErrCode'] == 0 && $_POST['ErrCode'] == 0){
                $msg = $_POST['Status'];
                $amount =  htmlspecialchars( strip_tags($_POST['totalAmount']) );
                $currency = htmlspecialchars( strip_tags($_POST['currency']) );
                $msg = 'You successfully deposited Amount-'.$amount.' (Currency:'.$currency.' Transaction number '.$depositid.':transaction icb was created';
                $response_msg['success'] = 'success';
                $userId =   htmlspecialchars( strip_tags($_POST['userid']) );
                $sql = "UPDATE lavarate_customers SET active = 0 WHERE spotId=".$userId;
                $results = $connection->exec($sql);
            }else{
                $obj = new SafeCharge();
                if( isset($_POST['ErrCode']) && isset( $_POST['ExErrCode'])){
                    $msg = $obj->GeneralResponseCodes($_POST['ErrCode'] , $_POST['ExErrCode'],$depositid);
                }else{
                    $msg =  htmlspecialchars( strip_tags($_POST['message']) );
                }

                $response_msg['success'] = 'fiald';
                $sql_error = "UPDATE lavarate_customer_deposit_log SET error = '".$msg."' WHERE depositId='".$depositid."';";
                $results_error = $connection->exec($sql_error);
            }
        }
        $response_msg['msg'] = $msg;
        $response_msg['sql_err'] = $sql_error;
        $response_msg['sql'] = $sql;
        $response_msg['sql_log'] = $sql_log;

        echo json_encode($response_msg);

        break;
    case 'SafeCharge':
        $data = false;

        $obj = new SafeCharge($_POST);
            if(!empty($_POST)){
                $data = $obj->openSafeCharge();
                echo json_encode($data);
            }


        break;
    case 'getFirstBonus':
        $currentemployee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        $retention = (!isset($_POST['retention']) || $_POST['retention'] != 'on') ? false : true;

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $currentemployee == NULL)
            die('{"error":"Missing arguments"}');

        echo json_encode(getFirstBonus($_POST["dpStart"], $_POST["dpEnd"], $_POST["currentdesk"], $_POST["employee"], $_POST["bonusaction"], ($_POST['retention'] == 'on') ? true : false));
        exit();
	case 'ccBinLog':
        echo(json_encode(ccBinLog($_POST)));
        exit();
 	case 'ccBinCheck':
        echo(json_encode(ccBinCheck($_POST['cc_number'])));
        exit();
	case 'ccLuhnCheck':
        echo(json_encode(ccLuhnCheck($_POST['cc_number'], $_POST['user_id'])));
        exit();
    case 'getApproachs':
        echo(json_encode(getApproachs()));
        exit();

    case 'setApproachs':
        echo(json_encode(setApproachs()));
        exit();

    case 'customers-documents':
		
        echo json_encode(getAllDocuments());
        exit();
		
	case 'customerDocuments':
		
        echo json_encode(customerDocuments($_POST['customer_id']));
        exit();	
    case 'test_inst':
        test_inst();
        exit();
    case 'getCustomerToCAll':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');

        $spotId = getRealUserSpotId();
        if (!is_numeric($spotId) || $spotId == 0)
        {
            die('{"error":"No Spot ID"}');
        }

        echo json_encode(getCustomerToCAll($_POST["dpStart"], $_POST["dpEnd"], $spotId));
        exit();
    case 'insertNewCall':
        if (!isset($_POST["agentID"]) || !isset($_POST["customerID"]))
            die('{"error":"Missing arguments in insert new call to DB"}');

        echo insertNewCall($_POST["agentID"], $_POST["customerID"]);
        exit();
    case 'updateCallInUploadAutoDialer':
        if (!isset($_POST["accountNumber"]) || !isset($_POST["status"]) || !isset($_POST["rowID"]) || !isset($_POST["errorMsg"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(updateCallInUploadAutoDialer($_POST["accountNumber"], $_POST["status"], $_POST["rowID"], $_POST["errorMsg"]));
        exit();
    case 'updateCallInDialAutoDialer':
        if (!isset($_POST["accountNumber"]) || !isset($_POST["callTime"]) || !isset($_POST["dialStatus"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(updateCallInDialAutoDialer($_POST["accountNumber"], $_POST["callTime"], $_POST["dialStatus"]));
        exit();
    case 'insertCallsToBynet':
        if (!isset($_POST["bynetDataCalls"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(insertCallsToBynet($_POST["bynetDataCalls"]));
        exit();
    case 'clickToCall':
        $name = explode(" ", $_SESSION['userdata']['fullname']);
        $agentId = $name[0] . "." . substr($name[1], 0, 1);
        $jsonReturn = clickToCall($_POST['phone'], $agentId,$_POST['customerId']);
        echo $jsonReturn;
        exit();
    case 'getCallsStatusFromBynet':
        if (!isset($_POST["agentName"]) || !isset($_POST["fromDate"]) || !isset($_POST["toDate"]))
            die('{"error":"Missing arguments"}');

        echo getCallsStatusFromBynet($_POST['campaignId'], $_POST['agentName'], $_POST['fromDate'], $_POST['toDate']);
        exit();
    case 'getBynetAgentId':
        $name = explode(" ", $_SESSION['userdata']['fullname']);
        $agentId = $name[0] . "." . substr($name[1], 0, 1);
        echo json_encode($agentId);
        exit();
    case 'getUserSpotId':
        echo json_encode($_SESSION['userdata']['spotId']);
        exit();
    case 'getRealUserSpotId':
        echo json_encode(getRealUserSpotId());
        exit();
    case 'getUserData':
        $userData = $_SESSION['userdata'];
        unset($userData['password'],$userData['updatePasswordDate'],$userData['password_valid']);
        echo json_encode($userData);
        exit();
    case 'getCountries':
        echo json_encode(getCountries());
        exit();
    case 'getATCReport':
        if (!isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        if (!isset($_POST["campaign"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getATCReport($_POST["affiliate"], $_POST["campaign"]));
        exit();

    case 'getHijacksReport':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getHijacksReport($_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'getDeskchangeReport':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getDeskchangeReport($_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'tradesByIP':
        if (!isset($_POST["ip"])) {
            die('{"error":"Missing arguments"}');
        } else {
            if (empty($_POST["ip"])) {
                die('{"error":"Missing arguments"}');
            }
        }


        echo json_encode(getLastTradesByIP($_POST["ip"]));
        exit();
        break;


    case 'employee':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(employee($_POST["dpStart"], $_POST["dpEnd"]));

        exit();
    
	case 'getInventivaIds': 
	    echo json_encode(getInventivaIds(json_decode($_POST["employeeIds"],true)));
	    
		exit();  
    case 'getEmployeesDesks':
        echo json_encode(getEmployeesDesks());

        exit();
    
	case 'getAcademyEmployees':
		echo json_encode(getAcademyEmployees());
		exit();
	
	case 'getTradeEmployees':
		echo json_encode(getTradeEmployees());
		exit();	
		
    case 'getFTDsByCurrencies':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFTDsByCurrencies($_POST["dpStart"], $_POST["dpEnd"]));

        exit();
    case 'cronTasks':
        switch ($_GET['interval']) {
            case '5min':
                //echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . "";
                break;
            case 'hourly':
                //echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . "";
                break;
            case 'daily':
                echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . json_encode(insertUsersPNL(true, false, false, false));
                break;
            case 'monthly':
                echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . json_encode(insertUsersPNL(false, false, false, false));
                break;
            case 'specificDay':
                echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . json_encode(insertUsersPNL(false, true, $_GET["day"], false));
                break;
            case 'range':
                for ($i = 1; $i < $_GET["daysRange"] + 1; $i++) {

                    echo "\n[" . date("Y-m-d H:i:s") . "]\tinsertUsersPNL\t" . json_encode(insertUsersPNL(false, false, false, $i));
                }
                break;
        }
        exit();
        break;

    case 'moveClients':
        if (!isset($_POST["from"]) && !isset($_POST["to"]))
            die('{"error":"Missing arguments"}');

        if (!is_numeric($_POST["from"]) && !is_numeric($_POST["to"]))
            die('{"error":"Error with arguments"}');

        $TradingPlatformDB = new spotDB_TradingPlatform();
        $sql = "SELECT id, employeeInChargeId FROM " . $GLOBALS["site_name"] . "_platform.customers WHERE employeeInChargeId=" . $_POST["from"];
        $results = $TradingPlatformDB->fetchAll($sql);

        if ($results) {
            foreach ($results as $result) {
                $return = spotExec(array('MODULE' => 'Customer',
                    'COMMAND' => 'edit',
                    'customerId' => $result['id'],
                    'employeeInChargeId' => $_POST["to"]
                ));
                if (!$return)
                    $failed = true;

            }
            if (!$failed) {
                die('{"success":"true"}');
            }
        }

        die('{"error":"An error has occurred. Please contact your system administrator"}');
        exit();


    case 'assignDesk':
        if (!isset($_POST["userid"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');

        if (!is_numeric($_POST["userid"]) || !is_numeric($_POST["desk"]))
            die('{"error":"Error with arguments"}');

        $TradingPlatformDB = new spotDB_TradingPlatform();
        $sql = "SELECT employeeInChargeId FROM customers WHERE id=" . $_POST["userid"];
        $results = $TradingPlatformDB->fetchAll($sql);
		
        if ($results)
            if ($results[0]['employeeInChargeId'] == '0') {
                $return = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                    'COMMAND' => 'edit',
                    'customerId' => $_POST["userid"],
                    'employeeInChargeId' => $_POST["desk"]
                ));
				if (strstr($return, '<operation_status>successful</operation_status>'))
                    die('{"success":"true"}');
            }
        die('{"error":"An error has occurred. Please contact your system administrator"}');
        exit();

    case'assignCampaignDesk':
        if (!isset($_POST["cid"]) || !is_numeric($_POST["cid"])) {
            die('{"error":"Empty or invalid Campaign ID"}');
        }

        if (!isset($_POST["tpid"]) || !is_numeric($_POST["tpid"])) {
            die('{"error":"Empty or invalid Trading Platform"}');
        }

        if (!isset($_POST["did"]) || !is_numeric($_POST["did"])) {
            die('{"error":"Empty or invalid Desk ID"}');
        }

        echo json_encode( assignCampaignDesk($_POST["cid"], $_POST["did"], $_POST["tpid"], $_POST["countries"]) );
        die;

    case 'submitTranslation':
        if (!isset($_POST["type"]) || !isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(submitTranslation($_POST["type"], $_POST["id"]));
        exit();


    case 'test':
        $TradingPlatformDB = new spotDB_TradingPlatform();
        $connection = new MySqlDriver();

        $sql = "SELECT  customers.id as customerId,
                  IF(COALESCE(user_desks.deskId,7) = 1,1,IF(customers.campaignId = 339 OR customers.campaignId = 340, 1, 7)) as desk,
                  CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                  customers.currency,
                  country.name as country
                  FROM customers
                  left join country on country.id = customers.Country
                  left join user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                  WHERE customers.isDemo=0
                  AND customers.isLead=0
                  GROUP BY customers.id;";


        echo "done";

        //print_r($results);
        //$prePNL = getUserRealPNLFull($TradingPlatformDB,'2014-04-23 00:00:00',"84",$convertToUSD, true);
        //print_r($prePNL);

        //die('{"success":"good"}');
        exit();
    case 'getUserPNL':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["userid"]))
            die('{"error":"Missing arguments"}');
        $TradingPlatformDB = new spotDB_TradingPlatform();
        echo json_encode(getUserPNLFull($TradingPlatformDB, $_POST["dpStart"], $_POST["dpEnd"], $_POST["userid"]));
        exit();

    case 'getUsersPNL':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getUsersPNL($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], ($_POST['convertUSD'] == 'yes') ? true : false));

        exit();

    case 'testPNL':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');

        $timeStart = $_POST["timeStart"] ? $_POST["timeStart"] : "00:00:00";
        $timeEnd = $_POST["timeEnd"] ? $_POST["timeEnd"] : "23:59:59";
        echo json_encode(testPNL($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], ($_POST['convertUSD'] == 'yes') ? true : false, $_POST['employee'], $timeStart, $timeEnd, ($_POST['robot'] == 'on') ? true : false));

        exit();

    case 'emailBounceReport':
        $loginCount = isset($_POST['loginCount']) ? $_POST['loginCount'] : 1;
        $countries = isset($_POST['countries']) ? $_POST['countries'] : false;
        $drStart = isset($_POST['drStart']) ? $_POST['drStart'] : false;
        $drEnd = isset($_POST['drEnd']) ? $_POST['drEnd'] : false;
        $ldStart = isset($_POST['ldStart']) ? $_POST['ldStart'] : false;
        $ldEnd = isset($_POST['ldEnd']) ? $_POST['ldEnd'] : false;
        $lvStart = isset($_POST['lvStart']) ? $_POST['lvStart'] : false;
        $lvEnd = isset($_POST['lvEnd']) ? $_POST['lvEnd'] : false;
        $depositCount = isset($_POST['depositCount']) ? $_POST['depositCount'] : false;
        $totalDepositAmount = isset($_POST['totalDepositAmount']) ? $_POST['totalDepositAmount'] : false;
        echo json_encode(emailBounceReport($loginCount, $countries, $drStart, $drEnd, $ldStart, $ldEnd, $lvStart, $lvEnd, $depositCount, $totalDepositAmount));
        exit();

    case 'suppressEmails':
        $data = $_POST;
        echo json_encode(suppressEmails($data));
        exit();


    case 'getUsersPNLReport':
        if (!isset($_POST["range"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        writeJson(json_encode(getUsersPNLReport($_POST["range"], $_POST["desk"], (isset($_POST['convertUSD'])) ? true : false)));
        exit();

    case 'getUsersPNLCron':
        if (!isset($_GET["days"]))
            die('{"error":"Missing arguments"}');
        if (!is_numeric($_GET["days"]))
            die('{"error":"Ivalid arguments"}');

        echo json_encode(getUsersPNLCron($_GET["days"]));

        exit();

    case 'getUsersPNLReportDaysAvailable':
        echo json_encode(getUsersPNLReportDaysAvailable());
        exit();


    case 'login':

        $isCaptchaValide = captcha();
        if ($isCaptchaValide == true) {
            $connection = new MySqlDriver();
            $result = login($_POST['login-username'], $_POST['login-password'], $connection);
            if (isset($result['status']) && $result['status'] == true) {
                if(!isset($result['chosen_brand'])){
                    echo json_encode($result);
                	exit();
                }	
                insertUserLogin($_SESSION['userid']);
				loginNavigate($result["changePassword"]);	
                
            } else {
                if (isset($result['msg']) && $result['msg']) {
                    die('{"auth_error":"' . $result['msg'] . '"}');
                } else {
                    die('{"auth_error":"Wrong email or password."}');
                }
            }
        } else {
            die('{"auth_error":"Wrong captcha."}');
        }
        exit();
	
	case 'loginBrandChoice':
		$params = array();
		if (!isset($_POST["userdata"]) || !isset($_POST["authorized_brands"]) || !isset($_POST["chosen_brand"]))
            die('{"error":"Missing arguments"}');
		$params['userdata'] = json_decode($_POST['userdata'],true);
		$params['authorized_brands'] = json_decode($_POST["authorized_brands"],true);
		$params['chosen_brand'] = json_decode($_POST["chosen_brand"],true); 	
		echo json_encode(loginBrandChoice($params));
		exit();
	
    case 'getUserProfileData':
        echo json_encode(getUserProfileData($_SESSION['userid']));
        exit();
    case 'changeNsPassword':
        echo json_encode(changeNsPassword($_SESSION['userid'], strip_tags($_POST['new-password'])));
        exit();

    case 'getTransactions':

        $transactionemployee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['transactionemployee'];
        $currentemployee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['currentemployee'];
        $retention = (!isset($_POST['retention']) || $_POST['retention'] != 'on') ? false : true;
        $includedemo = (!isset($_POST['includedemo']) || $_POST['includedemo'] != 'on') ? false : true;

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]) || $currentemployee == NULL)
            die('{"error":"Missing arguments"}');

        echo json_encode(getTransactions($_POST["dpStart"], $_POST["dpEnd"], $_POST["affiliate"], $_POST["transactiondesk"], $_POST["currentdesk"], $transactionemployee, $_POST["currentemployee"], ($_POST['retention'] == 'on') ? true : false, ($_POST['includeDemo'] == 'on') ? true : false));

        exit();

    case 'getTransactionsForRetention':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getTransactionsForRetention($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getTransactionsForRetention_Last':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getTransactionsForRetention($_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
    
	case 'getVinciTransactionsForCommission':
	    if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
		    die('{"error":"Missing arguments"}');
		echo json_encode(getVinciTransactionsForCommission($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
		  
    case 'getTransactionsForCommission':

        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getTransactionsForCommission($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getTransactionsForConversion':
        $campaign = isset($_POST['campaign']) ? $_POST['campaign'] : false;
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL)
            die('{"error":"Missing arguments"}');

        echo json_encode(getTransactionsForConversion($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"],$campaign));

        exit();
    
	case 'multiBrandTransactionsForConversion':
		$campaign = isset($_POST['campaign']) ? $_POST['campaign'] : false;
		if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(multiBrandTransactionsForConversion($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"],$campaign));

        exit(); 
		
    case 'getFreshLeads':
        $campaign=isset($_POST["campaign"]) ? $_POST["campaign"] : false;
        if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFreshLeads($_POST["dpStart"],$_POST["dpEnd"],$_POST["desk"],$_POST["employee"],$campaign));
        exit();

    case 'getFTDsForChart':
        if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFTDsForChart($_POST["dpStart"],$_POST["dpEnd"],$_POST["desk"]));

        exit();

    case 'getNewRegisterLeads':
        if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNewRegisterLeads($_POST["dpStart"],$_POST["dpEnd"],$_POST["desk"]));

        exit();

    case 'getWithdrawals':
        if (!isset($_POST["dpEnd"]) || !isset($_POST["dpStart"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getWithdrawals($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getTransactionsForCommission_Last':

        if (!isset($_POST["last_dpStart"]) || !isset($_POST["last_dpEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getTransactionsForCommission($_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getWithdrawalsForCommission':

        echo json_encode(getWithdrawalsForCommission($_POST["dpEnd"], $_POST["customerId"]));

        exit();

    case 'getWithdrawals':
        if (!isset($_POST["dpEnd"]) || !isset($_POST["dpStart"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getWithdrawals($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getRetentionWithdrawals':
        $customerId= isset($_POST["customerId"]) ? $_POST["customerId"] : false;
        if(!isset($_POST["wStart"]) || !isset($_POST["wEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRetentionWithdrawals($_POST["wStart"],$_POST["wEnd"],$_POST["desk"],$customerId));
        exit();

    case 'getAgentWithdrawalsForCustomer':
        $customerId= isset($_POST["customerId"]) ? $_POST["customerId"] : false;
        $desk= isset($_POST["desk"]) ? $_POST["desk"] : false;
        if(!isset($_POST["month"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getAgentWithdrawalsForCustomer($_POST["month"],$customerId,$desk));
        exit();

    case 'getRealTransactionsForWithdrawals':
        if(!isset($_POST['customerId']))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealTransactionsForWithdrawals($_POST['customerId']));
        exit();
    
	case 'getVinciBonus':
        
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST['employee']) || !isset($_POST['bonusType']))
            die('{"error":"Missing arguments"}');
        echo json_encode(getVinciBonus($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST['employee'], $_POST['bonusType']));
        exit();
		
    case 'getPenalty':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getPenalty($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getExtra':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getExtra($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();
		
    case 'getPostponed':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getPostponed($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getFines':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getFines($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getOtherBonus':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getOtherBonus($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getAllExtras':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getAllExtras($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();
    
    case 'getAllVinciBonuses':
		if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getAllVinciBonuses($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
		
    case 'addVinciBonus':

        if (!isset($_POST["bonusType"]) || !isset($_POST["bonusDate"]) || !isset($_POST["bonusEmployee"]) || !isset($_POST["bonusCurrency"]) 
            || !isset($_POST["bonusAmount"]) || !isset($_POST["bonusPaymentMethod"]) || !isset($_POST["bonusReason"])
			)
            die('{"error":"Missing arguments"}');
			
        $extra_bonusMonth = isset($_POST["extra_bonusMonth"]) ? $_POST["extra_bonusMonth"] : false; 
        echo json_encode(addVinciBonus($_POST["bonusType"],$_POST["bonusDate"],$_POST["bonusEmployee"],$_POST["bonusCurrency"],$_POST["bonusAmount"],$_POST["bonusPaymentMethod"],$_POST["bonusReason"],$extra_bonusMonth));

        exit();
	
	case 'addVinciPaid':
		if (!isset($_POST["paidDate"]) || !isset($_POST["paidEmployee"]) || !isset($_POST["paidAmount"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addVinciPaid($_POST["paidDate"], $_POST["paidEmployee"], $_POST["paidAmount"]));

        exit();
		
	case 'addVinciDifference':
		if (!isset($_POST["differenceMonth"]) || !isset($_POST["differenceEmployeeId"]) || !isset($_POST["differenceAmount"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addVinciDifference($_POST["differenceMonth"], $_POST["differenceEmployeeId"], $_POST["differenceAmount"]));

        exit();			
		
    case 'addPenaltyTable':
        $id= isset($_POST['withdrawalId']) ? $_POST['withdrawalId'] : 0;
        if (!isset($_POST["penaltyDate"]) || !isset($_POST["penaltyEmployee"]) || $_POST["penaltyEmployee"] == 0 || !isset($_POST["penaltyCurrency"]) || !isset($_POST["penaltyAmount"]) || !isset($_POST["penaltyType"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addPenaltyTable($_POST["penaltyDate"], $_POST["penaltyEmployee"], $_POST["penaltyCurrency"], $_POST["penaltyAmount"], $_POST["reason"], $_POST["penaltyType"],$id));

        exit();

    case 'addExtraTable':

        if (!isset($_POST["extraDate"]) || !isset($_POST["extraEmployee"]) || $_POST["extraEmployee"] == 0 || !isset($_POST["extraCurrency"]) || !isset($_POST["extraAmount"]) || !isset($_POST["extraType"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addExtraTable($_POST["extraDate"], $_POST["extraEmployee"], $_POST["extraCurrency"], $_POST["extraAmount"], $_POST["extra_reason"], $_POST["extraType"]));

        exit();

    case 'addPostponedTable':
        $transactionId = isset($_POST["transactionId"]) ? $_POST["transactionId"] : 0;
        if (!isset($_POST["postponedDate"]) || !isset($_POST["postponedEmployee"]) || $_POST["postponedEmployee"] == 0 || !isset($_POST["postponedCurrency"]) || !isset($_POST["postponedAmount"]) || !isset($_POST["postponedType"]) || !isset($_POST["extra_bonusMonth"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addPostponedTable($_POST["postponedDate"], $_POST["postponedEmployee"], $_POST["postponedCurrency"], $_POST["postponedAmount"], $_POST["postponed_reason"], $_POST["postponedType"], $_POST["extra_bonusMonth"], $transactionId));

        exit();

    case 'addFinesTable':

        if (!isset($_POST["finesDate"]) || !isset($_POST["finesEmployee"]) || $_POST["finesEmployee"] == 0 || !isset($_POST["finesCurrency"]) || !isset($_POST["finesAmount"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addFinesTable($_POST["finesDate"], $_POST["finesEmployee"], $_POST["finesCurrency"], $_POST["finesAmount"], $_POST["fines_reason"]));

        exit();

    case 'addOtherBonusTable':

        if (!isset($_POST["otherDate"]) || !isset($_POST["otherEmployee"]) || $_POST["otherEmployee"] == 0 || !isset($_POST["otherCurrency"]) || !isset($_POST["otherAmount"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addOtherBonusTable($_POST["otherDate"], $_POST["otherEmployee"], $_POST["otherCurrency"], $_POST["otherAmount"], $_POST["other_reason"]));

        exit();

    case 'addExtraForConversion':

        if (!isset($_POST["extraDate"]) || !isset($_POST["extraEmployee"]) || !isset($_POST["extraAmount"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(addExtraForConversion($_POST["extraDate"], $_POST["extraEmployee"], $_POST["extraAmount"], $_POST["extraReason"]));

        exit();

    case 'assignForConversion':

        if (!isset($_POST["transactionId"]) || !isset($_POST["employeeId"]) || !isset($_POST["assign"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(assignForConversion($_POST["transactionId"], $_POST["employeeId"], $_POST["assign"]));

        exit();

    case 'addPaid':

        if (!isset($_POST["paidDate"]) || !isset($_POST["paidEmployee"]) || $_POST["paidEmployee"] == 0 || !isset($_POST["paidAmount"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addPaid($_POST["paidDate"], $_POST["paidEmployee"], $_POST["paidAmount"]));

        exit();

    case 'getPaid':

        if (!isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getPaid($_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
    case 'addDifference':

        if (!isset($_POST["differenceMonth"]) || !isset($_POST["differenceEmployeeId"]) || !isset($_POST["differenceAmount"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addDifference($_POST["differenceMonth"], $_POST["differenceEmployeeId"], $_POST["differenceAmount"]));

        exit();

    case 'getDifference':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getDifference($_POST["dpEnd"], $_POST["desk"], $employee));

        exit();
    
	case 'getVinciDifference':
        
        if (!isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getVinciDifference($_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
		
    case 'deletePenalty':
        $retentionWithdrawalId= isset($_POST["retentionWithdrawalId"]) ? $_POST["retentionWithdrawalId"] : false;
        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deletePenalty($_POST["id"],$retentionWithdrawalId));

        exit();

    case 'deleteExtra':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteExtra($_POST["id"]));

        exit();
        
    case 'deleteVinciBonus':

        if (!isset($_POST["id"]) || !isset($_POST["bonusType"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteVinciBonus($_POST["id"],$_POST["bonusType"]));

        exit();    
    
    case 'deletePostponed':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deletePostponed($_POST["id"]));

        exit();

    case 'deleteFines':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteFines($_POST["id"]));

        exit();

    case 'deleteOtherBonus':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteOtherBonus($_POST["id"]));

        exit();

    case 'deleteDifference':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteDifference($_POST["id"]));

        exit();
	
	case 'deleteVinciDifference':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteVinciDifference($_POST["id"]));

        exit();	

    case 'deleteExtraForConversion':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteExtraForConversion($_POST["id"]));

        exit();

    case 'deleteConversionShiftManager':

        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(deleteConversionShiftManager($_POST["id"]));

        exit();


    case 'getEfficiency':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEfficiency($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();
    
	case 'addVinciSplit':
	    
	    echo json_encode(addVinciSplit(json_decode($_POST['split'],true),$_POST['transactionId']));
		
		exit();
	
	case 'deleteVinciSplit':
	    
	    echo json_encode(deleteVinciSplit($_POST['transactionId']));
		
		exit();
	
	case 'addVinciChangeEmployee':
		if(!isset($_POST["transactionId"]) || !isset($_POST["changeEmployee"]))
		    die('{"error":"Missing arguments"}');
		
		echo json_encode(addVinciChangeEmployee($_POST['transactionId'],$_POST["changeEmployee"]));
		exit();
	
    case 'deleteVinciChangeEmployee':
		if(!isset($_POST["transactionId"]))
		    die('{"error":"Missing arguments"}');
		
		echo json_encode(deleteVinciChangeEmployee($_POST['transactionId']));
		exit();
					
    case 'getSplit':

        if ($_POST["percentage"] == '%100' && (!isset($_POST["transactionId"]) || $_POST["splitEmployee"] == 0 || !isset($_POST["splitPercentage"])))
            die('{"error":"Missing arguments"}');
        if ($_POST["percentage"] != '%100' && !isset($_POST["transactionId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSplit($_POST["transactionId"], $_POST["splitEmployee"], $_POST["percentage"], $_POST["splitPercentage"]));

        exit();
    
	case 'addSplit':
	    
	    echo json_encode(addSplit(json_decode($_POST['split'],true),$_POST['transactionId']));
		
		exit();
	
	case 'deleteSplit':
	    
	    echo json_encode(deleteSplit($_POST['transactionId']));
		
		exit();		
		
    case 'getChangeTransaction':

        if (!isset($_POST["transaction"]) || !isset($_POST["changeEmployee"]) || $_POST["chooseEmployee"] == 0)
            die('{"error":"Missing arguments"}');
        echo json_encode(getChangeTransaction($_POST["transaction"], $_POST["chooseEmployee"]));

        exit();

    case 'getFtds':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFtds($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));
        exit();

    case 'getFtds_Last':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFtds($_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["desk"], $_POST["employee"]));
        exit();

    case 'editCustomer':
        if (!isset($_POST["customers"]) && !isset($_POST["change_fields"]) && !isset($_POST["url"]))

            die('{"error":"Missing arguments"}');
		
        echo json_encode(editCustomer(json_decode($_POST["customers"],true),json_decode($_POST["change_fields"],true),$_POST["url"]));
        exit();
		
	case 'editDeposit':
        if (!isset($_POST["deposits"]) && !isset($_POST["change_fields"]) && !isset($_POST["url"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(editDeposit(json_decode($_POST["deposits"],true),json_decode($_POST["change_fields"],true),$_POST["url"]));
        exit();	
	
	case 'editCustomerForCustomersData':
        if (!isset($_POST["customers"]) && !isset($_POST["employee"]) && !isset($_POST["saleStatus"]))
            die('{"error":"Missing arguments"}');
            
        echo json_encode(editCustomerForCustomersData($_POST["customers"],$_POST["employee"],$_POST["saleStatus"]));
        exit();	
        	
	case 'changeVIPGroupForCustomer':
		 if (!isset($_POST["customerId"]) && !isset($_POST["group"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(changeVIPGroupForCustomer($_POST["customerId"],$_POST["group"]));
        exit();
    
    case 'changePasswordForCustomer':
		 if (!isset($_POST["customerId"]) && !isset($_POST["password"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(changePasswordForCustomer($_POST["customerId"],$_POST["password"]));
        exit();
		    
    case 'addBonusDepositSpotApi':
        if (!isset($_POST["customerId"]) && !isset($_POST["amount"]) && !isset($_POST["leverage"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(addBonusDepositSpotApi($_POST["customerId"],$_POST["amount"],$_POST["leverage"],$_POST["description"]));
        exit();
	case 'addBonusDepositByEmployee':
		
		if (!isset($_POST["customerId"]) && !isset($_POST["amount"]) && !isset($_POST["leverage"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(addBonusDepositByEmployee($_POST["customerId"], $_POST["amount"], $_POST['currency'], $_POST["leverage"], $_POST["description"]));
		exit();
    case 'addBonusWithdrawalSpotApi':
        if (!isset($_POST["customerId"]) && !isset($_POST["amount"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(addBonusWithdrawalSpotApi($_POST["customerId"],$_POST["amount"]));
        exit();

    case 'getNoTurnover':
        $regStatus = isset($_POST['regStatus']) ? $_POST['regStatus'] : false;
		 
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNoTurnover($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"], $regStatus));

        exit();

    case 'getNotesForFTD':

        echo json_encode(getNotesForFTD($_POST["note_customer"], $_POST["note_employee"]));
        exit();

    case 'getNotes':
		$type = isset($_POST['type']) ? $_POST['type'] : false;
        if (!isset($_POST['customerId']))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNotes($_POST["customerId"],$type));
        exit();

    case 'getNotesForStatus':
        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNotesForStatus($_POST["customerId"]));
        exit();

    case 'getCommentsForStatus':
        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getCommentsForStatus($_POST["customerId"]));
        exit();

    case 'getSessionsForStatus':
        if (!isset($_POST["sessionCustomerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSessionsForStatus($_POST["sessionCustomerId"]));
        exit();
    
	case 'getTradeSessions':
		$employee = isset($_POST['employee']) ? $_POST['employee'] : false;
		if(!isset($_POST["sStart"]) || !isset($_POST["sEnd"]))
		    die('{"error":"Missing arguments"}');
		echo json_encode(getTradeSessions($_POST["sStart"],$_POST["sEnd"],$employee));
        exit();
		 
    case 'closeTradeSessionForStatus':
        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(closeTradeSessionForStatus($_POST["id"]));
        exit();

    case 'openTradeSessionForStatus':
        if (!isset($_POST["openSessionCustomerId"]) || !isset($_POST["userId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(openTradeSessionForStatus($_POST["openSessionCustomerId"], $_POST["userId"]));
        exit();

    case 'getTradeSessionPositions':
        if (!isset($_POST["sessionId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTradeSessionPositions($_POST["sessionId"]));
        exit();

    case 'getUnnotifiedTradeSessions':
        echo json_encode(getUnnotifiedTradeSessions($_POST));
        exit();

    case 'changeNotifySessions':
        echo json_encode(changeNotifySessions($_POST));
        exit();

    case 'getAcademySessions':
        $academyEmployee = isset($_POST["academyEmployee"]) ? $_POST["academyEmployee"] : false;
        if (!isset($_POST["sStart"]) || !isset($_POST["sEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getAcademySessions($_POST["sStart"],$_POST["sEnd"],$academyEmployee));
        exit();

    case 'closeAcademySession':
        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(closeAcademySession($_POST["id"]));
        exit();
    case 'openAcademySession':
        if (!isset($_POST["openSessionCustomerId"]) || !isset($_POST["userId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(openAcademySession($_POST["openSessionCustomerId"],$_POST["userId"]));
        exit();
    case 'addAcademyComment':
        if (!isset($_POST["sessionId"]) || !isset($_POST["comment"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addAcademyComment($_POST["sessionId"],$_POST["comment"]));
        exit();
    case 'getCustomerForSession':
        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getCustomerForSession($_POST["customerId"]));
        exit();
    case 'getMonthsForRetention':
        if (!isset($_POST["dpMonth"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getMonthsForRetention($_POST["dpMonth"], $_POST["desk"], $_POST["employee"]));
        exit();

    case 'getCountry':
        echo json_encode(getCountry());
        exit();

    case 'getDeskChangesForRetention':
        if (!isset($_POST["chStart"]) || !isset($_POST["chEnd"]) || !isset($_POST["deskFrom"]) || !isset($_POST["deskTo"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getDeskChangesForRetention($_POST["chStart"], $_POST["chEnd"], $_POST["deskFrom"], $_POST["deskTo"]));
        exit();
        
    case 'getRetentionCustomers':

        $countries   = isset($_POST['countries'])   ? $_POST['countries']   : false;
        $excEmployee = isset($_POST['excEmployee']) ? $_POST['excEmployee'] : false;
        $drStart     = isset($_POST['drStart'])     ? $_POST['drStart']     : false;
        $drEnd       = isset($_POST['drEnd'])       ? $_POST['drEnd']       : false;
        $fdStart     = isset($_POST['fdStart'])     ? $_POST['fdStart']     : false;
        $fdEnd       = isset($_POST['fdEnd'])       ? $_POST['fdEnd']       : false;
        $ldStart     = isset($_POST['ldStart'])     ? $_POST['ldStart']     : false;
        $ldEnd       = isset($_POST['ldEnd'])       ? $_POST['ldEnd']       : false;
        $llStart     = isset($_POST['llStart'])     ? $_POST['llStart']     : false;
        $llEnd       = isset($_POST['llEnd'])       ? $_POST['llEnd']       : false;
        $lnStart     = isset($_POST['lnStart'])     ? $_POST['lnStart']     : false;
        $lnEnd       = isset($_POST['lnEnd'])       ? $_POST['lnEnd']       : false;
        $aStart      = isset($_POST['aStart'])      ? $_POST['aStart']      : false;
        $aEnd        = isset($_POST['aEnd'])        ? $_POST['aEnd']        : false;
        $saleStatus  = isset( $_POST['status'] )    ? $_POST['status']      : false;
        $riskStatus  = isset( $_POST['riskstatus'] )    ? $_POST['riskstatus']      : false;
		
        $closed = isset($_POST['closed']) && $_POST['closed'] == 'on' ? true : false;
        echo json_encode(getRetentionCustomers($_POST['desk'], $_POST['employee'], $excEmployee, $countries, $drStart, $drEnd, $fdStart, $fdEnd, $ldStart, $ldEnd, $llStart, $llEnd, $lnStart, $lnEnd, $aStart, $aEnd, $saleStatus, $riskStatus, $closed));
        exit();

    case 'getFTDsByCampaign':

        $desk= isset($_POST["desk"]) ? $_POST["desk"] : false;
        if(!isset($_POST["fdStart"]) || !isset($_POST["fdEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFTDsByCampaign($_POST["fdStart"],$_POST["fdEnd"],$desk));
        exit();

    case 'getScore':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getScore($_POST["dpStart"], $_POST["dpEnd"], $_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["last_2_dpStart"], $_POST["last_2_dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getRealScore':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealScore($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getRealPNLForRetention':
        if (!isset($_POST["pStart"]) || !isset($_POST["pEnd"]) || $_POST["desk"]==NULL || $_POST["employee"]==NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealPNLForRetention($_POST["pStart"],$_POST["pEnd"], $_POST["desk"],$_POST["employee"]));
        exit();

    case 'getPositionsForRealPNL':
        if (!isset($_POST["expireStart"]) || !isset($_POST["expireEnd"]) || !isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getPositionsForRealPNL($_POST["expireStart"],$_POST["expireEnd"], $_POST["customerId"]));
        exit();
    
	case 'getQuickPNL':
		
		if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]) || !isset($_POST["employee"]))
		   die('{"error":"Missing arguments"}');
		
		echo json_encode(getQuickPNL($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], $_POST["employee"]));
        exit();
		
    case 'onlyFTDs':
        $retention = (sizeof($_POST) == 4) ? false : true;
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(onlyFTDs($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"], $retention));
        exit();

    case 'getOpenPositionsForStatus':

        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getOpenPositionsForStatus($_POST["customerId"]));

        exit();

    case 'getPendingWithdrawals':

        if (!isset($_POST["pendingCustomerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getPendingWithdrawals($_POST["pendingCustomerId"]));
        exit();

    case 'getTradeStatus':
        $RAB_from = isset($_POST['RAB_from']) ? $_POST['RAB_from'] : false;
        $RAB_to = isset($_POST['RAB_to']) ? $_POST['RAB_to'] : false;
        $regStatus = isset($_POST['regStatus']) ? $_POST['regStatus'] : false;
        $tradeStatus = isset($_POST['tradeStatus']) ? $_POST['tradeStatus'] : false;
        $employee = isset($_POST['employee']) ? $_POST['employee'] : false;
        $countries = isset($_POST['countries']) ? $_POST['countries'] : false;
        $excludeCountries = isset($_POST['excludeCountries']) ? $_POST['excludeCountries'] : false;
		$verification = isset($_POST['verification']) ? $_POST['verification'] : false;
        $customerId = isset($_POST['chosenCustomerId']) ? $_POST['chosenCustomerId'] : false;

        $zeroRAB = isset($_POST['zeroRAB']) && $_POST['zeroRAB'] == 'on' ? true : false;
        if (!isset($_POST["desk"])) {
            die('{"error":"Missing arguments"}');
        }
        if (($RAB_from && !is_numeric($RAB_from)) || ($RAB_to && !is_numeric($RAB_to)) || ($customerId && !is_numeric($customerId)))
		    die('{"error":"Insert Numeric Values"}');
			
        echo json_encode(getTradeStatus($RAB_from, $RAB_to, $regStatus, $tradeStatus, $countries, $excludeCountries, $_POST["desk"], $employee, $verification, $customerId, $zeroRAB));
        exit();


    case 'changeTradeStatus':

        if (!isset($_POST["customerId"]) || !isset($_POST["new_tradeStatus"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(changeTradeStatus($_POST["customerId"], $_POST["new_tradeStatus"]));

        exit();

    case 'deleteTradeStatus':

        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo deleteTradeStatus($_POST["customerId"]);

        exit();

    case 'addComment':

        if (!isset($_POST["customerId"]) || !isset($_POST["comment"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addComment($_POST["customerId"], $_POST["comment"]));

        exit();

    case 'deleteComment':

        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo deleteComment($_POST["customerId"]);

        exit();

    case 'addRetentionWithdrawalsTable':

        echo json_encode(addRetentionWithdrawalsTable($_POST));

        exit();

    case 'deleteAgentWithdrawals':
        if(!isset($_POST["customerId"]) || !isset($_POST["month"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(deleteAgentWithdrawals($_POST["customerId"],$_POST["month"]));
        exit();

    case 'addTargetForConversion':

        if (!isset($_POST["week"]) || !isset($_POST["month"]) || !isset($_POST["target"]) || !isset($_POST["target_employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addTargetForConversion($_POST["week"], $_POST["month"], $_POST["target"], $_POST["target_employee"]));

        exit();

    case 'changeWeeklyBonusForConversion':

        echo json_encode(changeWeeklyBonusForConversion($_POST));

        exit();

    case 'deleteTargetForConversion':

        if (!isset($_POST["week"]) || !isset($_POST["month"]) || !isset($_POST["target_employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(deleteTargetForConversion($_POST["week"], $_POST["month"], $_POST["target_employee"]));

        exit();

    case 'addWeeksForConversion':
        if (!isset($_POST["wStart"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addWeeksForConversion($_POST["week_1"], $_POST["week_2"], $_POST["week_3"], $_POST["week_4"], $_POST["wStart"]));

        exit();

    case 'addConversionShiftManager':
        if(!isset($_POST["dpMonth"]) || !isset($_POST["employee"]) || !isset($_POST["userId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addConversionShiftManager($_POST["dpMonth"],$_POST["employee"],$_POST["userId"]));

        exit();
		
    case 'addShiftFTDsForConversion':
        if(!isset($_POST["shiftDate"]) || !isset($_POST["shiftFTD"]) || !isset($_POST["employee"]) || !isset($_POST["shiftType"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(addShiftFTDsForConversion($_POST["shiftDate"],$_POST["shiftFTD"],$_POST["employee"],$_POST["shiftType"]));

        exit();
	
	case 'deleteShiftFTDsForConversion':
        if(!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(deleteShiftFTDsForConversion($_POST["id"]));

        exit();
		
	case 'getShiftFTDsForConversion':
        if(!isset($_POST["dpMonth"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getShiftFTDsForConversion($_POST["dpMonth"]));

        exit();	
		
    case 'getConversionWeeks':
        if (!isset($_POST["dpStart"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getConversionWeeks($_POST["dpStart"]));

        exit();

    case 'getTargetsForConversion':
        if (!isset($_POST["dpStart"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getTargetsForConversion($_POST["dpStart"]));

        exit();

    case 'getWeeklyBonusForConversion':
        if (!isset($_POST["dpStart"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getWeeklyBonusForConversion($_POST["dpStart"]));

        exit();

    case 'getExtraForConversion':
        if (!isset($_POST["dpMonth"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getExtraForConversion($_POST["dpMonth"]));

        exit();

    case 'getConversionShiftManagers':
        $employee = isset($_POST['employee']) ? $_POST['employee'] : false;

        if (!isset($_POST["dpMonth"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getConversionShiftManagers($_POST["dpMonth"],$_POST["employee"]));

        exit();

    case 'getConversionShifts':
        if (!isset($_POST["dpMonth"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getConversionShifts($_POST["dpMonth"]));

        exit();

    case 'getFTDsForShiftManagers':
        if (!isset($_POST["dpMonth"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getFTDsForShiftManagers($_POST["dpMonth"]));

        exit();

    case 'openConversionShift':
        if (!isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(openConversionShift($_POST["employee"]));

        exit();

    case 'closeConversionShift':
        if (!isset($_POST["id"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(closeConversionShift($_POST["id"]));

        exit();

    case 'changeDuplicate':

        if (!isset($_POST["transactionId"]) || !isset($_POST["transactionEmployeeId"]) || !isset($_POST["type"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(changeDuplicate($_POST["transactionId"], $_POST["transactionEmployeeId"], $_POST["type"]));

        exit();

    case 'deleteChangedEmployeeForConversion':
        if(!isset($_POST["id"]))
            die ('{"error":"Missing arguments"}');
        echo json_encode(deleteChangedEmployeeForConversion($_POST["id"]));
        exit();

    case 'changeEmployeeForConversion':
        if(!isset($_POST["transaction"]) || !isset($_POST["chooseEmployee"]))
            die ('{"error":"Missing arguments"}');
        echo json_encode(changeEmployeeForConversion($_POST["transaction"],$_POST["chooseEmployee"]));
        exit();

    case 'getNotesForConversion':
        if (!isset($_POST["nStart"]) || !isset($_POST["nEnd"]) || !isset($_POST["note_customer"]) || !isset($_POST["note_employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNotesForConversion($_POST["nStart"], $_POST["nEnd"], $_POST["note_customer"], $_POST["note_employee"]));
        exit();
    
	case 'getPreExcludeEmployees':
		if(!isset($_POST["desk"]))
		  die('{"error":"Missing arguments"}');
		echo json_encode(getPreExcludeEmployees($_POST["desk"]));
		exit();
	
	case 'addPreExcludeEmployees':
		if(!isset($_POST["employee"]))
		  die('{"error":"Missing arguments"}');
		echo json_encode(addPreExcludeEmployees($_POST["employee"]));
		exit();	
	
	case 'deletePreExcludeEmployees':
		if(!isset($_POST["id"]))
		  die('{"error":"Missing arguments"}');
		echo json_encode(deletePreExcludeEmployees($_POST["id"]));
		exit();	
			
    case 'getOpenPositionsForStatus':

        if (!isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getOpenPositionsForStatus($_POST["customerId"]));

        exit();

    case 'getPendingWithdrawals':

        if (!isset($_POST["pendingCustomerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getPendingWithdrawals($_POST["pendingCustomerId"]));
        exit();

    case 'getRealScoreForChart':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealScoreForChart($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getChartForDesks':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $_POST["desk1"] == NULL || $_POST["desk2"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getChartForDesks($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk1"], $_POST["desk2"]));

        exit();
		
    case 'getRealPNLForChart':	
    
       if (!isset($_POST["pStart"]) || !isset($_POST["pEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
           die('{"error":"Missing arguments"}');
       echo json_encode(getRealPNLForChart($_POST["pStart"],$_POST["pEnd"], $_POST["desk"],$_POST["employee"]));
      
       exit();
	case 'getPNLForPeriod':
			
       if (!isset($_POST["pStart"]) || !isset($_POST["pEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
           die('{"error":"Missing arguments"}');
       echo json_encode(getPNLForPeriod($_POST["pStart"],$_POST["pEnd"], $_POST["desk"],$_POST["employee"]));
      
       exit();
	case 'getNetDepositForPeriod':
			
       if (!isset($_POST["pStart"]) || !isset($_POST["pEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
           die('{"error":"Missing arguments"}');
       echo json_encode(getNetDepositForPeriod($_POST["pStart"],$_POST["pEnd"], $_POST["desk"],$_POST["employee"]));
      
       exit();  
	
	case 'getRealPNLForCustomerCharts':
		
	   if (!isset($_POST["pStart"]) || !isset($_POST["pEnd"]) || !isset($_POST["customerId"]) || !isset($_POST["pre_deposit"]) || !isset($_POST["pre_pnl"]) || !isset($_POST["rate"]))
           die('{"error":"Missing arguments"}');
      
       echo json_encode(getRealPNLForCustomerCharts($_POST["pStart"], $_POST["pEnd"], $_POST["customerId"], $_POST["pre_deposit"], $_POST["pre_pnl"], $_POST["rate"]));
      
       exit();    
       
    case 'getRealBalance':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealBalance($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getRealBalance_Last':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRealBalance($_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getFTDsForRetention':
        $campaign = isset($_POST["campaign"]) ? $_POST["campaign"] : false;
        $closed = (isset($_POST["closed"]) && $_POST["closed"] == 'on') ? true : false;
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
		$desk = $_SESSION['userdata']['spotId'] != 0 ? getUserDesk($employee) : $_POST["desk"]; 
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $desk == NULL || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getFTDsForRetention($_POST["dpStart"], $_POST["dpEnd"], $desk, $employee, $campaign, $closed));
        exit();

    case 'getTurnoverForRetention':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTurnoverForRetention($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();


    case 'getTurnoverForRetention_Last':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTurnoverForRetention($_POST["last_dpStart"], $_POST["last_dpEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getAssets':

        if (!isset($_POST["exStart"]) || !isset($_POST["exEnd"]) || $_POST["desk"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getAssets($_POST["exStart"], $_POST["exEnd"], $_POST["desk"]));

        exit();

    case 'getOpenPositionsForChart':

        if (!isset($_POST["exStart"]) || !isset($_POST["exEnd"]) || $_POST["desk"] == NULL || $_POST["asset"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getOpenPositionsForChart($_POST["exStart"], $_POST["exEnd"], $_POST["desk"], $_POST["asset"]));

        exit();

    case 'getOpenPositionsForRealPNL':

        if (!isset($_POST["exEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getOpenPositionsForRealPNL($_POST["exEnd"], $_POST["desk"], $_POST["employee"]));

        exit();

    case 'getCurrentPrice':
        if (!isset($_POST["asset"]))
            die('{"error":"Missing arguments"}');
        echo getCurrentPrice($_POST["asset"]);
        exit();

    case 'getCurrentPricesForAssets':
        if (!isset($_POST["exEnd"]) || $_POST["desk"] == NULL || $_POST["employee"] == NULL)
            die('{"error":"Missing arguments"}');
        echo getCurrentPricesForAssets($_POST["exEnd"], $_POST["desk"], $_POST["employee"]);
        exit();

    case 'getDepositsDocumentStatus':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getDepositsDocumentStatus($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], $_POST["employee"]));
        exit();


    case 'getSpeedVerification':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSpeedVerification($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"]));
        exit();


    case 'getChargebacks':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getChargebacks($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], $_POST["employee"]));

        exit();

    case 'getWithdrawalRequests':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]) || $employee == NULL)
            die('{"error":"Missing arguments"}');
        echo json_encode(getWithdrawalRequests($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], $employee));

        exit();

    case 'getProfitLoss':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getProfitLoss($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"]));

        exit();

    case 'getGamingTax':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getGamingTax($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"]));

        exit();

    case 'getDirtyPnl':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getDirtyPnl($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"]));

        exit();

    case 'getProfitLossByAffiliate':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getProfitLossByAffiliate($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"]));

        exit();

    case 'getSelfDeposits':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSelfDeposits($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"]));

        exit();

    case 'getPayouts':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getPayouts($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"]));

        exit();


    case 'getTurnover':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $employee == null)
            die('{"error":"Missing arguments"}');
        $openaccounts = isset($_POST["openaccounts"]) ? $_POST["openaccounts"] : false;
        echo json_encode(getTurnover($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee, $openaccounts));
        exit();

    case 'getTotalTurnover':
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || $employee == null)
            die('{"error":"Missing arguments"}');

        echo json_encode(getTotalTurnover($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee, $_POST["affiliate"]));
        exit();


    case 'getDepositors':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        $openaccounts = isset($_POST["openaccounts"]) ? $_POST["openaccounts"] : false;
        $deactivatedaccounts = isset($_POST["deactivatedaccounts"]) ? $_POST["deactivatedaccounts"] : false;
		$closedaccounts = isset($_POST["closedaccounts"]) ? $_POST["closedaccounts"] : false;
        echo json_encode(getDepositors($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $openaccounts,$deactivatedaccounts,$closedaccounts));
        exit();

    case 'getUnactiveCustomers':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getUnactiveCustomers($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));

        exit();

    case 'getTransactionEmployees':
        if (!isset($_POST["transactiondesk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployees($_POST["transactiondesk"]));
        exit();

    case 'getCurrentEmployees':
        if (!isset($_POST["currentdesk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployees($_POST["currentdesk"]));
        exit();


    case 'getEmployeesShort':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployees($_POST["desk"], true));
        exit();

    case 'getEmployees':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployees($_POST["desk"]));
        exit();

    case 'getEmployeesForRetention':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployeesForRetention($_POST["desk"]));
        exit();
    
	case 'getVinciEmployeesForRetention':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getVinciEmployeesForRetention($_POST["desk"]));
        exit();
		
    case 'getEmployeesForConversion':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployeesForConversion($_POST["desk"]));
        exit();
    
	case 'getEmployeesForConversionWithSADesk':
        if (!isset($_POST["desk"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getEmployeesForConversionWithSADesk($_POST["desk"]));
        exit();
	
	case 'getSaleStatusValues':
		
		echo json_encode(getSaleStatusValues());
		exit();
	
	case 'getRegStatusValues':
		
		echo json_encode(getRegStatusValues());
		exit();
	
	case 'getAccountTypes':
		echo json_encode(getAccountTypes());
		exit();	
		
    case 'getAffiliates':
        echo json_encode(getAffiliates());
        exit();

    case 'getHasOptionsAffiliates':
        echo json_encode(getHasOptionsAffiliates());
        exit();

    case 'getSpotOptionCampaigns':
        echo json_encode(getSpotOptionCampaigns());
        exit();

    case 'getLeadsByCountries':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');

        $dpStart = DateTime::createFromFormat('Y-m-d', $_POST["dpStart"]);
        // $dpStart->modify('-1 day');

        echo json_encode(getLeadsByCountries($dpStart->format('Y-m-d'), $_POST["dpEnd"], $_POST["affiliate"]));
        exit();

    case 'getLeadsByAffiliates':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');

        $dpStart = DateTime::createFromFormat('Y-m-d', $_POST["dpStart"]);
        // $dpStart->modify('-1 day');


        $temp = getLeadsByAffiliates($dpStart->format('Y-m-d'), $_POST["dpEnd"], $_POST["affiliate"]);
        $tempAll = getLeadsByAffiliates($dpStart->format('Y-m-d'), $_POST["dpEnd"], $_POST["affiliate"]);

        $tempAll2 = getTransactionsByAffiliates($dpStart->format('Y-m-d'), $_POST["dpEnd"], $_POST["affiliate"]);

        foreach ($temp as &$aff) {
            foreach ($tempAll as $affAll) {
                if ($aff['aff_id'] == $affAll['aff_id'])
                    $aff['cum_not_called'] = $affAll['customers'] - $affAll['called'];

            }
            $aff['ftd_deposits_pay'] = $aff['ftd_deposits'];
            foreach ($tempAll2 as $affAll) {
                //show deposits from transactions call (:334)
                // if ($aff['aff_id'] == $affAll['aff_id'])
                //   $aff['deposits'] = $affAll['deposits'];

                if ($aff['aff_id'] == $affAll['aff_id'])
                    $aff['ftd_deposits_pay'] = $affAll['ftd_deposits'];
            }
        }

        foreach ($tempAll2 as $affAll) {
            $found = false;
            foreach ($temp as &$aff) {
                if ($aff['aff_id'] == $affAll['aff_id']) {
                    $found = true;
                }
            }
            if (!$found) {
                $newaff['aff_id'] = (isset($affAll['aff_id'])) ? $affAll['aff_id'] : 0;
                $newaff['deposits'] = (isset($affAll['deposits'])) ? $affAll['deposits'] : 0;
                $newaff['ftd_deposits'] = (isset($affAll['ftd_deposits'])) ? $affAll['ftd_deposits'] : 0;
                $newaff['ftd_deposits_pay'] = (isset($affAll['ftd_deposits'])) ? $affAll['ftd_deposits'] : 0;
                $newaff['amount'] = (isset($affAll['amount'])) ? $affAll['amount'] : 0;
                $newaff['self_amount'] = (isset($affAll['self_amount'])) ? $affAll['self_amount'] : 0;
                $newaff['ftd_amount'] = (isset($affAll['ftd_amount'])) ? $affAll['ftd_amount'] : 0;
                $newaff['conversion_rate'] = (isset($affAll['conversion_rate'])) ? $affAll['conversion_rate'] : '0.00';
                $newaff['self_deposits'] = (isset($affAll['self_deposits'])) ? $affAll['self_deposits'] : 0;
                $newaff['leads'] = (isset($affAll['leads'])) ? $affAll['leads'] : 0;
                $newaff['called'] = (isset($affAll['called'])) ? $affAll['called'] : 0;
                $newaff['notcalled_cutoff'] = (isset($affAll['notcalled_cutoff'])) ? $affAll['notcalled_cutoff'] : 0;
                $newaff['called_rate'] = (isset($affAll['called_rate'])) ? $affAll['called_rate'] : 0;
                //$newaff['london'] = (isset($affAll['london'])) ? $affAll['london'] : 0;
                $newaff['customers'] = (isset($affAll['customers'])) ? $affAll['customers'] : 0;
                $newaff['aff_withdrawals'] = (isset($affAll['aff_withdrawals'])) ? $affAll['aff_withdrawals'] : '0.00';
                $newaff['cum_not_called'] = $newaff['customers'] - $newaff['called'];
                $temp[] = $newaff;
            }
        }

        echo json_encode($temp);
        exit();

    case 'getLeadsStatisticsByAffiliates':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]) || !isset($_POST["dpStart_1"]) || !isset($_POST["dpEnd_1"]) || !isset($_POST["dpStart_2"]) || !isset($_POST["dpEnd_2"]))
            die('{"error":"Missing arguments"}');

        $affiliate = $_POST["affiliate"];

        $dpStart = getDateFormatFromRequest($_POST["dpStart"]);
        $dpStart_1 = getDateFormatFromRequest($_POST["dpStart_1"]);
        $dpStart_2 = getDateFormatFromRequest($_POST["dpStart_2"]);

        $dpEnd = $_POST["dpEnd"];
        $dpEnd_1 = $_POST["dpEnd_1"];
        $dpEnd_2 = $_POST["dpEnd_2"];

        $temp = generateLeadStatisticsByAffiliatesToResponse($dpStart->format('Y-m-d'), $dpEnd, $affiliate);

        $temp1 = generateLeadStatisticsByAffiliatesToResponse($dpStart_1->format('Y-m-d'), $dpEnd_1, $affiliate);

        $temp2 = generateLeadStatisticsByAffiliatesToResponse($dpStart_2->format('Y-m-d'), $dpEnd_2, $affiliate);

        $temp = addDefaultParametersToArray($temp);

        $temp = combinationLeadStatisticsByAffiliatesToResponse($temp, $temp1, 1);

        $temp = combinationLeadStatisticsByAffiliatesToResponse($temp, $temp2, 2);


        echo json_encode($temp);
        exit();

    case 'getLeads':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getLeads($_POST["dpStart"], $_POST["dpEnd"], $_POST["affiliate"]));
        exit();

	case 'getUncalledCustomers':
		
		if(!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]))
		    die('{"error":"Missing arguments"}');
		echo json_encode(getUncalledCustomers($_POST["dpStart"], $_POST["dpEnd"], $_POST["affiliate"]));
		exit();
	
    case 'getCustomersNoAddress':
        echo json_encode(getCustomersNoAddress());
        exit();


    case 'getGraphData':
        echo json_encode(getGraphData($_SESSION['userid']));
        exit();
    case 'getRevenueGraph':
        echo json_encode(getRevenueGraph($_SESSION['userid']));
        exit();

    case 'getTrafficSources':
        echo json_encode(getTrafficSources($_SESSION['userid']));
        exit();
    case 'getRevenueBreakdown':
        echo json_encode(getRevenueBreakdown($_SESSION['userid']));
        exit();

    case 'getRmCommissions':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        writeJson(json_encode(getRmCommissions($_POST["dpStart"], $_POST["dpEnd"])));
        exit();

    case 'getFraudUsers':
        if (!isset($_POST["firstname"]) || !isset($_POST["lastname"]) || !isset($_POST["birthday"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFraudUsers($_POST["firstname"], $_POST["lastname"], $_POST["birthday"]));
        exit();

    case 'getCustomersWithDuplications':
        if (!isset($_POST["deposited"]) || !isset($_POST["affiliate"]) || !isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getCustomersWithDuplications($_POST["deposited"], $_POST["affiliate"], $_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'getAffiliateNS':
        if (!isset($_POST["affid"]) || !isset($_POST["type"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getAffiliateNS($_POST["affid"], $_POST["type"]));
        exit();

    case 'setAffiliateNS':
        if (!isset($_POST["affid"]) || !isset($_POST["intop"]) || !isset($_POST["text"]) || !isset($_POST["type"]) || !isset($_POST["payment"]) || !isset($_POST["cost"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(setAffiliateNS($_POST["affid"], $_POST["intop"], $_POST["text"], $_POST["type"], $_POST["payment"], $_POST["cost"]));
        exit();

    case 'getPrioritizedAffiliates':
        echo json_encode(getPrioritizedAffiliates());
        exit();

    case 'setAffiliateSort':
        if (!isset($_POST["array"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(setAffiliateSort($_POST["array"]));
        exit();

    case 'getPromoUsage':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(getPromoUsage($_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'getPromoCodesData':
        echo json_encode(getPromoCodesData());
        exit();

    case 'getFTDBonusesData':
        echo json_encode(getFTDBonusesData());
        exit();

    case 'deleteFTDBonus':
        echo json_encode(deleteFTDBonus($_POST));
        exit();

    case 'addNewFTDBonus':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(addNewFTDBonus($_POST));
        exit();

    case 'getBonusesUsage':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getBonusesUsage($_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'rejectFTDBonus':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(rejectFTDBonus($_POST));
        exit();

    case 'approveFTDBonus':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(approveFTDBonus($_POST));
        exit();

    case 'updateBonus':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(updateBonus($_POST));
        exit();

    case 'addNewPromo':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(addNewPromo($_POST));
        exit();

    case 'updatePromo':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(updatePromo($_POST));
        exit();

    case 'addNewAtc':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(addNewAtc($_POST));
        exit();

    case 'addNewPromoUsage':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(addNewPromoUsage($_POST));
        exit();

    case 'UpdateAtc':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(UpdateAtc($_POST));
        exit();

    case 'deleteAtc':
        echo json_encode(deleteAtc($_POST));
        exit();

    case 'getFaildDeposits':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["affiliate"]) || !isset($_POST["employee"]) || !isset($_POST["ftd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getFaildDeposits($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["affiliate"], $_POST["employee"], $_POST["ftd"]));
        exit();

    case 'getNotCalledDepositors':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        $employee = $_SESSION['userdata']['spotId'] != 0 ? $_SESSION['userdata']['spotId'] : $_POST['employee'];
        echo json_encode(getNotCalledDepositors($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $employee));
        exit();
    case 'getCustomer':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomer($customer[0]['id']));
            die();
        } else {
            echo json_encode(getCustomer(trim($_POST["customerId"])));
        }
        exit();
		
	case 'getCountryByName':
        echo json_encode(getCountryByName($_POST['name']));
        exit;

    case 'getSpotPaymentPage':
        echo json_encode(getSpotPaymentPage(['params' => $_POST]));
        exit;
        	
    case 'editLocalMobile':
        if (!isset($_POST["id"]) || !isset($_POST["mobile"])) {
            die('{"success":"2","message":"Missing arguments or string"}');
        } else {
            $pattern = "#^\+[0-9]{1,2}\s?\([0-9]{3}\)\s?[0-9]+\-[0-9]+\-[0-9]+$#";
            $mobile = $_POST["mobile"];
            $out = array();
            if (preg_match($pattern, $mobile, $out)) {
                die('{"success":"2","message":"Mobile Is Not Valid"}');
            } else {
                $data['id'] = $_POST['id'];
                $data['value'] = (trim($_POST["mobile"]));
                editMobileCustomer($data);
            }
        }
        exit();
    case 'editLocalPhone':
        if (!isset($_POST["id"]) || !isset($_POST["phone"])) {
            die('{"success":"2","message":"Missing arguments or string"}');
        } else {
            $pattern = "#^\+[0-9]{1,2}\s?\([0-9]{3}\)\s?[0-9]+\-[0-9]+\-[0-9]+$#";
            $phone = $_POST["phone"];
            $out = array();
            if (preg_match($pattern, $phone, $out)) {
                die('{"success":"2","message":"Phone Number Is Not Valid"}');
            } else {
                $data['id'] = $_POST['id'];
                $data['value'] = (trim($_POST["phone"]));
                editPhoneCustomer($data);
            }
        }
        exit();
    case 'editLocalEmail':
        if (!isset($_POST["id"]) || !isset($_POST["email"])) {
            die('{"success":"2","message":"Missing arguments"}');
        } else {
            $data['id'] = $_POST['id'];
            $data['value'] = (trim($_POST["email"]));
            if (!filter_var($data["value"], FILTER_VALIDATE_EMAIL)) {
                die('{"success":"2","message":"Invalid email address"}');

            } else {
                verificationEmailCustomer($data);
            }
        }
        exit();

    case 'editLocalSpotPlatform':
        if (!isset($_POST["id"]) || !isset($_POST["spot_platform"])) {
            die('{"error":"Missing arguments"}');
        }
        echo json_encode( editLocalSpotPlatform($_POST["id"], $_POST["spot_platform"]) );
        die;

	case 'addVinciCustomerCommunication':
		if (!isset($_POST["id"]) || !isset($_POST["lavarateId"]) || !isset($_POST["subject"]) || $_POST["subject"]=='') {
            die('{"success":"2","message":"Missing arguments"}');
        } else {
            addVinciCustomerCommunication($_POST['id'], $_POST['lavarateId'], $_POST['accountLeverateId'], trim($_POST["subject"]), trim($_POST["content"]));
        }
        exit();
    case 'addCustomerCall':
        if (!isset($_POST["id"]) || !isset($_POST["subject"]) || !isset($_POST["salestatus"]) || $_POST["subject"]=='') {
            die('{"success":"2","message":"Missing arguments"}');
        } else {
            $data['id'] = $_POST['id'];
            $data['subject'] = (trim($_POST["subject"]));
            $data['content'] = (trim($_POST["content"]));
            $data['salestatus'] = $_POST["salestatus"];
            addCustomerCall($data);
        }
        exit();

	case 'getCommunicationParameters':
		
		echo json_encode(getCommunicationParameters());
		exit();
		
	case 'addNewCommunicationForCustomer':
		
		$type = isset($_POST["type"]) ? $_POST["type"] : 4 ; 
		$direction =  isset($_POST["direction"]) ? $_POST["direction"] : 2 ; 
		$category = isset($_POST["category"]) ? $_POST["category"] : 13 ; 
		$status = isset($_POST["status"]) ? $_POST["status"] : 19 ; 
		$callStatus = isset($_POST["callStatus"]) ? $_POST["callStatus"] : false;
		
		if (!isset($_POST["customerId"]) || !isset($_POST["subject"]) || !isset($_POST["body"]) || !isset($_POST["saleStatus"]) || !isset($_POST["oldSaleStatus"]))
			die('{"error":"Missing arguments"}');
		echo json_encode(addNewCommunicationForCustomer($_POST["customerId"],$type,$direction,$category,$status,$_POST["subject"],$_POST["body"],$_POST["saleStatus"],$_POST["oldSaleStatus"],$callStatus));
		
		exit();
		
		
    case 'editCommunicationEmail' :
        if (!isset($_POST["id"]) || !isset($_POST["communicationEmail"])) {
            die('{"success":"2","message":"Missing arguments"}');
        } else {
            $data['id'] = $_POST['id'];
            $data['value'] = (trim($_POST["communicationEmail"]));
            if (!filter_var($data["value"], FILTER_VALIDATE_EMAIL)) {
                die('{"success":"2","message":"Invalid email address"}');

            } else {
                updateCommunicationEmailCustomer($data);
            }
        }
        exit;
    case 'editSpotPhone':
        if (!isset($_POST["id"]) || !isset($_POST["phone"])) {
            die('{"success":"2","message":"Missing arguments or string"}');
        } else {
            $pattern = "#^\+[0-9]{1,2}\s?\([0-9]{3}\)\s?[0-9]+\-[0-9]+\-[0-9]+$#";
            $phone = $_POST["phone"];
            $out = array();
            if (preg_match($pattern, $phone, $out)) {
                die('{"success":"2","message":"Spot Phone Number Is Not Valid"}');

            } else {
                $data['id'] = $_POST['id'];
                $data['value'] = (trim($_POST["phone"]));
                echo json_encode(editSpotPhoneCustomer($data));
            }

        }
        exit();
    case 'editSpotMobile':
        if (!isset($_POST["id"]) || !isset($_POST["mobile"])) {
            die('{"success":"2","message":"Missing arguments or string"}');
        } else {
            $pattern = "#^\+[0-9]{1,2}\s?\([0-9]{3}\)\s?[0-9]+\-[0-9]+\-[0-9]+$#";
            $mobile = $_POST["mobile"];
            $out = array();
            if (preg_match($pattern, $mobile, $out)) {
                die('{"success":"2","message":"Spot Mobile Is Not Valid"}');

            } else {
                $data['id'] = $_POST['id'];
                $data['value'] = (trim($_POST["mobile"]));
                echo json_encode(editSpotMobileCustomer($data));
            }

        }
        exit();
    case 'editSpotEmail':
        if (!isset($_POST["id"]) || !isset($_POST["email"])) {
            die('{"success":"2","message":"Missing arguments"}');
        } else {

            $data['id'] = $_POST['id'];
            $data['value'] = (trim($_POST["email"]));
            if (!filter_var($data["value"], FILTER_VALIDATE_EMAIL)) {
                die('{"success":"2","message":"Invalid email address"}');

            } else {

                echo json_encode(editSpotEmailCustomer($data));
            }
        }
        exit();
    case 'depositNewCC':
        echo json_encode(depositNewCC($_POST['user_id']));
        exit();
    case 'getCustomerRealAcountBalance':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerRealAcountBalance($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerRealAcountBalance(trim($_POST["customerId"])));
        }
        exit();

    case 'getCustomerDepositLog':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerDepositLog($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerDepositLog(trim($_POST["customerId"])));
        }
        exit();

	case 'getCustomerVinciDepositLog':
		if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerVinciDepositLog($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerVinciDepositLog(trim($_POST["customerId"])));
        }
		exit;
    case 'customerCommunications':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(customerCommunications($customerId[0]['id']));
            die();
        } else {
            echo json_encode(customerCommunications(trim($_POST["customerId"])));
        }

        exit();
	
	case 'customerCommunicationsVinci':
		if (!isset($_POST["spotId"]) || !isset($_POST["AccountLeverateId"]))
            die('{"error":"Missing arguments"}');
        
		$spotId = $_POST["spotId"];
		$accountLeverateId = $_POST["AccountLeverateId"]; 
        echo json_encode(customerCommunicationsVinci($spotId, $accountLeverateId));
		exit();
		
    case 'getCustomerCalls':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerCalls($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerCalls(trim($_POST["customerId"])));
        }

        exit();
    case 'getCustomerLoginLog':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerLoginLog($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerLoginLog(trim($_POST["customerId"])));
        }
        exit();

    case 'getPendingPositions':

        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["date"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getPendingPositions($_POST["dpStart"], $_POST["dpEnd"], $_POST["date"], $_POST["desk"], $_POST["employee"]));


        exit();


    case 'getCustomerCreditCard':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerCreditCard($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerCreditCard(trim($_POST["customerId"])));

        }

        exit();

    case 'getCustomerPositions':

        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerPositions($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerPositions(trim($_POST["customerId"])));

        }

        exit();

	case 'getUsers':
		echo json_encode(getUsers());
        exit();
	
	case 'getEditableUserColumns':
		echo json_encode(getEditableUserColumns());
		exit();
	
	case 'changeUser':
		echo json_encode(changeUser($_POST));
		exit(); 
				
    case 'getUser':

        echo json_encode(getUser());
        exit();

    case 'addNewUser':
        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(addNewUser($_POST));
        exit();
    case 'UpdateUser':

        if (!isset($_POST))
            die('{"error":"Missing arguments"}');
        echo json_encode(UpdateUser($_POST));


        exit();
    case 'deleteUser':

        echo json_encode(deleteUser($_POST['id']));

        exit();

    case 'assignCustomersToEmployee':
        if (!isset($_POST["customersIds"]) && !isset($_POST["employee"]))

            die('{"error":"Missing arguments"}');
        echo json_encode(assignCustomersToEmployee($_POST));
        exit();

    case 'getAgentPortfolio':
        if (!isset($_POST["employee"]))
            die('{"error":"Missing employee ID"}');
        echo json_encode(getAgentPortfolio($_POST));
        exit();

    case 'portfolioSummery':
        if (!isset($_POST["employee"]))
            die('{"error":"Missing employee ID"}');
        echo json_encode(portfolioSummery($_POST));
        exit();

    case 'getCampaignsById':
        if (!isset($_POST["aid"]) || !isset($_POST["cid"]) || !is_numeric($_POST["cid"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getCampaignsById($_POST["aid"], $_POST["cid"]));
        exit();
    case 'getRAFBonusesData':
        if (!isset($_POST["senderBonus"]) || !isset($_POST["FriendBonus"]) || !isset($_POST["radio"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRAFBonusesData($_POST["senderBonus"], $_POST["FriendBonus"], $_POST["radio"]));
        exit();
    case 'setRAFBonusesData':
        echo json_encode(setRAFBonusesData());
        exit();

    case 'getTransactio':
        if (!isset($_POST["aid"]) || !isset($_POST["cid"]) || !is_numeric($_POST["cid"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTransactio());
        exit();

    case 'getDefraymentData':
        echo json_encode(getDefraymentData());
        exit();

    case 'getProcessorsData':
        echo json_encode(getProcessorsData());
        exit();

    case 'getDefrayments':
        echo json_encode(getDefrayments());
        exit();

    case 'getProcessor':
        echo json_encode(getProcessor());
        exit();

    case 'UpdateDefrayment':

        if (!isset($_POST["defrayment"]) || !isset($_POST["currency"]) || !isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(UpdateDefrayment($_POST));
        exit();

    case 'UpdateProcessor':
        if (!isset($_POST["processor"]) || !isset($_POST["currency"]) || !isset($_POST["id"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(UpdateProcessor($_POST));
        exit();

    case 'getCustomerChangeLog':
        if (!isset($_POST["customerId"]) || !isset($_POST["type"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getCustomerChangeLog($_POST["customerId"], $_POST["type"]));
        exit();
    case 'getVerificationChangeLog':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getVerificationChangeLog($_POST["dpStart"], $_POST["dpEnd"]));
        exit();
    case 'getRegistrationChangeLog':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getRegistrationChangeLog($_POST["dpStart"], $_POST["dpEnd"]));
        exit();

    case 'insertUserLog';
        insertUserLog($_SESSION['userid'], $_POST);
        //insertUserLog($_SESSION['userid'], $_POST['elemName'], $_POST['elemValue'], $_POST['elemHtmlTag'], $_POST['baseURI']);
        exit();


    case 'getCustomerDeposits':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerDeposits($customer[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerDeposits(trim($_POST["customerId"])));
        }
        exit();


    case 'getCustomerBonuses':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerBonuses($customer[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerBonuses(trim($_POST["customerId"])));
        }
        exit();

    case 'getCustomerWithdrawals':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerWithdrawals($customer[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerWithdrawals(trim($_POST["customerId"])));
        }
        exit();

    case 'editSpotPhone':
        if (!isset($_POST["id"]) || !isset($_POST["phone"])) {
            die('{"success":"2","message":"Missing arguments or string"}');
        } else {
            $pattern = "#^\+[0-9]{1,2}\s?\([0-9]{3}\)\s?[0-9]+\-[0-9]+\-[0-9]+$#";
            $phone = $_POST["phone"];
            $out = array();
            if (preg_match($pattern, $phone, $out)) {
                die('{"success":"2","message":"Spot Phone Number Is Not Valid"}');

            } else {
                $data['id'] = $_POST['id'];
                $data['value'] = (trim($_POST["phone"]));
                echo json_encode(editSpotPhoneCustomer($data));
            }

        }
        exit();
    case 'editSpotEmail':
        if (!isset($_POST["id"]) || !isset($_POST["email"])) {
            die('{"success":"2","message":"Missing arguments"}');
        } else {

            $data['id'] = $_POST['id'];
            $data['value'] = (trim($_POST["email"]));
            if (!filter_var($data["value"], FILTER_VALIDATE_EMAIL)) {
                die('{"success":"2","message":"Invalid email address"}');

            } else {

                echo json_encode(editSpotEmailCustomer($data));
            }
        }
        exit();
    case 'getCustomerRealAcountBalance':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customerId = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomerRealAcountBalance($customerId[0]['id']));
            die();
        } else {
            echo json_encode(getCustomerRealAcountBalance(trim($_POST["customerId"])));
        }
        exit();

    case 'getBigDepositors':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]) || !isset($_POST["sum"]))
            die('{"error":"Missing arguments"}');

        echo json_encode(getBigDepositors($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"], $_POST["sum"]));
        exit();

    case 'isFinduserName':
        echo json_encode(isFinduserName($_POST["username"]));
        exit();

    case 'getSaleStatus':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]) || !isset($_POST["country"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]) || !isset($_POST["saleStatus"]) || !isset($_POST["type"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSaleStatus($_POST["dpStart"], $_POST["dpEnd"], $_POST["affiliate"], $_POST["country"], $_POST["desk"], $_POST["employee"], $_POST["saleStatus"], $_POST["type"]));
        exit();
    case 'getCampaigns':
        echo json_encode(getCampaigns());
        exit();
    case 'getCustomerDataTools':
        if (!isset($_POST["registrationDate"]) || !isset($_POST["lastLoginDate"]) || !isset($_POST["accountType"]) || !isset($_POST["onlineStatus"]) || !isset($_POST["campaign"]) || !isset($_POST["desk"]) ||
            !isset($_POST["employee"]) || !isset($_POST["country"]) || !isset($_POST["demo"]) || !isset($_POST["saleStatus"]) || !isset($_POST["registrationStatus"])
        )
            die('{"error":"Missing arguments"}');
        echo json_encode(getCustomerDataTools($_POST["registrationDate"], $_POST["lastLoginDate"], $_POST["accountType"], $_POST["onlineStatus"], $_POST["campaign"], $_POST["desk"], $_POST["employee"], $_POST["country"], $_POST["demo"], $_POST["saleStatus"], $_POST["registrationStatus"]));
        exit();

    case 'getTotalPayouts':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTotalPayouts($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"], $_POST["affiliate"]));
        exit();

    case 'getNewCCDeposit':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["customerId"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNewCCDeposit($_POST["dpStart"], $_POST["dpEnd"], $_POST["customerId"]));
        exit;


    case 'isFinduserName':
        echo json_encode(isFinduserName($_POST["username"]));
        exit();

    case 'getSaleStatus':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["affiliate"]) || !isset($_POST["country"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]) || !isset($_POST["saleStatus"]) || !isset($_POST["type"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getSaleStatus($_POST["dpStart"], $_POST["dpEnd"], $_POST["affiliate"], $_POST["country"], $_POST["desk"], $_POST["employee"], $_POST["saleStatus"], $_POST["type"]));
        exit();
    case 'getCampaigns':
        echo json_encode(getCampaigns());
        exit();
    case 'getCustomerDataTools':
        if (!isset($_POST["registrationDate"]) || !isset($_POST["lastLoginDate"]) || !isset($_POST["accountType"]) || !isset($_POST["onlineStatus"]) || !isset($_POST["campaign"]) || !isset($_POST["desk"]) ||
            !isset($_POST["employee"]) || !isset($_POST["country"]) || !isset($_POST["demo"]) || !isset($_POST["saleStatus"]) || !isset($_POST["registrationStatus"])
        )
            die('{"error":"Missing arguments"}');
        echo json_encode(getCustomerDataTools($_POST["registrationDate"], $_POST["lastLoginDate"], $_POST["accountType"], $_POST["onlineStatus"], $_POST["campaign"], $_POST["desk"], $_POST["employee"], $_POST["country"], $_POST["demo"], $_POST["saleStatus"], $_POST["registrationStatus"]));
        exit();
		
    case 'getCustomersData':
		$campaign = isset($_POST['campaign']) ? $_POST['campaign'] : false;
		$exclude_campaign = isset($_POST['exclude_campaign']) ? $_POST['exclude_campaign'] : false;
		$employee = isset($_POST['employee']) ? $_POST['employee'] : false;
		$countries = isset($_POST['countries']) ? $_POST['countries'] : false;
		$saleStatus = isset($_POST['saleStatus']) ? $_POST['saleStatus'] : false;
		$regStatus = isset($_POST['regStatus']) ? $_POST['regStatus'] : false;
		$regStart = isset($_POST['regStart']) ? $_POST['regStart'] : false;
		$regEnd = isset($_POST['regEnd']) ? $_POST['regEnd'] : false;
		$loginStart = isset($_POST['loginStart']) ? $_POST['loginStart'] : false;
		$loginEnd = isset($_POST['loginEnd']) ? $_POST['loginEnd'] : false;
		 
		if(!isset($_POST['accountType']) || !isset($_POST['demo']) || !isset($_POST['onlineStatus']))
		   die('{"error":"Missing arguments"}');
		echo json_encode(getCustomersData($_POST['accountType'],$campaign,$exclude_campaign,$employee,$countries,$_POST['demo'],$saleStatus,$regStatus,$regStart,$regEnd,$loginStart,$loginEnd,$_POST['onlineStatus']));
		exit(); 
		
    case 'getTotalPayouts':
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]) || !isset($_POST["desk"]) || !isset($_POST["employee"]) || !isset($_POST["affiliate"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getTotalPayouts($_POST["dpStart"], $_POST["dpEnd"], $_POST["desk"], $_POST["employee"], $_POST["affiliate"]));
        exit();

    case 'getNewCCDeposit':
        if (!isset($_POST["desk"]) || !isset($_POST["employee"]))
            die('{"error":"Missing arguments"}');
        echo json_encode(getNewCCDeposit($_POST["desk"]), $_POST["employee"]);
        exit;

    case 'getCustomer3DDeposit':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCustomer3DDeposit($customer[0]['id']));
            exit();
        } else {
            echo json_encode(getCustomer3DDeposit(trim($_POST["customerId"])));
        }
        exit;
    case 'getCCDeposit':
        if (!isset($_POST["customerId"]) || !isset($_POST["customerEmail"]))
            die('{"error":"Missing arguments"}');
        if (isset($_POST["customerEmail"]) && $_POST["customerEmail"] != '') {
            $customer = getCustomerIDByEmail(trim($_POST["customerEmail"]));
            echo json_encode(getCCDeposit($customer[0]['id']));
            die();
        } else {
            echo json_encode(getCCDeposit(trim($_POST["customerId"])));
        }
        exit;
    case 'getRecentDeposits' :
        echo json_encode(getRecentDeposits($_POST["selectWeek"]));
        exit;
    case 'getTotalDeposits' :
        echo json_encode(getTotalDeposits($_POST["selectWeek"]));
        exit;
    case 'getTotalLeads' :
        echo json_encode(getTotalLeads($_POST["selectWeek"]));
        exit;
    case 'getLeadsAndDeposits' :
        echo json_encode(getLeadsAndDeposits($_POST["options"]));
        exit;
    case 'getDepositByCountry' :
        echo json_encode(getDepositByCountry($_POST["options"]));
        exit;
    case 'getHourlyDepositsStatistics' :
        echo json_encode(getHourlyDepositsStatistics($_POST["options"]), null);
        exit;
    case 'getTraficHourlyDepositsStatistics' :
        if (!isset($_POST["dpStart"]) || !isset($_POST["dpEnd"]))
            die('{"error":"Missing arguments"}');
        $onlyFTD = ($_POST['onlyFTD'] == 'on') ? true : false;
        $dpStart = DateTime::createFromFormat('Y-m-d', $_POST["dpStart"]);
        echo json_encode(getHourlyDepositsStatistics($dpStart->format('Y-m-d'), $_POST["dpEnd"], $onlyFTD));
        exit;

    case 'getonlineCustomers' :
        echo getonlineCustomers();
        exit;

    case 'getDesk':
        echo json_encode(getDesk());
        exit;
		
    case 'getVinciDesk':
		echo json_encode(getVinciDesk());
		exit();
		 	
    case 'resetPassword':
        if(!isset($_POST['username']))
	        die('{"error":"Missing Arguments"}');
		echo json_encode(resetPassword($_POST['username']));
		exit();
		
    case 'newPasswordCustomer':
        if (!isset($_POST["customerId"]) || !isset($_POST["new-password"]) || !isset($_POST["retype-new-password"])) {
            die('{"error":"Missing arguments"}');
        } else {
            if (getCustomerByID($_POST["customerId"])) {
                echo json_encode(UpdatePasswordCustomer($_POST["customerId"], $_POST["new-password"], $_POST["retype-new-password"]));
            } else {
                die('{"msgbox":"Customer does not exist."}');
            }
        }
        exit;
    case 'getConOnlineCustomers' :
        echo json_encode(getDepartmentCustomersOnline("conversion"));
        exit;
    case 'getRetOnlineCustomers' :
        echo json_encode(getDepartmentCustomersOnline("retention"));
        exit;
	case 'addDepositVinciLog':
		$data = $_POST;
		echo json_encode(addDepositVinciLog($data));
		exit;
	case 'GetAcountData':
		$data = $_POST;
		echo json_encode(GetAcountData($data['leverateId'], $data['AccountLeverateId']));
		exit;
	case 'GetBalanceLeverate':
		$data = $_POST;
		echo json_encode(GetBalanceLeverate($data['leverateId'], $data['AccountLeverateId']));
		exit;
	case 'updateVinciCustomerBalance':
		$data = $_POST;
		if (!isset($_POST["amount"]) || !isset($_POST["tpLeverateId"]) || !isset($_POST["depositId"])) {
            die('{"error":"Missing arguments"}');
		}
		
		echo json_encode(updateVinciCustomerBalance($_POST["amount"], $_POST["tpLeverateId"], $_POST['depositId']));
		exit;
	case 'updateDepositVinciLog':
		$data = $_POST;
		
		if (!isset($_POST["depositId"]) || !isset($_POST["status"]) || !isset($_POST["message"]) || !isset($_POST["requestId"])) {
            die('{"error":"Missing arguments"}');
		}

		echo json_encode(updateDepositVinciLog($_POST["depositId"], $_POST["status"], $_POST["message"], $_POST["requestId"]));
		exit;
    case "switchCustomerToBinary":
        $data = $_POST;
        if(!isset($data['leverateId']) || empty($data['leverateId']) || !preg_match('/[0-9]{1,}/', $data['leverateId'])) {
            die('{"error":"Missing arguments"}');
        }
        echo json_encode(switchCustomerToBinary($data['leverateId']));
        exit;
	case "changeMinDepositByCampaign":
        $data = $_POST;
        if(!isset($data['campaign_id']) || !isset($data['min_deposit'])) {
            die('{"error":"Missing arguments"}');
        }
        echo json_encode(changeMinDepositByCampaign($data));
        die;
	case "dropMinDepositByCampaign":
        $data = $_POST;
        if(!isset($data['campaign_id'])) {
            die('{"error":"Missing arguments"}');
        }
        echo json_encode(dropMinDepositByCampaign($data['campaign_id']));
        die;
	
	case 'getRiskStatus':
		echo json_encode(getRiskStatus());
		die;
	
	case 'setRiskStatus':
	   	if(!isset($_POST['customerId']) || !isset($_POST['riskStatus'])) {
            die('{"error":"Missing arguments"}');
        }
		echo json_encode(setRiskStatus($_POST['customerId'],$_POST['riskStatus']));
		die;
				 	
    default:
        die('{"error":"Unknown command"}');
}

function getFirstBonus($dpStart, $dpEnd, $desk, $employee, $bonusaction, $onlyRetention)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();
	
	if ($bonusaction == 0){
		$sql = "SELECT  customerDeposits.customerId,
					CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
					country.name as countryName,
					'Deposit' as bonusAction,
					customerDeposits.amount,
					customerDeposits.currency,
					customerDeposits.confirmTime,
					b_user_desks.deskId as bonusdesk,
					CONCAT(granteduser.id,' - ',granteduser.firstName, ' ',granteduser.lastName) as grantedby,
					CONCAT(approveduser.id,' - ',approveduser.firstName, ' ',approveduser.lastName) as approvedby,
					CONCAT(users.id,' - ',users.firstName, ' ',users.lastName) as assignedto,
					customerDeposits.status
					FROM customers
					LEFT JOIN customer_deposits as customerDeposits on customerDeposits.customerId = customers.id
					LEFT JOIN users on customerDeposits.receptionEmployeeId=users.id
					LEFT JOIN users as granteduser on customerDeposits.processEmployeeId=granteduser.id
					LEFT JOIN users as approveduser on customerDeposits.confirmEmployeeId=approveduser.id
					LEFT JOIN user_desks as b_user_desks on customerDeposits.receptionEmployeeId=b_user_desks.userid
					LEFT JOIN country ON (customers.Country = country.id)
					WHERE customerDeposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
					AND paymentMethod = 'Bonus' AND customers.isDemo=0 
					and NOT EXISTS 
						(select * FROM hedgestonegroup_platform.customer_deposits where customer_deposits.confirmTime < customerDeposits.confirmTime and paymentMethod='Bonus' 
						and customerId=customerDeposits.customerId) ";

	    if (is_numeric($employee) && $employee != 0) {
	        $sql .= " AND customerDeposits.receptionEmployeeId=" . $employee;
	    }
	
	    if ($onlyRetention == true) {
	        $sql .= " AND users.department='retention'";
	    }

	    if ($desk != 0) {
	        $sql .= " AND b_user_desks.deskId = " . $desk;
	    }
	
	    $sql .= ";";
	    $customer_deposits_bonus = $TradingPlatformDB->fetchAll($sql);
	    
	    if (!$customer_deposits_bonus) {
	        return false;
	    } else {
	        return $customer_deposits_bonus;
	    }
	}else{
		$sql = "SELECT  customerWithdrawals.customerId,
					CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
			        country.name as countryName,
			        'Withdrawal' as bonusAction,
			        customerWithdrawals.amount,
					customerWithdrawals.currency,
			        customerWithdrawals.confirmTime,
			        w_user_desks.deskId as bonusdesk,
			        CONCAT(granteduser.id,' - ',granteduser.firstName, ' ',granteduser.lastName) as grantedby,
			        CONCAT(granteduser.id,' - ',granteduser.firstName, ' ',granteduser.lastName) as approvedby,
					CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as assignedto,
					customerWithdrawals.status
					FROM hedgestonegroup_platform.withdrawals as customerWithdrawals
			        LEFT JOIN customers on customerWithdrawals.customerId = customers.id
					LEFT JOIN users on customerWithdrawals.receptionEmployeeId=users.id
					LEFT JOIN users as granteduser on customerWithdrawals.processEmployeeId=granteduser.id
					LEFT JOIN user_desks as w_user_desks on customerWithdrawals.receptionEmployeeId=w_user_desks.userid
					LEFT JOIN country ON (customers.Country = country.id)
					WHERE customerWithdrawals.paymentMethod='Bonus' AND customers.isDemo=0 
					AND customerWithdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";
	
	    if (is_numeric($employee) && $employee != 0) {
	        $sql .= " AND customerWithdrawals.receptionEmployeeId=" . $employee;
	    }
		
		if ($onlyRetention == true) {
	        $sql .= " AND users.department='retention'";
	    }
	
	    if ($desk != 0) {
	        $sql .= " AND w_user_desks.deskId = " . $desk;
	    }
	
	    $sql .= ";";
	
	    $withdrawals = $TradingPlatformDB->fetchAll($sql);
	    
	    if (!$withdrawals) {
	        return false;
	    } else {
	        return $withdrawals;
	    }
	}
}

function ccBinLog($customer_data){
	require_once $_SERVER['DOCUMENT_ROOT']."/inc/logs/3d_deposit_log.php";
	$deposit3dLog = new Deposit3dLog();
	
	if(isset($customer_data['response_length'])){
		
		$error = ($customer_data['response_length']==0) ? 'has no range' : 'Has none or more the one cc number range';
		$deposit3dLog->createlBinLogEntry(
					$customer_data['user_id'],
					$customer_data['cc_number'],
					$error	
		);
		
		return false;
		
	}else{
		$deposit3dLog->createEntry(
	            $customer_data['user_id'],
	            'NS bin check',
	            $customer_data['Currency'],
	            '',
	            $customer_data['cc_number'],
	            '',
	            '',
	            '',
	            '',
	            '',
	            'Credit Card failed bin validation',
	            'bin validation'
	        );
			
			return false;
	}
}

function ccBinCheck($cc_number){
	$connection = new MySqlDriver();

	$sql = "
     		 SELECT  
     		 	case cc_bins.cc_company_code
				        when 'VI' then 'VISA'
				        when 'MC' then 'MASTER CARD'				        
				        when 'DC' then 'DINERE CLUB'				        
				    end as Card_Brand,
				    IF(cc_bins.visa_card_type!='',VISA_CARD_TYPE.card_type_description,MASTERCARD_TYPE.mastercard_type_description) as Card_Type,
				    IF(cc_bins.visa_card_type!='',cc_bins.visa_card_type,cc_bins.mastercard_type)as Card_Use_Code,   
				    cc_bins.card_length as Card_num_of_digits,
				    cc_bins.currency_iso_code as Currency,
				    blocked_cc_by_country.name as Country,
				    blocked_cc_by_country.blocked as County_blocked,
				    CARD_BRAND_DESCRIPTION.brand_description as Brand_Description
     		 FROM 
     		 	" . $GLOBALS["site_name"] ."_site.cc_bins
     		 LEFT JOIN 
     			 " . $GLOBALS["site_name"] ."_site.blocked_cc_by_country ON cc_bins.iso_country_code = blocked_cc_by_country.numcode
     		 LEFT JOIN 
     			 " . $GLOBALS["site_name"] ."_site.CARD_BRAND_DESCRIPTION ON cc_bins.brand_description_code = CARD_BRAND_DESCRIPTION.brand_description_code
     		 LEFT JOIN 
     		 	" . $GLOBALS["site_name"] ."_site.VISA_CARD_TYPE ON cc_bins.visa_card_type = VISA_CARD_TYPE.card_type
     		 LEFT JOIN 
     		 	" . $GLOBALS["site_name"] ."_site.MASTERCARD_TYPE ON cc_bins.visa_card_type = MASTERCARD_TYPE.mastercard_code
     		 WHERE 
     		 	$cc_number BETWEEN cc_bins.bottom_range AND cc_bins.top_range 
     		  
     	   ";
	$bin_data = $connection->fetchAll($sql);
    return $bin_data;	     	   
}


function ccLuhnCheck($cc_number, $customer_id)
{
	require_once $_SERVER['DOCUMENT_ROOT']."/inc/logs/3d_deposit_log.php";
	$deposit3dLog = new Deposit3dLog();
	
	$numDigits = strlen($cc_number);
	if ($numDigits < 13 || $numDigits > 19)
	{
		die('{"result":"fail","msg":"credit card has wrong digits length"}');
	}elseif (!is_numeric($cc_number)){
		die('{"result":"fail","msg":"credit card is not numeric"}');
	}
	
	$cc_Luhnresult = true;
	
	$sum = 0;
	$numDigits = strlen($cc_number)-1;
	$parity = $numDigits % 2;
		
	for ($i = $numDigits; $i >= 0; $i--) 
	{
		$digit = substr($cc_number, $i, 1);
		
		if (!$parity == ($i % 2)) 
		{
			$digit <<= 1;
		}
		
		$digit = ($digit > 9) ? ($digit - 9) : $digit;
		$sum += $digit;
	}
	
	if (0 == ($sum % 10))
	{
		$cc_Luhnresult = true;
	}else{
		$cc_Luhnresult = false;
	}

	if ($cc_Luhnresult)
	{
		$deposit3dLog->createLuhnLogEntry($customer_id, $cc_number, 'Past Luhn check');
		die('{"result":"success","msg":"credit card Passed luhn check"}');
	}else{
		$deposit3dLog->createLuhnLogEntry($customer_id, $cc_number , 'Fail Luhn check');
		die('{"result":"success","msg":"credit card Fail luhn check"}');
	}
}

function getCustomerByID($id)
{
    $db = new spotDB_TradingPlatform();
    $sql = "select * from customers where id = '{$id}'";
    $result = $db->fetchAll($sql);
    if ($result[0])
        return true;
    return false;

}

function getRealUserSpotId()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    if ($_SESSION['userdata']['spotId'] == 0)
    {
        $sql = "SELECT id FROM users WHERE users.email = '{$_SESSION['userdata']["email"]}'";
        $user_results = $TradingPlatformDB->fetchAll($sql);

        $employeeId = $user_results[0]['id'];
        if (!$employeeId)
        {
            $employeeId = 0;
        }
    }else{
        $employeeId = $_SESSION['userdata']['spotId'];
    }

    return $employeeId;
}

/*function resetPassword($email)
{
    $db = new MySqlDriver();
    $sql = "SELECT * FROM users WHERE email='{$email}'";
    $result = $db->fetchAll($sql);
    if (count($result) >= 1) {
        $result = login($result[0]['username'], $result[0]['password'], $db);
        if (isset($result['status']) && $result['status'] == true) {
            die('{"navigate":"/user/change_password?resetPassword=1"}');
        } else {
            die('{"error":"Technical Error Please Adress Tech Team"}');
        }
    } else {
        die('{"error":"Email not found please signup now!!"}');
    }
} */

function resetPassword($username)
{
    if(empty($username))       
        die('{"msg":"Invalid username."}');
    
    $username = addslashes($username);
    //$username = mysql_real_escape_string($username);
    
    $dbConnect = new MySqlDriver();
    $sql = "SELECT * FROM users WHERE username='{$username}' LIMIT 1";
    $result = $dbConnect->fetchAll($sql);
    
	if(empty($result))
	    die('{"msg":"Username does not exist."}'); 
	$user =$result[0];   
    if($user['userStatus']=='inactive')       
        die('{"msg":"The account is inactive. Please contact with HelpDesk."}');      
    if(!filter_var($user['email'], FILTER_VALIDATE_EMAIL))
        die('{"msg":"Invalid Email. Please contact with HelpDesk."}');         
    $keySecret=generateKey();
    $setSecretKey = setSecretKey($user['id'],$keySecret,$dbConnect);                      
    if(!$setSecretKey) {
           die('{"msg":"Please try again."}'); 	
    }
    require_once "inc/email/Email.php";
	                            
    $email = new Email();              
    $email->resetPassword($user,$keySecret);                

    $email_result = $email->sendEmail($user['email']);                
    if($email_result)
      die('{"msg":"Link is sent to email '.$user["email"].'."}');
    else 
      die('{"msg":"Email is not sent. Please try again."}'); 
}

function setSecretKey($userId,$keySecret,$dbConnect){      	   
        $sql = "INSERT INTO secret_keys (secret_key,userId,isActivated) VALUES ('{$keySecret}', {$userId}, 0)";
        return $dbConnect->exec($sql); 
}

function generateKey(){	  
       $chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; // Base62
       $key = '';		
       for ($i = 0; $i < 32; $i++)
       {
            $randNum = rand(0, 61);
            $key .= $chars[$randNum];
       }
       return $key; 	
}

function UpdatePasswordCustomer($customerId, $newPassword, $retypeNewPassword)
{
    $api = new SpotOption();
    $data["id"] = $customerId;
    $data["value"] = $newPassword;
    $fields = array(
        "password" => $newPassword
    );
    $result = $api->editUserById($customerId, $fields);
    if ($result["success"]) {
        insertLogForEditData($data);
        die('{"success":"The password was successfully updated !"}');
    }
    die('{"error":"Technical Error Please Adress Tech Team"}');
}


function UpdateDefrayment($post)
{
    $config = new config();
    $url = $config::DEPOSIT_SYSTEM_PATH.$config::UPDATE_PROCESSOR_URL_PART;
    $data=array(
        'brand'=>$config::BRAND_ID,
        'processor_code'=>$post['defrayment'],
        'currency'=>$post['currency'],

    );
    $results=sendCurlRequest($data,$url);
     if($results){
         die('{"success":"success"}');
     }
       else{
           die('{"error":"there was a problem updating"}');
       }
}

function UpdateProcessor($post)
{
    $connection = new MySqlDriver();
    $processor = $post['processor'];
    $currency = $post['currency'];
    $id = $post['id'];
    $sql = "
      UPDATE " . $GLOBALS["site_name"] . "_site.currencies
      SET cc_processor = '$processor', currency = '$currency'
      WHERE id =  '$id';
      ";
    $results = $connection->AffectedRows($sql);
    if ($results)
        die('{"success":"success"}');
    else
        die('{"error":"there was a problem updating"}');
}

function getDefrayments()
{
    $config = new config();

    $url = $config::DEPOSIT_SYSTEM_PATH.$config::PROCESSOR_LIST_URL;
  
    return sendCurlRequest($data=array('brand'=>$config::BRAND_ID),$url);
    

}

function getProcessor()
{
    $connection = new MySqlDriver();
    $sql = "
      SELECT * from " . $GLOBALS["site_name"] . "_site.cc_processors
      WHERE active = 1
      ";
    $results = $connection->fetchAll($sql);
    return $results;
}



function getDefraymentData()
{
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $perDefraymentUser = "SELECT per_defrayment  FROM `users` WHERE id='{$userid}'";
    $perDefrayment = $connection->fetchAll($perDefraymentUser);
    $config = new config();
    $url = $config::DEPOSIT_SYSTEM_PATH.$config::PROCESSOR_URL_PART;
    $data=array(
        'brand'=>$config::BRAND_ID,
    );
    $results=sendCurlRequest($data,$url);
    return array("results" => $results, "perDefrayment" => $perDefrayment);
}
function getProcessorsData()
{
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $perProcessor = "SELECT per_processors  FROM `users` WHERE id='{$userid}'";
    $perProcessor = $connection->fetchAll($perProcessor);
    $config = new config();
    $url = $config::DEPOSIT_SYSTEM_PATH.$config::PROCESSOR_URL_PART;
    $data=array(
        'brand'=>$config::BRAND_ID,
    );
    $results=sendCurlRequest($data,$url);

    return array("results" => $results, "perProcessor" => $perProcessor);
}
/**
 * @param array $data
 * @param string $url
 * @return array
 */
function sendCurlRequest($data=array(),$url){

    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERAGENT, 'PHP Tester');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
    curl_setopt($ch, CURLINFO_HEADER_OUT, TRUE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);

    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"
    ));

    $result = curl_exec($ch);


    curl_close($ch);

    return $result;
}
function getCampaignsById($aid, $cid)
{
    $systemDB = new MySqlDriver();
    $affSql = "SELECT * FROM aff_group_members WHERE aff_team=$aid and spot_cpn_id =$cid";
    $aff_ids = $systemDB->fetchAll($affSql);
    return $aff_ids;
}


function portfolioSummery($post)
{

    $employee = $post['employee'];
    $summery_month = $post['summery_month'];
    if ($summery_month) {
        $lastMonth = ' - INTERVAL 1 MONTH';
    }
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "
			SELECT
			COUNT(id) AS total_new_customers,

			(
			 SELECT SUM(amountUSD)
				from withdrawals
				LEFT JOIN customers ON customers.id = withdrawals.customerId
				WHERE withdrawals.paymentMethod <> 'bonus'
				AND withdrawals.status = 'approved'
				AND customers.employeeInChargeId = $employee
				AND EXTRACT(YEAR_MONTH FROM confirmTime) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)) AS total_withdrawals,

			(
			 SELECT SUM(amountUSD)
			 	FROM positions
			 	LEFT JOIN customers ON customers.id = positions.customerId
			 	WHERE status<>'canceled'
			 	AND customers.employeeInChargeId = $employee
				AND EXTRACT(YEAR_MONTH FROM lastUpdateDate) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)) AS turn_over,

			(
			 SELECT SUM(amountUSD)
				 FROM customer_deposits
				 LEFT JOIN customers ON customers.id = customer_deposits.customerId
				 WHERE paymentMethod <> ''
				 AND paymentMethod <> 'bonus'
				 AND customers.employeeInChargeId = $employee
				 AND EXTRACT(YEAR_MONTH FROM confirmTime) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)) AS total_deposits,

			(
			 SELECT SUM(amountUSD)
				FROM customer_deposits
				LEFT JOIN customers ON customers.id = customer_deposits.customerId
				WHERE paymentMethod = 'bonus'
				AND status = 'approved'
				AND customers.employeeInChargeId = $employee
				AND EXTRACT(YEAR_MONTH FROM confirmTime) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)) AS total_bonuses_added,

			(
			 SELECT SUM(amountUSD)
			 	FROM withdrawals
			 		LEFT JOIN customers ON customers.id = withdrawals.customerId
			 		WHERE paymentMethod = 'chargeBack'
			 		AND status = 'approved'
			 		AND customers.employeeInChargeId = $employee
			 		AND EXTRACT(YEAR_MONTH FROM confirmTime) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)) AS total_chargeback

			FROM customers

			WHERE employeeInChargeId = $employee
			AND EXTRACT(YEAR_MONTH FROM firstDepositDate) = EXTRACT(YEAR_MONTH FROM CURDATE() $lastMonth)
	";
    //die($sql);
    $portfolioSummery = $TradingPlatformDB->fetchAll($sql);
    return $portfolioSummery;
}


function getAgentPortfolio($post)
{
    $employee = $post['employee'];
    $fdd = $post['fdd'];
    $winnings = $post['winnings'];
    $country = $post['country'];
    $withdrawal = $post['withdrawal'];
    $lastPosition = $post['lastPosition'];
    $redeposit = $post['redeposit'];
    $totalDeposits = $post['totalDeposits'];
    $verified = $post['verified'];
    $turnoverReached = $post['turnoverReached'];
    $successRate = $post['successRate'];
    $riskStatus = isset($post['riskstatus']) ? $post['riskstatus'] : false;
 
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT portfolio.* , 
                   (SELECT CONCAT(users.id,' - ',users.firstName,' ',users.lastName) 
                    FROM customer_communications
                    LEFT JOIN users ON users.id=customer_communications.creatorId
                    WHERE customer_communications.customerId=portfolio.customerId 
                    AND customer_communications.createDate=portfolio.last_note
				    LIMIT 1
				    ) AS last_note_employee,
				   (SELECT users.department 
                    FROM customer_communications
                    LEFT JOIN users ON users.id=customer_communications.creatorId
                    WHERE customer_communications.customerId=portfolio.customerId 
                    AND customer_communications.createDate=portfolio.last_note
                    LIMIT 1
				    ) AS last_note_department  
            FROM (SELECT
				customers.id AS customerId,
	            CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
	            customers.email as email,
	            customers.currency AS currency,
	            customers.lastLoginDate AS lastLogin_date,
	            country.name AS country,
	            customers.firstDepositDate AS fdd,
	            customer_balance.pnl as winnings,
	            customer_balance.lastBalance AS last_balance,
	            customer_balance.pnl as pnl,
	            IF(IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl, 0) AS real_account_balance,
	            (SELECT COUNT(customer_deposits.amount) FROM customer_deposits WHERE customer_deposits.customerId = customers.id) AS deposits_count,
	           	(SELECT count(status) FROM positions WHERE status = 'won' AND positions.customerId = customers.id) AS win_positions_count,
	           	(SELECT count(status) FROM positions WHERE status <> 'open' AND positions.customerId = customers.id) AS non_open_positions_count,
	           	(SELECT (win_positions_count / non_open_positions_count) * 100) AS success_rate,
	           	(SELECT MAX(bonusActPoint) FROM customer_deposits WHERE customer_deposits.customerId = customers.id AND bonusActPoint<>0) AS bonus_act_point,
	            (SELECT SUM(amount) FROM customer_deposits WHERE paymentMethod <> '' AND paymentMethod <> 'bonus' AND  customerId = customers.id) AS total_deposits,
	            (SELECT MAX(createDate) FROM customer_communications WHERE customer_communications.customerId = customers.id) AS last_note,
	            (SELECT COUNT(positions.status) FROM positions WHERE status='open'AND positions.customerId = customers.id) AS open_positions,
	            ROUND((SELECT SUM(positions.amountUSD) FROM positions WHERE status<>'canceled'AND positions.customerId = customers.id), 2) AS turn_over,
	            IFNULL((SELECT rl.riskStatus
				         FROM MainCoon.customer_risk_status crs
				         LEFT JOIN MainCoon.risk_status_list rl ON rl.id = crs.riskStatusId
				         WHERE crs.spotId = customers.id
				         ORDER BY lastUpdate DESC
				         LIMIT 1
						 ),'') AS risk_status
	           FROM customers
	           LEFT JOIN country ON country.id = customers.Country
	           LEFT JOIN customer_balance ON customer_balance.customerId = customers.id
	           LEFT JOIN customer_communications ON customer_communications.customerId = customers.id
	           LEFT JOIN positions ON positions.customerId = customers.id
	           LEFT JOIN withdrawals ON withdrawals.customerId = customers.id
	           WHERE customers.employeeInChargeId = $employee
				";
	if($riskStatus)
	    $sql .= " AND (SELECT crs.riskStatusId
				         FROM MainCoon.customer_risk_status crs
				         WHERE crs.spotId = customers.id
				         ORDER BY lastUpdate DESC
				         LIMIT 1
						 ) IN (".implode(",",$riskStatus).") ";			
    if ($country != "0") {
        $sql .= " AND country.iso = '$country'";
    }
    if ($fdd == "1") {
        $sql .= " AND MONTH(customers.firstDepositDate) = MONTH(CURRENT_DATE)
						AND YEAR(customers.firstDepositDate) = YEAR(CURRENT_DATE)";
    } else if ($fdd == "0") {
        $sql .= " AND MONTH(customers.firstDepositDate) <> MONTH(CURRENT_DATE)
						AND YEAR(customers.firstDepositDate) <> YEAR(CURRENT_DATE)";
    }


    switch ($withdrawal) {
        case 'never':
            $sql .= " AND (EXISTS (SELECT status FROM withdrawals
											 WHERE  (status='canceled' OR paymentMethod='Bonus') AND customerId = customers.id) OR withdrawals.status=NULL)";
            break;
        case 'pending':
            $sql .= " AND EXISTS (SELECT status FROM withdrawals
											 WHERE  status='pending' AND paymentMethod<>'Bonus' AND customerId = customers.id)";

            break;
        case 'approved':
            $sql .= " AND EXISTS (SELECT status FROM withdrawals
											 WHERE  status='approved' AND paymentMethod<>'Bonus' AND customerId = customers.id)";
            break;
        default:

            break;
    }


    switch ($verified) {
        case 'none':
            $sql .= " AND customers.verification='none'";
            break;
        case 'partial':
            $sql .= " AND customers.verification='partial'";
            break;
        case 'full':
            $sql .= " AND customers.verification='full'";
            break;
        default:

            break;
    }

    switch ($lastPosition) {
        case '7':
            $sql .= " AND positions.opendDate >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)";
            break;
        case '7-30':
            $sql .= " AND positions.opendDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 day) AND DATE_SUB(CURDATE(), INTERVAL 7 DAY )";
            break;
        case '30-90':
            $sql .= " AND positions.opendDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 90 day) AND DATE_SUB(CURDATE(), INTERVAL 30 DAY )";
            break;
        case '90':
            $sql .= " AND positions.opendDate >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)";
            break;
        default:

            break;
    }


    ///  must be before 'having'  ///////////
    $sql .= " GROUP BY customers.id";
    $having = FALSE;
    if ($winnings == "1") {
        $having = TRUE;
        $sql .= " HAVING last_balance > total_deposits";

    } else if ($winnings == "0") {
        $having = TRUE;
        $sql .= " HAVING last_balance < total_deposits";

    }

    if ($redeposit == "1") {
        if ($having) {
            $sql .= " AND deposits_count>1";
        } else {
            $having = TRUE;
            $sql .= " HAVING deposits_count>1";
        }
    } else if ($redeposit == "0") {
        if ($having) {
            $sql .= " AND deposits_count=0";
        } else {
            $having = TRUE;
            $sql .= " HAVING deposits_count=0";
        }
    }
    if ($turnoverReached == "1") {
        if ($having) {
            $sql .= " AND turn_over > bonus_act_point";
        } else {
            $having = TRUE;
            $sql .= " HAVING turn_over > bonus_act_point";
        }
    } else if ($turnoverReached == "0") {
        if ($having) {
            $sql .= " AND turn_over < bonus_act_point";
        } else {
            $having = TRUE;
            $sql .= " HAVING turn_over < bonus_act_point";
        }
    }


    switch ($totalDeposits) {
        case '1k':
            if ($having) {
                $sql .= " AND total_deposits <= 1000";
            } else {
                $having = TRUE;
                $sql .= " HAVING total_deposits <=1000";
            }
            break;

        case '1k-5k':
            if ($having) {
                $sql .= " AND total_deposits BETWEEN 1000 AND 5000";
            } else {
                $having = TRUE;
                $sql .= " HAVING total_deposits BETWEEN 1000 AND 5000";
            }
            break;

        case '5k':
            if ($having) {
                $sql .= " AND total_deposits>5000";
            } else {
                $having = TRUE;
                $sql .= " HAVING total_deposits>5000";
            }
            break;
        default:

            break;
    }

    switch ($successRate) {
        case '30':
            if ($having) {
                $sql .= " AND success_rate < 30";
            } else {
                $having = TRUE;
                $sql .= " HAVING success_rate < 30";
            }
            break;
        case '30-40':
            if ($having) {
                $sql .= " AND success_rate BETWEEN 30 AND 40";
            } else {
                $having = TRUE;
                $sql .= " HAVING success_rate BETWEEN 30 AND 40";
            }
            break;
        case '40-50':
            if ($having) {
                $sql .= " AND success_rate BETWEEN 40 AND 50";
            } else {
                $having = TRUE;
                $sql .= " HAVING success_rate BETWEEN 40 AND 50";
            }
            break;
        case '50-60':
            if ($having) {
                $sql .= " AND success_rate BETWEEN 50 AND 60";
            } else {
                $having = TRUE;
                $sql .= " HAVING success_rate BETWEEN 50 AND 60";
            }
            break;
        case '60':
            if ($having) {
                $sql .= " AND success_rate > 60";
            } else {
                $having = TRUE;
                $sql .= " HAVING success_rate > 60";
            }
            break;
        default:

            break;
    }
    
    $sql .= ") AS portfolio";

    ////var_dump($sql);
    //die();
    $portfolio = $TradingPlatformDB->fetchAll($sql);
    return $portfolio;
}

function getCountries()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT iso , name FROM country";

    $countries = $TradingPlatformDB->fetchAll($sql);
    return $countries;

}

/*function assignCustomersToEmployee($post)
{
    $employee = $post['employee'];
    $customersIds = explode(PHP_EOL, trim($post['customersIds']));
    $TradingPlatformDB = new spotDB_TradingPlatform();


    foreach ($customersIds as $key => $value) {
        if ($value != '') {
            $value = str_replace(array("\r", "\n"), "", $value);
            $spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                'COMMAND' => 'edit',
                'employeeInChargeId' => $employee,
                'saleStatus' => 'new',
                'customerId' => $value
            ));

        }
    }
    return $spotCallBack;

} */


function assignCustomersToEmployee($post)
{
    $employee = $post['employee'];
	$url = $post['url'];
    $customersIds = explode(PHP_EOL, trim($post['customersIds']));
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $last_key = end(array_keys($customersIds));
    $customers_list = '';
	$number_customers = 0;

    foreach ($customersIds as $key => $value) {
        $value = str_replace(array("\r", "\n"), "", $value);	
        if ($value != '') {
			$customers_list .= $value.',';
			$number_customers++;
        }
    }
    if(!$customers_list) die('{"error":"Please insert at least one customer"}');
	
	$customers_list = substr($customers_list,0,-1);
	
	$sql = "SELECT id AS customerId,
	               employeeInChargeId,
	               saleStatus
	        FROM customers
	        WHERE id IN ({$customers_list})";
			
	$customers = $TradingPlatformDB->fetchAll($sql);
	
	if(!$customers) die('{"error":"Please insert valid customers"}');
	
	$return_array['invalid'] = $number_customers - sizeof($customers);
	 
	$change_fields = array("employeeInChargeId" => $employee,
	                       "saleStatus" => "new"
						   );
	$return_array['editCustomer'] = editCustomer($customers,$change_fields,$url);					   
 	return $return_array;	
}

function getPendingPositions($dpStart, $dpEnd, $date, $desk, $employee)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    // $spotOption = new SpotOption();

    // $asd = $spotOption->getPositions();
    // print_r($asd); die;

    $sql = "SELECT positions.id AS positionId,
                customers.id AS customerId,
                concat(customers.FirstName,' ', customers.LastName) AS customerName,
                assets.name AS assetName,
                positions.date AS positionDate,
                options.startDate AS positionStart,
                options.endDate AS positionEnd,
                positions.position AS positionDirection,
                positions.amountUSD AS positionAmountUSD,
                positions.rate AS positionRate,
                assets.rate AS assetRate,
                positions.amountUSD+((IF(positions.opprofit=0,75,positions.opprofit)*positions.amountUSD)/100) AS canWin,
                positions.amountUSD-((IF(positions.oploss=0,100,positions.oploss)*positions.amountUSD)/100) AS canLoose,
                Concat(users.FirstName,' ',users.LastName) AS employee,
                IF(IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl, 0) AS realAccountBalance

                #COALESCE(user_desks .deskId,1) AS desk
            FROM positions
            LEFT JOIN customers ON positions.customerId=customers.id
            LEFT JOIN options ON positions.optionId=options.id
            LEFT JOIN assets ON options.assetId=assets.id
            LEFT JOIN users ON customers.employeeinchargeid=users.id
            LEFT JOIN user_desks ON customers.employeeInChargeId = user_desks.userId
            LEFT JOIN customer_balance ON customer_balance.customerId = positions.customerId

            WHERE positions.status='open' ";

    if ($date == "Expiration Date") {
        $sql .= " AND options.endDate BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ";
    } else {
        $sql .= " AND positions.date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ";
    }

    $sql .= " AND customers.isDemo=0 ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND COALESCE(user_desks .deskId,1) = " . $desk;
    }
    $sql .= " ORDER BY positions.id DESC";
    $sql .= ";";

    // $params = array(
    //   'MODULE'    => 'AssetsHistory',
    //   'COMMAND'    => 'view'
    //   );
    // $raw_result = json_decode(hasOptionsAPI($params));
    // print_r($raw_result); die;
    // die;

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;

}


function getDirtyPnl($dpStart, $dpEnd, $desk)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT
                CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                  customers.id,
                  COALESCE(user_desks.deskId,1) as desk,
                  sum(COALESCE(turnover.amount, 0)) as turnover,

                  (SELECT
                          IFNULL(SUM(customer_deposits.amountUSD), 0)
                      FROM
                          customer_deposits
                      WHERE
                          customers.id = customer_deposits.customerId
                              AND customer_deposits.status = 'approved'
                              AND customer_deposits.paymentMethod = 'Bonus'
                              #AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                              ) AS 'totalDepositsBonuses',
                  (SELECT
                          IFNULL(SUM(withdrawals.amount), 0)
                      FROM
                          withdrawals
                      WHERE
                          customers.id = withdrawals.customerId
                              AND withdrawals.paymentMethod = 'Bonus'
                              AND withdrawals.status = 'approved') AS 'totalWithdrawalsBonuses',

                  IFNULL(winings.sum ,0) as totalWins,
                  IFNULL(losts.sum,0) as totalLosts


              from
                  customers

                  LEFT JOIN
                    user_desks ON customers.employeeInChargeId = user_desks.userId

                  LEFT JOIN
                  (SELECT
                      customerId, SUM(amountUSD) as amount, COUNT(customerId) as bets
                  FROM
                      onetouch_positions
                  WHERE
                      status != 'canceled'
                          AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId
                  UNION ALL SELECT
                      customerId, SUM(amountUSD) as amount, COUNT(customerId) as bets
                  FROM
                      positions
                  WHERE
                      status != 'canceled'
                          AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId
                  UNION ALL SELECT
                      customerId,
                          SUM(investmentUSD) as amount,
                          COUNT(customerId) as bets
                  FROM
                      ldo_positions
                  WHERE
                      status != 'canceled'
                          AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId) as turnover ON customers.id = turnover.customerId

                  LEFT JOIN
                  (SELECT IFNULL(SUM(positions.amountUSD),0) as sum,
                    customerId as customer
                    FROM positions
                      where status  = 'won'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId UNION ALL
                    SELECT IFNULL(SUM(onetouch_positions.amountUSD),0) as winSum,
                    customerId as customer
                    FROM onetouch_positions
                      where status  = 'won'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId UNION ALL
                    SELECT IFNULL(SUM(ldo_positions.investmentUSD),0) as winSum,
                    customerId as customer
                    FROM ldo_positions
                      where status  = 'won'
                      AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId ) as winings on customers.id = winings.customer

                  LEFT JOIN
                  (SELECT IFNULL(SUM(positions.amountUSD),0) as sum,
                    customerId as customer
                    FROM positions
                      where status  = 'lost'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId UNION ALL
                    SELECT IFNULL(SUM(onetouch_positions.amountUSD),0) as winSum,
                    customerId as customer
                    FROM onetouch_positions
                      where status  = 'lost'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId UNION ALL
                    SELECT IFNULL(SUM(ldo_positions.investmentUSD),0) as winSum,
                    customerId as customer
                    FROM ldo_positions
                      where status  = 'lost'
                      AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId ) as losts on customers.id = losts.customer

              where
                  customers.isDemo = 0
              group by customers.id
              having turnover > 0
              ";

    if ($desk != 0) {
        $sql .= " and desk = " . $desk;
    }

    $sql .= "order by id desc;";

    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $key => $data) {
        $results[$key]['turnover'] = number_format($results[$key]['turnover'], 2, ".", "");
        $results[$key]['dirtypnl'] = number_format(($results[$key]['totalDepositsBonuses'] + $results[$key]['totalWins']) - $results[$key]['totalLosts'], 2, ".", "");
    }


    // print_r($results); die;
    return $results;

}


function setAffiliateSort($array)
{
    $connection = new MySqlDriver();
    $fail = false;

    foreach ($array as $key => $value) {
        $sql = "UPDATE " . $GLOBALS["system"] . ".aff_flagging SET aff_order='$key' WHERE aff_id = '$value'";
        $results = $connection->fetchAll($sql);
        if (!$results) {
            $fail = true;
        }
    }

    if ($fail) {
        return "false";
        die;
    }

    return "true";
    die;
}

function getPrioritizedAffiliates()
{
    $connection = new MySqlDriver();

    $sql = "SELECT aff_id, aff_order, aff_text FROM " . $GLOBALS["system"] . ".aff_flagging WHERE intop = true ORDER BY aff_order ASC";

    $user_id = $_SESSION['userdata']['id'];
    $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
    $affiliate_users = $connection->fetchAll($affiliate_users_sql);

    if (isset($affiliate_users) && $affiliate_users) {
        $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
        $sql = "select * from ({$sql}) as t1 where t1.aff_id in ('" . $filter . "')";
    }

    $results = $connection->fetchAll($sql);
    return $results;
}

function setAffiliateNS($affid, $intop, $text, $type, $payment, $cost)
{

    $connection = new MySqlDriver();


    $sql = "INSERT INTO " . $GLOBALS["system"] . ".aff_flagging (aff_id, intop, aff_order, aff_text, aff_payment, aff_cost) VALUES ('$affid','$intop','0','$text','$payment','$cost')
              ON DUPLICATE KEY UPDATE ";

    if ($type == "text")
        $sql .= "aff_text = '$text',aff_payment = '$payment',aff_cost = '$cost';";
    elseif ($type == "intop")
        $sql .= "intop = '$intop';";

    $results = $connection->fetchAll($sql);

    return $results;

}


function getAffiliateNS($affid, $type)
{
    $connection = new MySqlDriver();

    $sql = "SELECT
              aff_text,aff_payment,aff_cost
            FROM
              aff_flagging
            WHERE
              aff_id = '$affid'";

    if ($type == "sorted") {
        $sql .= "AND topin == true";
    }

    $results = $connection->fetchAll($sql);
    return $results;
}

function getCustomersWithDuplications($deposited = 0, $affiliate, $dpStart, $dpEnd)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();
    $sql = "SELECT
              CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
              lower(CONCAT(customers.FirstName,' ', customers.LastName, ' ', customers.birthday)) as duplications,
              customers.FirstName,
              customers.LastName,
              customers.birthday,
              max(customers.regTime) lastRegistration,
              IF(customers.firstDepositDate = '0000-00-00 00:00:00','n','y') AS deposited,
              #IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) as aff_id,
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
              count(*) count,
              null nothing
            from
              " . $GLOBALS["site_name"] . "_platform.customers
              left join " . $GLOBALS["site_name"] . "_platform.customer_deposits on customer_deposits.customerId = customers.id and customer_deposits.customerId is null
              left join " . $GLOBALS["site_name"] . "_platform.sub_campaigns on sub_campaigns.id = customers.subCampaignId  and sub_campaigns.id is null
              left join " . $GLOBALS["site_name"] . "_platform.user_desks on customers.employeeInChargeId = user_desks.userId and customers.employeeInChargeId is null
            where
              customers.isDemo=0
              AND
              customers.isLead=0
              AND
              customers.email NOT LIKE '%testcase%'
              AND
              CONCAT(customers.FirstName,' ', customers.LastName) NOT LIKE 'test test'
              AND
               customers.regTime  between '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'";


    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " WHERE 1=0";
            foreach ($aff_ids as $aff_id) {
                //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $aff_id['aff_id'] . "'";
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $affiliate . "'";
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    $sql .= "
          group by
  duplications
  having count > 1";
    if ($deposited == 1)
        $sql .= " AND deposited = 'y'";
    elseif ($deposited == 2) {
        $sql .= " AND deposited = 'n'";
    }

// echo $sql; die;
    //execute
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}

function getFraudUsers($firstname, $lastname, $birthday)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT
            CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
            customers.id,
            customers.FirstName,
            customers.LastName,
            customers.birthday,
            customers.regTime,
            if(total_deposits.amount is null,0,total_deposits.amount) amount

          FROM
            " . $GLOBALS["site_name"] . "_platform.customers
          left join
          (
            SELECT customers.id id2, sum(customer_deposits.amount) amount
            FROM " . $GLOBALS["site_name"] . "_platform.customers,
             " . $GLOBALS["site_name"] . "_platform.customer_deposits
            WHERE customer_deposits.paymentMethod != 'Bonus'
            AND customer_deposits.customerId = customers.id
            AND customer_deposits.status = 'approved'
            group by id2
          ) as total_deposits on total_deposits.id2 = customers.id

          WHERE
            customers.FirstName = '$firstname'
          AND
            customers.LastName = '$lastname'
          AND
            customers.birthday = '$birthday'
          ";

    //execute
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}

function getLastTradesByIP($ip)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    // $sql = "SELECT customerId, date, 'One Touch' as tradeType, amount, currency, amountUSD as usd, status
    //         FROM onetouch_positions
    //         WHERE status!='canceled'
    //         and customerId = (select customerId from customer_login_log where ip = '".$ip."' order by customer_login_log.dateLogin DESC limit 1)

    //       UNION ALL SELECT customerId, date, 'Positions' as tradeType, amount, currency, amountUSD as usd, status
    //         FROM positions
    //         WHERE status!='canceled'
    //         and customerId = (select customerId from customer_login_log where ip = '".$ip."' order by customer_login_log.dateLogin DESC limit 1)

    //       UNION ALL SELECT customerId, entryTime as date, 'LDO Positions' as tradeType, investment as amount, currency, investmentUSD as usd, status
    //         FROM ldo_positions
    //         WHERE status!='canceled'
    //         and customerId = (select customerId from customer_login_log where ip = '".$ip."' order by customer_login_log.dateLogin DESC limit 1)
    //       order by date DESC
    //       limit 100;";

    $sql = "SELECT
              CONCAT(users.firstName,' ', users.lastName) as employeeName,
              trades.customerId customerId,
              trades.date date,
              trades.tradeType tradeType,
              trades.amount amount,
              trades.currency currency,
              trades.usd usd,
              trades.status status

              FROM customers
              left join (
                SELECT customerId, date, 'One Touch' as tradeType, amount, currency, amountUSD as usd, status
                FROM onetouch_positions
                WHERE status!='canceled'
                UNION ALL
                SELECT customerId, date, 'Positions' as tradeType, amount, currency, amountUSD as usd, status
                FROM positions
                WHERE status!='canceled'
                UNION ALL
                SELECT customerId, entryTime as date, 'LDO Positions' as tradeType, investment as amount, currency, investmentUSD as usd, status
                FROM ldo_positions
                WHERE status!='canceled'
                UNION ALL
                SELECT customerId, entryTime as date, 'Forex Positions' as tradeType, investment as amount, currency, investmentUSD as usd, status
                FROM forex_positions
                WHERE status!='canceled'
              ) AS trades on trades.customerId = customers.id
              left join users on users.id = customers.employeeInChargeId
              where trades.customerId = (select customerId from customer_login_log where ip = '" . $ip . "' order by customer_login_log.dateLogin DESC limit 1)
              order by date DESC
              limit 100;";

    //execute
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}

function writeJson($content)
{

    $length = strlen($content);
    header('Content-Length: ' . $length);
    echo $content;
    exit();

}

function submitTranslation($type, $id)
{

    $cmsDB = new cmsDB();

    switch ($type) {

        case 'pages':
            $page_id = $_POST['id'];
            $lang = mysql_real_escape_string($_POST['lang']);
            $title = mysql_real_escape_string($_POST['title']);
            $subtitle = mysql_real_escape_string($_POST['subtitle']);
            $navtitle = mysql_real_escape_string($_POST['navtitle']);

            if (!is_numeric($page_id))
                die('{"error":"Error with page id"}');

            $cmsDB->exec("UPDATE page_lang SET title = '" . $title . "', subtitle = '" . $subtitle . "', nav_title = '" . $navtitle . "' WHERE lang = '" . $lang . "' AND id_page=" . $page_id);
            die('{"success":"true"}');

            break;

        case 'articles':
            $article_id = $_POST['id'];
            $lang = mysql_real_escape_string($_POST['lang']);
            $title = mysql_real_escape_string($_POST['title']);
            $subtitle = mysql_real_escape_string($_POST['subtitle']);
            $content = mysql_real_escape_string($_POST['content']);

            if (!is_numeric($article_id))
                die('{"error":"Error with article id"}');

            $cmsDB->exec("UPDATE article_lang SET title = '" . $title . "', subtitle = '" . $subtitle . "', content = '" . $content . "' WHERE lang = '" . $lang . "' AND id_article=" . $article_id);
            die('{"success":"true"}');

            break;

        case 'others':
            $other = array();
            $cc = $_POST['lang'];
            $lang_id = $_POST['id'];
            //$value = addslashes($_POST['other']);
            $value = $_POST['other'];

            $lfile = "/opt/" . $GLOBALS["site_initials"] . "/sites/" . $GLOBALS["site_name_lowercase"] . "/www/themes/" . $GLOBALS["site_name_lowercase"] . "/language/" . $cc . "/theme_lang.php";
            if (file_exists($lfile)) {
                require_once $lfile;
                $other = $lang;
            }

            $other[$lang_id] = $value;
            //$fcontent = "<?php \$lang ?\>";
            $dirname = "/opt/" . $GLOBALS["site_initials"] . "/sites/" . $GLOBALS["site_name_lowercase"] . "/www/themes/" . $GLOBALS["site_name_lowercase"] . "/language/" . $cc;
            if (!file_exists($dirname)) {
                @mkdir($dirname);
                @chmod($dirname, 0775);
            }

            file_put_contents($lfile, arrayToFile($other));
            @chmod($lfile, 0775);
            //echo $lfile;
            die('{"success":"true"}');
            break;

        default:
            die('{"error":"Unknown type"}');

    }
    return array();
}

//iliya
function getUsersPNLReportDaysAvailable()
{
    $connection = new MySqlDriver();
    $months = array(
        '1' => 'Januar',
        '2' => 'February',
        '3' => 'March',
        '4' => 'April',
        '5' => 'May',
        '6' => 'June',
        '7' => 'July',
        '8' => 'August',
        '9' => 'September',
        '10' => 'October',
        '11' => 'November',
        '12' => 'December'
    );
    $days = '';

    //$today = date('d',(time()));

    $sql = "SELECT
          date_created
          FROM pnl_report_daily
          group by date_created";

    $query = $connection->fetchAll($sql);

    $days['days'] = count($query);

    $sql = "SELECT
          date_created month
          FROM pnl_report_monthly
          group by date_created";

    $query = $connection->fetchAll($sql);

    foreach ($query as $key => $value) {
        //$query[$key] = $months[$value['month']];

        $ts2 = strtotime(date('Y-m-d'));
        $ts1 = strtotime($value['month']);

        $seconds_diff = $ts2 - $ts1;

        $query[$key]['days'] = ceil($seconds_diff / 60 / 60 / 24);
        $query[$key]['asd'] = $months[$value['month']];
        //$query[$key] = date('Y-m-d',(time()-($query[$key] * 24 * 60 * 60)));
    }


    $days['months'] = array_reverse($query);

    return $days;

}

//Nimrod
function getUsersPNLReport($range, $desk, $convertUSD)
{
    //echo $dpStart . " - " . $dpEnd;

    // $currentMonth = date('m',(time()));
    // $startMonth = date('m',(time()-($days * 24 * 60 * 60)));

    $rArr = split("-", $range);


    if (count($rArr) == 2) {
        if (intval(date('m')) == intval($rArr[0])) {
            $monthly = false;
            $dpEnd = date('Y-m-d', (time()));
            $dpStart = date('Y-m-d', (time() - ((intval(date('d')) - 1) * 24 * 60 * 60)));
        } else {
            $monthly = true;
            $dpStart = new DateTime();
            $dpStart->setDate($rArr[1], $rArr[0], 1);
        }


    } else {
        $monthly = false;
        $dpEnd = date('Y-m-d', (time()));
        $dpStart = date('Y-m-d', (time() - ($range * 24 * 60 * 60)));
    }

    // $dpEnd = date('Y-m-d',(time()));
    // $dpStart = date('Y-m-d',(time()-($days * 24 * 60 * 60)));


    //calc days range from today

    $connection = new MySqlDriver();

    $days = ceil((strtotime(date('Y-m-d')) - strtotime($dpStart)) / 60 / 60 / 24);

    //echo $days;
    //exit();


    if ($monthly) {

        if (!$convertUSD) {
            $sql = "SELECT
                customerId,
                customerName,
                currency,
                sum(real_pnl) as real_pnl,
                sum(real_ab) as real_ab,
                sum(target_turnover) as target_turnover,
                sum(actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
                FROM (SELECT " . $GLOBALS["site_name"] . "_platform.customers.id as cID,
                  IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,1,
                  IF(" . $GLOBALS["site_name"] . "_platform.customers.campaignId = 339
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 340
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 322
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 323
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 324
                    , 1, 7)) as desk,
                  CONCAT(" . $GLOBALS["site_name"] . "_platform.customers.FirstName,' ', " . $GLOBALS["site_name"] . "_platform.customers.LastName) as customerName,
                  " . $GLOBALS["site_name"] . "_platform.customers.currency,
                  " . $GLOBALS["site_name"] . "_platform.country.name as country
                  FROM " . $GLOBALS["site_name"] . "_platform.customers
                  left join " . $GLOBALS["site_name"] . "_platform.country on " . $GLOBALS["site_name"] . "_platform.country.id = " . $GLOBALS["site_name"] . "_platform.customers.Country
                  left join " . $GLOBALS["site_name"] . "_platform.user_desks on " . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
                  WHERE " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
                  AND " . $GLOBALS["site_name"] . "_platform.customers.isLead=0
                  GROUP BY " . $GLOBALS["site_name"] . "_platform.customers.id) as customers
                  left join " . $GLOBALS["system"] . ".pnl_report_monthly on " . $GLOBALS["system"] . ".pnl_report_monthly.customerId = customers.cID
                  WHERE " . $GLOBALS["system"] . ".pnl_report_monthly.date_created = '" . $dpStart->format('Y-m-d') . "'";
        } else {
            $sql = "SELECT
                customerId,
                customerName,
                'USD' as currency,
                sum(converted_real_pnl) as real_pnl,
                sum(converted_real_ab) as real_ab,
                sum(converted_target_turnover) as target_turnover,
                sum(converted_actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
                FROM (SELECT " . $GLOBALS["site_name"] . "_platform.customers.id as cID,
                  IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,1,
                  IF(" . $GLOBALS["site_name"] . "_platform.customers.campaignId = 339
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 340
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 322
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 323
                    OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 324
                    , 1, 7)) as desk,
                  CONCAT(" . $GLOBALS["site_name"] . "_platform.customers.FirstName,' ', " . $GLOBALS["site_name"] . "_platform.customers.LastName) as customerName,
                  " . $GLOBALS["site_name"] . "_platform.customers.currency,
                  " . $GLOBALS["site_name"] . "_platform.country.name as country
                  FROM " . $GLOBALS["site_name"] . "_platform.customers
                  left join " . $GLOBALS["site_name"] . "_platform.country on " . $GLOBALS["site_name"] . "_platform.country.id = " . $GLOBALS["site_name"] . "_platform.customers.Country
                  left join " . $GLOBALS["site_name"] . "_platform.user_desks on " . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
                  WHERE " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
                  AND " . $GLOBALS["site_name"] . "_platform.customers.isLead=0
                  GROUP BY " . $GLOBALS["site_name"] . "_platform.customers.id) as customers
                  left join " . $GLOBALS["system"] . ".pnl_report_monthly on " . $GLOBALS["system"] . ".pnl_report_monthly.customerId = customers.cID
                  WHERE " . $GLOBALS["system"] . ".pnl_report_monthly.date_created = '" . $dpStart->format('Y-m-d') . "'";
        }

        //query desk if selected
        if ($desk != 0) {
            $sql .= " AND customers.desk = " . $desk;
        }

        $sql .= " GROUP BY customerId";
    } else {
        //choose converted currency or not
        if (!$convertUSD) {
            $sql = "SELECT
                customerId,
                customerName,
                currency,
                sum(real_pnl) as real_pnl,
                sum(real_ab) as real_ab,
                sum(target_turnover) as target_turnover,
                sum(actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
                FROM (SELECT " . $GLOBALS["site_name"] . "_platform.customers.id as cID,
                  IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,1,
                  IF(" . $GLOBALS["site_name"] . "_platform.customers.campaignId = 339
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 340
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 322
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 323
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 324
                    , 1, 7)) as desk,
                  CONCAT(" . $GLOBALS["site_name"] . "_platform.customers.FirstName,' ', " . $GLOBALS["site_name"] . "_platform.customers.LastName) as customerName,
                  " . $GLOBALS["site_name"] . "_platform.customers.currency,
                  " . $GLOBALS["site_name"] . "_platform.country.name as country
                  FROM " . $GLOBALS["site_name"] . "_platform.customers
                  left join " . $GLOBALS["site_name"] . "_platform.country on " . $GLOBALS["site_name"] . "_platform.country.id = " . $GLOBALS["site_name"] . "_platform.customers.Country
                  left join " . $GLOBALS["site_name"] . "_platform.user_desks on " . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
                  WHERE " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
                  AND " . $GLOBALS["site_name"] . "_platform.customers.isLead=0
                  GROUP BY " . $GLOBALS["site_name"] . "_platform.customers.id) as customers
                  left join " . $GLOBALS["system"] . ".pnl_report_daily on " . $GLOBALS["system"] . ".pnl_report_daily.customerId = customers.cID
                  WHERE " . $GLOBALS["system"] . ".pnl_report_daily.date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";
        } else {
            $sql = "SELECT
                customerId,
                customerName,
                'USD' as currency,
                sum(converted_real_pnl) as real_pnl,
                sum(converted_real_ab) as real_ab,
                sum(converted_target_turnover) as target_turnover,
                sum(converted_actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
                FROM (SELECT " . $GLOBALS["site_name"] . "_platform.customers.id as cID,
                  IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,1,
                  IF(" . $GLOBALS["site_name"] . "_platform.customers.campaignId = 339
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 340
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 322
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 323
                  OR " . $GLOBALS["site_name"] . "_platform.customers.campaignId = 324
                  , 1, 7)) as desk,
                  CONCAT(" . $GLOBALS["site_name"] . "_platform.customers.FirstName,' ', " . $GLOBALS["site_name"] . "_platform.customers.LastName) as customerName,
                  " . $GLOBALS["site_name"] . "_platform.customers.currency,
                  " . $GLOBALS["site_name"] . "_platform.country.name as country
                  FROM " . $GLOBALS["site_name"] . "_platform.customers
                  left join " . $GLOBALS["site_name"] . "_platform.country on " . $GLOBALS["site_name"] . "_platform.country.id = " . $GLOBALS["site_name"] . "_platform.customers.Country
                  left join " . $GLOBALS["site_name"] . "_platform.user_desks on " . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
                  WHERE " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
                  AND " . $GLOBALS["site_name"] . "_platform.customers.isLead=0
                  GROUP BY " . $GLOBALS["site_name"] . "_platform.customers.id) as customers
                  left join " . $GLOBALS["system"] . ".pnl_report_daily on " . $GLOBALS["system"] . ".pnl_report_daily.customerId = customers.cID
                  WHERE " . $GLOBALS["system"] . ".pnl_report_daily.date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";

        }

        //query desk if selected
        if ($desk != 0) {
            $sql .= " AND customers.desk = " . $desk;
        }

        $sql .= " GROUP BY customerId";
    }


    $results = $connection->fetchAll($sql);

    return $results;


}


//iliya
function getUsersPNLReport2($dpStart, $dpEnd, $desk, $convertUSD)
{
    //echo $dpStart . " - " . $dpEnd;

    // $currentMonth = date('m',(time()));
    // $startMonth = date('m',(time()-($days * 24 * 60 * 60)));


    // $dpEnd = date('Y-m-d',(time()));
    // $dpStart = date('Y-m-d',(time()-($days * 24 * 60 * 60)));


    //calc days range from today

    $connection = new MySqlDriver();

    $days = ceil((strtotime(date('Y-m-d')) - strtotime($dpStart)) / 60 / 60 / 24);


    if ($days > 31) {
        if (!$convertUSD) {
            $sql = "SELECT  customerId,
                customerName,
                currency,
                sum(real_pnl) as real_pnl,
                sum(real_ab) as real_ab,
                sum(target_turnover) as target_turnover,
                sum(actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
              FROM pnl_report_monthly
              WHERE date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";
        } else {
            $sql = "SELECT  customerId,
                customerName,
                'USD' as currency,
                sum(converted_real_pnl) as real_pnl,
                sum(converted_real_ab) as real_ab,
                sum(converted_target_turnover) as target_turnover,
                sum(converted_actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
              FROM pnl_report_monthly
              WHERE date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";
        }

        //query desk if selected
        if ($desk != 0) {
            $sql .= " AND desk = " . $desk;
        }

        $sql .= " GROUP BY customerId";
    } else {
        //choose converted currency or not
        if (!$convertUSD) {
            $sql = "SELECT  customerId,
                customerName,
                currency,
                sum(real_pnl) as real_pnl,
                sum(real_ab) as real_ab,
                sum(target_turnover) as target_turnover,
                sum(actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
              FROM pnl_report_daily
              WHERE date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";
        } else {
            $sql = "SELECT  customerId,
                customerName,
                'USD' as currency,
                sum(converted_real_pnl) as real_pnl,
                sum(converted_real_ab) as real_ab,
                sum(converted_target_turnover) as target_turnover,
                sum(converted_actual_volume) as actual_volume,
                country,
                sum(converted_real_pnl) as converted_real_pnl
              FROM pnl_report_daily
              WHERE date_created between '" . $dpStart . "' AND '" . $dpEnd . "'";
        }

        //query desk if selected
        if ($desk != 0) {
            $sql .= " AND desk = " . $desk;
        }

        $sql .= " GROUP BY customerId";
    }


    $query = $connection->fetchAll($sql);


    foreach ($query as $key => $data) {

        $results[$key]['customerId'] = $data['customerId'];
        $results[$key]['customerName'] = $data['customerName'];
        $results[$key]['currency'] = $data['currency'];
        $results[$key]['real_pnl'] = $data['real_pnl'];
        $results[$key]['real_ab'] = $data['real_ab'];
        $results[$key]['target_turnover'] = $data['target_turnover'];
        $results[$key]['actual_volume'] = $data['actual_volume'];
        $results[$key]['customerId'] = $data['customerId'];
        $results[$key]['country'] = $data['country'];
        $results[$key]['converted_real_pnl'] = $data['converted_real_pnl'];

    }


    if (is_null($results)) {
        $results['error'] = 'no data';
    }


    return $results;

}

//iliya
function getUsersPNLCron($day)
{

    //if "repeat" param set, inserting data purposes
    if (isset($_GET["repeat"])) {
        for ($i = 0; $i < $day; $i++) {
            getUsersPNLCronQuery($i);
        }
        die("repeat done");
    }

    getUsersPNLCronQuery($day);
}

//Nimrod
function insertUsersPNL($daily, $overwrite, $specificDay, $repeated)
{

    $time = microtime();
    $time = explode(' ', $time);
    $time = $time[1] + $time[0];
    $start = $time;

    //".$GLOBALS["system"]." database
    $connection = new MySqlDriver();

    //platform database
    $TradingPlatformDB = new spotDB_TradingPlatform();

    if ($specificDay) {
        $dpStart = $specificDay;
        $dpEnd = $specificDay;
    } elseif ($daily) {
        $dpEnd = date('Y-m-d', (time() - (1 * 24 * 60 * 60)));
        $dpStart = date('Y-m-d', (time() - (1 * 24 * 60 * 60)));
    } elseif ($repeated) {
        $dpEnd = date('Y-m-d', (time() - ($repeated * 24 * 60 * 60)));
        $dpStart = date('Y-m-d', (time() - ($repeated * 24 * 60 * 60)));
    } else {
        $dpEnd = date("Y-m-t", strtotime("last day of previous month"));
        $dpStart = date("Y-m-01", strtotime("first day of previous month"));
    }

    //delete all the entries that is older than 32 days and existing
    if ($overwrite) {

        if ($specificDay) {
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_daily WHERE date_created = '" . $specificDay . "'";
        } elseif ($repeated) {
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_daily WHERE date_created = '" . $dpEnd . "'";
        } elseif ($daily) {
            $daysToDelete = date('Y-m-d', (time() - (32 * 24 * 60 * 60)));
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_daily WHERE date_created < '" . $daysToDelete . "' OR date_created BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "'";
        } else {
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_monthly WHERE date_created BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "'";
        }

        //execute
        $result = $connection->exec($sql);
    }

    //get all that is not demo or lead
    $sql = "SELECT  customers.id as customerId
                  FROM customers
                  WHERE customers.isDemo=0
                  AND customers.isLead=0";

    //execute
    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $costumer => $values) {

        //calculate pnl
        $pnl = getUserPNLFulltest($TradingPlatformDB, $dpStart, $dpEnd, $results[$costumer]['customerId'], false, true);

        //pretty sum
        foreach ($pnl as $att => $y) {
            $results[$costumer][$att] = number_format($pnl[$att], 2, ".", "");
        }

        //add start date of calculation
        $results[$costumer]['date'] = $dpStart;

        $customerId = $results[$costumer]['customerId'];
        $pre_pnl = $results[$costumer]['pre_pnl'];
        $post_pnl = $results[$costumer]['post_pnl'];
        $real_pnl = $results[$costumer]['real_pnl'];
        $real_ab = $results[$costumer]['real_ab'];
        $target_turnover = $results[$costumer]['target_turnover'];
        $actual_volume = $results[$costumer]['actual_volume'];
        $activated_bonus = $results[$costumer]['activated_bonus'];
        $converted_pre_pnl = $results[$costumer]['converted_pre_pnl'];
        $converted_post_pnl = $results[$costumer]['converted_post_pnl'];
        $converted_real_pnl = $results[$costumer]['converted_real_pnl'];
        $converted_real_ab = $results[$costumer]['converted_real_ab'];
        $converted_target_turnover = $results[$costumer]['converted_target_turnover'];
        $converted_actual_volume = $results[$costumer]['converted_actual_volume'];
        $converted_activated_bonus = $results[$costumer]['converted_activated_bonus'];


        $sql = '';
        $sql = "INSERT INTO ";

        //if 'month' param is set, insert into the monthly table instead of the daily table
        if (($daily) || ($specificDay) || ($repeated))
            $sql .= "" . $GLOBALS["system"] . ".pnl_report_daily ";
        else
            $sql .= "" . $GLOBALS["system"] . ".pnl_report_monthly ";

        $sql .= "(customerId,pre_pnl, post_pnl, real_pnl, real_ab, target_turnover, actual_volume, activated_bonus, converted_pre_pnl, converted_post_pnl, converted_real_pnl, converted_real_ab, converted_target_turnover, converted_actual_volume, converted_activated_bonus, date_created) VALUES ";
        $sql .= "('$customerId','$pre_pnl','$post_pnl','$real_pnl','$real_ab','$target_turnover','$actual_volume','$activated_bonus','$converted_pre_pnl','$converted_post_pnl','$converted_real_pnl','$converted_real_ab','$converted_target_turnover','$converted_actual_volume','$converted_activated_bonus','$dpStart');";


        //execute
        $result = $connection->exec($sql);


        //unset cache
        unset($results[$costumer]);

        //check the memory usage
        //echo memory_get_usage() . "<br />" ;
    }

    $time = microtime();
    $time = explode(' ', $time);
    $time = $time[1] + $time[0];
    $finish = $time;
    $total_time = round(($finish - $start), 4);

    return array("rows" => count($results), "took" => $total_time);
}

//iliya
function getUsersPNLCronQuery($day)
{

    //".$GLOBALS["system"]." database
    $connection = new MySqlDriver();

    //platform database
    $TradingPlatformDB = new spotDB_TradingPlatform();

    //set dates
    $dpEnd = date('Y-m-d', (time() - ($day * 24 * 60 * 60)));
    $dpStart = date('Y-m-d', (time() - ($day * 24 * 60 * 60)));

    //if month calculation param set month day
    if (isset($_GET["month"])) {
        //get last month's first and last day
        $dpEnd = date("Y-m-t", strtotime("last day of previous month"));
        $dpStart = date("Y-m-01", strtotime("first day of previous month"));
    }

    //if check param set
    if (isset($_GET["check"])) {
        echo $dpStart . " - " . $dpEnd;
        die;

    }

    //delete all the entries that is older than 32 days and existing
    if (isset($_GET["delete"])) {

        if (isset($_GET["month"])) {
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_monthly WHERE date_created BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "'";
        } else {
            $daysToDelete = date('Y-m-d', (time() - (32 * 24 * 60 * 60)));
            $sql = "DELETE FROM " . $GLOBALS["system"] . ".pnl_report_daily WHERE date_created < '" . $daysToDelete . "' OR date_created BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "'";
        }

        //execute
        $result = $connection->exec($sql);

        echo "deleted";
    }

    //get all that is not demo or lead
    $sql = "SELECT  customers.id as customerId
                  FROM customers
                  WHERE customers.isDemo=0
                  AND customers.isLead=0";

    //execute
    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $costumer => $values) {

        //calculate pnl
        $pnl = getUserPNLFull($TradingPlatformDB, $dpStart, $dpEnd, $results[$costumer]['customerId'], false, true);

        //pretty sum
        foreach ($pnl as $att => $y) {
            $results[$costumer][$att] = number_format($pnl[$att], 2, ".", "");
        }

        //add desk
        //$results[$costumer]['desk'] = $values['desk'];

        //add country
        //$results[$costumer]['country'] = $values['country'];

        //add start date of calculation
        $results[$costumer]['date'] = $dpStart;

        /*
    $customerId = mysql_real_escape_string($results[$costumer]['customerId']);
    $customerName = mysql_real_escape_string($results[$costumer]['customerName']);
    $currency = mysql_real_escape_string($results[$costumer]['currency']);
    $pre_pnl = mysql_real_escape_string($results[$costumer]['pre_pnl']);
    $post_pnl = mysql_real_escape_string($results[$costumer]['post_pnl']);
    $real_pnl = mysql_real_escape_string($results[$costumer]['real_pnl']);
    $real_ab = mysql_real_escape_string($results[$costumer]['real_ab']);
    $target_turnover = mysql_real_escape_string($results[$costumer]['target_turnover']);
    $actual_volume = mysql_real_escape_string($results[$costumer]['actual_volume']);
    $activated_bonus = mysql_real_escape_string($results[$costumer]['activated_bonus']);
    $converted_pre_pnl = mysql_real_escape_string($results[$costumer]['converted_pre_pnl']);
    $converted_post_pnl = mysql_real_escape_string($results[$costumer]['converted_post_pnl']);
    $converted_real_pnl = mysql_real_escape_string($results[$costumer]['converted_real_pnl']);
    $converted_real_ab = mysql_real_escape_string($results[$costumer]['converted_real_ab']);
    $converted_target_turnover = mysql_real_escape_string($results[$costumer]['converted_target_turnover']);
    $converted_actual_volume = mysql_real_escape_string($results[$costumer]['converted_actual_volume']);
    $converted_activated_bonus = mysql_real_escape_string($results[$costumer]['converted_activated_bonus']);
    $desk = mysql_real_escape_string($values['desk']);
    $country = mysql_real_escape_string($values['country']);
    */

        $customerId = $results[$costumer]['customerId'];
        $pre_pnl = $results[$costumer]['pre_pnl'];
        $post_pnl = $results[$costumer]['post_pnl'];
        $real_pnl = $results[$costumer]['real_pnl'];
        $real_ab = $results[$costumer]['real_ab'];
        $target_turnover = $results[$costumer]['target_turnover'];
        $actual_volume = $results[$costumer]['actual_volume'];
        $activated_bonus = $results[$costumer]['activated_bonus'];
        $converted_pre_pnl = $results[$costumer]['converted_pre_pnl'];
        $converted_post_pnl = $results[$costumer]['converted_post_pnl'];
        $converted_real_pnl = $results[$costumer]['converted_real_pnl'];
        $converted_real_ab = $results[$costumer]['converted_real_ab'];
        $converted_target_turnover = $results[$costumer]['converted_target_turnover'];
        $converted_actual_volume = $results[$costumer]['converted_actual_volume'];
        $converted_activated_bonus = $results[$costumer]['converted_activated_bonus'];


        $sql = '';
        $sql = "INSERT INTO ";

        //if 'month' param is set, insert into the monthly table instead of the daily table
        if (isset($_GET["month"]))
            $sql .= "" . $GLOBALS["system"] . ".pnl_report_monthly ";
        else
            $sql .= "" . $GLOBALS["system"] . ".pnl_report_daily ";

        /*
    $sql .= "(customerId, customerName, currency,pre_pnl, post_pnl, real_pnl, real_ab, target_turnover, actual_volume, activated_bonus, converted_pre_pnl, converted_post_pnl, converted_real_pnl, converted_real_ab, converted_target_turnover, converted_actual_volume, converted_activated_bonus, date_created, desk, country) VALUES ";
    $sql .= "('$customerId','$customerName','$currency','$pre_pnl','$post_pnl','$real_pnl','$real_ab','$target_turnover','$actual_volume','$activated_bonus','$converted_pre_pnl','$converted_post_pnl','$converted_real_pnl','$converted_real_ab','$converted_target_turnover','$converted_actual_volume','$converted_activated_bonus','$dpStart','$desk','$country');";
    */

        $sql .= "(customerId,pre_pnl, post_pnl, real_pnl, real_ab, target_turnover, actual_volume, activated_bonus, converted_pre_pnl, converted_post_pnl, converted_real_pnl, converted_real_ab, converted_target_turnover, converted_actual_volume, converted_activated_bonus, date_created) VALUES ";
        $sql .= "('$customerId','$pre_pnl','$post_pnl','$real_pnl','$real_ab','$target_turnover','$actual_volume','$activated_bonus','$converted_pre_pnl','$converted_post_pnl','$converted_real_pnl','$converted_real_ab','$converted_target_turnover','$converted_actual_volume','$converted_activated_bonus','$dpStart');";


        //execute
        $result = $connection->exec($sql);


        //unset cache
        unset($results[$costumer]);

        //check the memory usage
        //echo memory_get_usage() . "<br />" ;
    }


    return $result;
}

function getUsersPNL($dpStart, $dpEnd, $desk, $convertUSD)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    if ($desk == 0) {

        $sql = "SELECT  customers.id as customerId,
                  country.name as country,
                  CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                  " . (($convertUSD) ? "'USD' as currency" : "customers.currency") . "
                  FROM customers
                  left join country on country.id = customers.Country
                  WHERE customers.isDemo=0
                  AND customers.isLead=0
                  GROUP BY customers.id;";

    } else {

        $sql = "SELECT  customers.id as customerId,
                  country.name as country,
                  CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                  " . (($convertUSD) ? "'USD' as currency" : "customers.currency") . "
                  FROM user_desks, customers
                  left join country on country.id = customers.Country
                  WHERE customers.employeeInChargeId = user_desks.userId AND user_desks.deskId = " . $desk . "
                  AND customers.isDemo=0
                  AND customers.isLead=0
                  GROUP BY customers.id;";

    }


    $results = $TradingPlatformDB->fetchAll($sql);

    foreach ($results as $key => $data) {
        $pnl = getUserPNLFull($TradingPlatformDB, $dpStart, $dpEnd, $results[$key]['customerId'], $convertUSD);
        $countryId = $results[$key]['country'];

        $results[$key]['pre_pnl'] = number_format($pnl['pre_pnl'], 2, ".", "");
        $results[$key]['post_pnl'] = number_format($pnl['post_pnl'], 2, ".", "");
        $results[$key]['real_pnl'] = number_format($pnl['real_pnl'], 2, ".", "");
        $results[$key]['real_ab'] = number_format($pnl['real_ab'], 2, ".", "");
        $results[$key]['target_turnover'] = number_format($pnl['target_turnover'], 2, ".", "");
        $results[$key]['actual_volume'] = number_format($pnl['actual_volume'], 2, ".", "");
    }


    return $results;

}

function getUserRealPNLFull($TradingPlatformDB, $dpEnd, $userid, $convertToUSD, $cron = false)
{


    if ($convertToUSD) {
        $sql = "SELECT rateUSD FROM currencies,customers WHERE customers.currency = currencies.code AND customers.id = " . $userid;
        $currencyRate = $TradingPlatformDB->fetchAll($sql)[0]['rateUSD'];
    }


    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(amount-payout) FROM positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as regular_pnl,
                ( SELECT IFNULL((SELECT SUM(amount) FROM positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as regular_volume";


    $regular = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(amount-payout) FROM onetouch_positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as onetouch_pnl,
                 ( SELECT IFNULL((SELECT SUM(amount) FROM onetouch_positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as onetouch_volume";


    $onetouch = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod != 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . "'

  ), 0)
) as deposits,
(
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod = 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . "'

  ), 0)
) as deposits_bonus";

    $customer_deposits = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod != 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . "'

  ), 0)
) as withdrawals,
(
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod = 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . "'

  ), 0)
) as withdrawals_bonus";

    $customer_withdrawals = $TradingPlatformDB->fetchAll($sql);

    $totalDeposits = $customer_deposits[0]['deposits'];
    $totalBonusDeposits = $customer_deposits[0]['deposits_bonus'];

    $customerPL = $regular[0]['regular_pnl'] + $onetouch[0]['onetouch_pnl'];
    $netDeposits = $totalDeposits - $customer_withdrawals[0]['withdrawals'];
    $netBonus = $totalBonusDeposits - $customer_withdrawals[0]['withdrawals_bonus'];

    /*

  if($customerPL > 0)
    $customerLosses = $customerPL;
  else
    $customerLosses = 0;

  $customerWinnings = $customerPL - $customerLosses;

  if ($totalBonusDeposits > 0)
    $tTurnover = ($totalDeposits + $totalBonusDeposits) * 20;
  else
    $tTurnover = $totalDeposits * 20;

  $actualVolume   = $regular[0]['regular_volume'] + $onetouch[0]['onetouch_volume'];

  if ($tTurnover < $actualVolume)
    $activatedBonus = $netBonus;
  else
    $activatedBonus = 0;

  if ($totalBonusDeposits==0) {
    if ($actualVolume > $totalDeposits)
      $activatedPL = $customerPL;
    else
      $activatedPL = $customerPL * 0.8;
  } else {
    if ($actualVolume < ($totalDeposits + $totalBonusDeposits) * 3) {
            $activatedPL = ($customerWinnings * $totalDeposits / ($totalDeposits + $totalBonusDeposits)) * 0.8 + $customerLosses;
          } else {
            if ($actualVolume > ($totalDeposits + $totalBonusDeposits) * 20)
              $activatedPL = $customerPL;
            else
              $activatedPL = ($customerWinnings * $totalDeposits / ($totalDeposits + $totalBonusDeposits)) + $customerLosses;
     }
  }

  if ($netDeposits + $activatedBonus - $activatedPL > 0)
    $realPNL = $activatedBonus - $activatedPL;
  else
    $realPNL = $netDeposits;
**/


    if ($netBonus > 0)
        $posBonuesW = $netBonus;
    else
        $posBonuesW = 0;

    if ($netBonus > 0) {
        if ($netDeposits > 0) {
            $tTurnover = ($netDeposits + $netBonus) * 20;
        } else {
            $tTurnover = $netBonus * 40;

        }
    } else {
        $tTurnover = 0;
    }

    $actualVolume = $regular[0]['regular_volume'] + $onetouch[0]['onetouch_volume'];

    if ($tTurnover < $actualVolume)
        $activatedBonus = $posBonuesW;
    else
        $activatedBonus = 0;

    //$realAB = $netDeposits - $customerPL + $activatedBonus;

    if ($netDeposits > 0) {
        $realAB = $netDeposits + $activatedBonus - $customerPL;
        if ($realAB < 0)
            $realAB = 0;
    } else {
        $realAB = 0;
    }


    $realPNL = $netDeposits - $realAB;


    //   SPOTOPTION REAL PNL
    /*
  if ($netBonus > 0)
    $posBonuesW = $netBonus;
  else
    $posBonuesW = 0;

  if ($netBonus <= 0)
    $tTurnover = 0;
  elseif ($netDeposits <= 0)
    $tTurnover = $netBonus * 40;
  else $tTurnover = ($netBonus + $netDeposits)*20;

  $actualVolume   = $regular[0]['regular_volume'] + $onetouch[0]['onetouch_volume'];

  if ($tTurnover <= $actualVolume)
    $activatedBonus = $posBonuesW;
  else
    $activatedBonus = 0;

    $realAB = $netDeposits - $customerPL + $activatedBonus;


    if($customer_deposits[0]['deposits'] > 0)
    {
      if ($realAB < 0) {
        $realAB = 0;
        $realPNL = $netDeposits;
      } else {
        $realPNL = $netDeposits-$realAB;
      }
    }
    else {
      $realAB = 0;
      $realPNL = 0;
    }


    */

    //echo $realPNL * $currencyRate;

    //return array($regular);

    //iliya
    if ($cron == true) {

        //convert anyway if not converted
        if (!$convertToUSD) {
            $sql = "SELECT rateUSD FROM currencies,customers WHERE customers.currency = currencies.code AND customers.id = " . $userid;
            $currencyRate = $TradingPlatformDB->fetchAll($sql)[0]['rateUSD'];

        }

        //converter
        $regular_convetred['regular_pnl'] = $currencyRate * $regular[0]['regular_pnl'];
        $onetouch_convetred['onetouch_pnl'] = $currencyRate * $onetouch[0]['onetouch_pnl'];
        $regular_convetred['regular_volume'] = $currencyRate * $regular[0]['regular_volume'];
        $onetouch_convetred['onetouch_volume'] = $currencyRate * $onetouch[0]['onetouch_volume'];
        $customer_deposits_convetred['deposits'] = $currencyRate * $customer_deposits[0]['deposits'];
        $customer_withdrawals_convetred['withdrawals'] = $currencyRate * $customer_withdrawals[0]['withdrawals'];
        $customer_deposits_convetred['deposits_bonus'] = $currencyRate * $customer_deposits[0]['deposits_bonus'];
        $customer_withdrawals_convetred['withdrawals_bonus'] = $currencyRate * $customer_withdrawals[0]['withdrawals_bonus'];

        //return original & converted values
        $result = array_merge(array("real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus, "converted_real_pnl" => ($realPNL * $currencyRate), "converted_real_ab" => ($realAB * $currencyRate), "converted_target_turnover" => ($tTurnover * $currencyRate), "converted_actual_volume" => ($actualVolume * $currencyRate), "converted_activated_bonus" => ($activatedBonus * $currencyRate)), $regular, $onetouch, $customer_deposits, $customer_withdrawals, $regular_convetred, $onetouch_convetred, $customer_deposits_convetred, $customer_withdrawals_convetred);

        return ($result);

    }


    if ($convertToUSD) {
        $regular[0]['regular_pnl'] = $currencyRate * $regular[0]['regular_pnl'];
        $onetouch[0]['onetouch_pnl'] = $currencyRate * $onetouch[0]['onetouch_pnl'];
        $regular[0]['regular_volume'] = $currencyRate * $regular[0]['regular_volume'];
        $onetouch[0]['onetouch_volume'] = $currencyRate * $onetouch[0]['onetouch_volume'];
        $customer_deposits[0]['deposits'] = $currencyRate * $customer_deposits[0]['deposits'];
        $customer_withdrawals[0]['withdrawals'] = $currencyRate * $customer_withdrawals[0]['withdrawals'];
        $customer_deposits[0]['deposits_bonus'] = $currencyRate * $customer_deposits[0]['deposits_bonus'];
        $customer_withdrawals[0]['withdrawals_bonus'] = $currencyRate * $customer_withdrawals[0]['withdrawals_bonus'];
        $realPNL = $realPNL * $currencyRate;
        $realAB = $realAB * $currencyRate;
        $tTurnover = $tTurnover * $currencyRate;
        $actualVolume = $actualVolume * $currencyRate;
        $activatedBonus = $activatedBonus * $currencyRate;
    }


    return array_merge(
        array("real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus), $regular, $onetouch, $customer_deposits, $customer_withdrawals);

    //return $customer_deposits;
}

function getUserPNLFull($TradingPlatformDB, $dpStart, $dpEnd, $userid, $convertToUSD, $cron = false)
{

    //$convertToUSD = true;

    if ($cron == true) {
        $prePNL = getUserRealPNLFull($TradingPlatformDB, $dpStart . ' 00:00:00', $userid, $convertToUSD, true);
        $curPNL = getUserRealPNLFull($TradingPlatformDB, $dpEnd . ' 23:59:59', $userid, $convertToUSD, true);


        $realPNL = $curPNL['real_pnl'] - $prePNL['real_pnl'];
        $realAB = $curPNL['real_ab'];
        $tTurnover = $curPNL['target_turnover'];
        $actualVolume = $curPNL['actual_volume'] - $prePNL['actual_volume'];
        $activatedBonus = $curPNL['activated_bonus'] - $prePNL['activated_bonus'];

        $converted_realPNL = $curPNL['converted_real_pnl'] - $prePNL['converted_real_pnl'];
        $converted_realAB = $curPNL['converted_real_ab'];
        $converted_tTurnover = $curPNL['converted_target_turnover'];
        $converted_actualVolume = $curPNL['converted_actual_volume'] - $prePNL['converted_actual_volume'];
        $converted_activatedBonus = $curPNL['converted_activated_bonus'] - $prePNL['converted_activated_bonus'];

        return array("pre_pnl" => $prePNL['real_pnl'], "post_pnl" => $curPNL['real_pnl'], "real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus, "converted_pre_pnl" => $prePNL['converted_real_pnl'], "converted_post_pnl" => $curPNL['converted_real_pnl'], "converted_real_pnl" => $converted_realPNL, "converted_real_ab" => $converted_realAB, "converted_target_turnover" => $converted_tTurnover, "converted_actual_volume" => $converted_actualVolume, "converted_activated_bonus" => $converted_activatedBonus);
    }

    $prePNL = getUserRealPNLFull($TradingPlatformDB, $dpStart . ' 00:00:00', $userid, $convertToUSD);
    $curPNL = getUserRealPNLFull($TradingPlatformDB, $dpEnd . ' 23:59:59', $userid, $convertToUSD);

    $realPNL = $curPNL['real_pnl'] - $prePNL['real_pnl'];
    $realAB = $curPNL['real_ab'];
    $tTurnover = $curPNL['target_turnover'];
    $actualVolume = $curPNL['actual_volume'] - $prePNL['actual_volume'];
    $activatedBonus = $curPNL['activated_bonus'] - $prePNL['activated_bonus'];


    //print_r($prePNL);
    //print_r($curPNL);

    return array("pre_pnl" => $prePNL['real_pnl'], "post_pnl" => $curPNL['real_pnl'], "real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus);

    //return $customer_deposits;
}

function getUserPNL($TradingPlatformDB, $dpStart, $dpEnd, $userid)
{


    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(amount) FROM customer_balance_daily
                  WHERE time < '" . $dpStart . " 00:00:00'
                  AND customerId=" . $userid . "), 0)
                + IFNULL((SELECT SUM(amount) FROM customer_balance_history
                  WHERE time < '" . $dpStart . " 00:00:00'
                  AND customerId=" . $userid . "), 0)
                ) as pre_balance,

                ( SELECT IFNULL((SELECT SUM(amount) FROM customer_balance_daily
                  WHERE time < '" . $dpEnd . " 23:59:59' AND customerId=" . $userid . "), 0)
                + IFNULL((SELECT SUM(amount) FROM customer_balance_history
                  WHERE time < '" . $dpEnd . " 23:59:59' AND customerId=" . $userid . "), 0)
                ) as end_balance,

                ( SELECT IFNULL((SELECT sum(amount) FROM positions,options
                  WHERE options.id=positions.optionId
                  AND positions.customerId=" . $userid . "
                  AND (positions.date between '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') AND (options.endDate > NOW() OR options.endDate > '" . $dpEnd . " 23:59:59')), 0)
                ) as end_open_positions,

                ( SELECT IFNULL((SELECT sum(amount) FROM positions,options
                  WHERE options.id=positions.optionId
                  AND positions.customerId=" . $userid . "
                  AND positions.date < '" . $dpStart . " 00:00:00' AND (options.endDate > '" . $dpStart . " 00:00:00')), 0)
                ) as pre_open_positions;";

//AND (positions.date between '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59') AND (options.endDate > NOW() OR options.endDate > '".$dpEnd." 23:59:59')), 0)
//AND positions.date < '".$dpStart." 00:00:00' AND (options.endDate > '".$dpStart." 00:00:00')), 0)

    $customer_balance = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod != 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . " 23:59:59'
  ), 0)
) as total_deposits,
(
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod = 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . " 23:59:59'
  ), 0)
) as total_deposits_bonus,
(
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod != 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpStart . " 00:00:00'
  ), 0)
) as pre_deposits,
(
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod = 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpStart . " 00:00:00'
  ), 0)
) as pre_deposits_bonus";

    $customer_deposits = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod != 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . " 23:59:59'
  ), 0)
) as total_withdrawals,
(
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod = 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . " 23:59:59'
  ), 0)
) as total_withdrawals_bonus,
(
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod != 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpStart . " 00:00:00'
  ), 0)
) as pre_withdrawals,
(
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod = 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpStart . " 00:00:00'
  ), 0)
) as pre_withdrawals_bonus";

    $customer_withdrawals = $TradingPlatformDB->fetchAll($sql);


    $pre_pnl = $customer_deposits[0]['pre_deposits'] + $customer_deposits[0]['pre_deposits_bonus'] - $customer_balance[0]['pre_balance'] - $customer_balance[0]['pre_open_positions'];
    //$pre_pnl = $customer_deposits[0]['pre_deposits'] + $customer_deposits[0]['pre_deposits_bonus'] - $customer_balance[0]['pre_balance'];
    $pre_pnl = $pre_pnl - $customer_withdrawals[0]['pre_withdrawals'] - $customer_withdrawals[0]['pre_withdrawals_bonus'];

    if ($pre_pnl > $customer_deposits[0]['pre_deposits'] - $customer_withdrawals[0]['pre_withdrawals'])
        $pre_pnl = $customer_deposits[0]['pre_deposits'] - $customer_withdrawals[0]['pre_withdrawals'];

    $pnl = $customer_deposits[0]['total_deposits'] + $customer_deposits[0]['total_deposits_bonus'] - $customer_balance[0]['end_balance'] - $customer_balance[0]['end_open_positions'];
    //$pnl = $customer_deposits[0]['total_deposits'] + $customer_deposits[0]['total_deposits_bonus'] - $customer_balance[0]['end_balance'];
    $pnl = $pnl - $customer_withdrawals[0]['total_withdrawals'] - $customer_withdrawals[0]['total_withdrawals_bonus'];

    if ($pnl > ($customer_deposits[0]['total_deposits'] - $customer_withdrawals[0]['total_withdrawals']))
        $pnl = $customer_deposits[0]['total_deposits'] - $customer_withdrawals[0]['total_withdrawals'];
    $pnl = $pnl - $pre_pnl;
    /*

   $customer_withdrawals[0]['total_withdrawals'] => 350.00
   $customer_withdrawals[0]['total_withdrawals_bonus'] => 1000.00
   $customer_withdrawals[0]['pre_withdrawals'] => 0.00
   $customer_withdrawals[0]['pre_withdrawals_bonus'] => 0.00
        )
*/
    return array("PRE_PNL" => $pre_pnl, "PNL" => $pnl, "BALANCE" => $customer_balance[0]);

    //return  array_merge(array("PRE_PNL" => $pre_pnl, "PNL" => $pnl),$customer_balance,$customer_deposits,$customer_withdrawals);

    //return $customer_deposits;
}

function getTransactions($dpStart, $dpEnd, $affiliate, $transactiondesk, $currentdesk, $transactionemployee, $currentemployee, $onlyRetention, $includeDemo)
{

    //$rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}', true);

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();


    $sql = "SELECT  customer_deposits.id,
                customer_deposits.customerId,
                IF(customer_deposits.transactionID <> '', customer_deposits.transactionID, customer_deposits.externalID) transactionID,
                customer_deposits.paymentMethod,
                customer_deposits.clearedBy,
                CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                country.name as countryName,
                customers.regTime as regTime,
                customers.saleStatus as saleStatus,
                customer_deposits.amountUSD,
                customer_deposits.confirmTime,
                customer_deposits.requestTime,
                customer_deposits.amount,
                customer_deposits.currency,
                coalesce(NULLIF(customer_deposits.description, ''), '') as processor,
                IF(customers.regTime > '" . $dpStart . " 00:00:00', 'Yes', 'No') as NewCustomer,
                IF(customer_deposits.paymentMethod='Bonus','-',IF(customers.firstDepositDate = customer_deposits.confirmTime, 'Yes', 'No')) as FTD,
                'Deposit' as ttype ,
                t_user_desks.deskId as transactiondesk,
                COALESCE(user_desks.deskId,1) as currentdesk,
                IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
                CONCAT(transaction_employee.id,' - ',transaction_employee.firstName, ' ',transaction_employee.lastName) as transactionemployee,
                CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as currentemployee,
                if(customer_deposits.customPaymentMethod <> '', customer_deposits.customPaymentMethod, (select dt.utm_tracker from hedgestonegroup_site.deposit_tracker dt where concat('SPT-', dt.deposit_id) = customer_deposits.transactionId order by dt.id desc limit 1)) utm_tracker
                FROM customers
                LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                LEFT JOIN customer_deposits on customer_deposits.customerId = customers.id
                LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
                LEFT JOIN users on customers.employeeInChargeId = users.id
                LEFT JOIN users as transaction_employee on customer_deposits.receptionEmployeeId=transaction_employee.id
                LEFT JOIN user_desks as t_user_desks on customer_deposits.receptionEmployeeId=t_user_desks.userid
                LEFT JOIN country ON (customers.Country = country.id)
                WHERE customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                AND customer_deposits.status = 'approved'";
    /*AND customers.isDemo=0
                ";*/

    if (!$includeDemo) {
        $sql .= " AND customers.isDemo=0 ";
    }

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $in_ids = array();
            foreach ($aff_ids as $aff_id) {
                $in_ids[] = $aff_id['aff_id'];
            }
            $sql .= " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) IN ('" . implode('\',\'', $in_ids) . "') ";
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($transactionemployee) && $transactionemployee != 0) {
        $sql .= " AND customer_deposits.receptionEmployeeId=" . $transactionemployee;
    }

    if (is_numeric($currentemployee) && $currentemployee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $currentemployee;
    }

    if ($onlyRetention == true) {
        $sql .= " AND users.department='retention'";
    }

    $sql .= " group by customer_deposits.id";

    if ($transactiondesk != 0) {
        $sql .= " having transactiondesk = " . $transactiondesk;
        if ($currentdesk != 0) {
            $sql .= " and currentdesk = " . $currentdesk;
        }
    } else {
        if ($currentdesk != 0) {
            $sql .= " having currentdesk = " . $currentdesk;
        }
    }


    $sql .= ";";

    $customer_deposits = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT  withdrawals.id,
              withdrawals.customerId,
              withdrawals.transactionID,
              withdrawals.paymentMethod,
              withdrawals.clearedBy,
              customers.saleStatus as saleStatus,
              CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
              country.name as countryName,
              withdrawals.amountUSD,
              withdrawals.confirmTime,
              withdrawals.requestTime,
              withdrawals.amount,
              withdrawals.currency,
              '-' as NewCustomer,
              '-' as FTD,
              '' as processor,
              '' utm_tracker,
              IF(paymentMethod='InactivityFee' OR paymentMethod='Fees', 'Fees', 'Withdrawal') as ttype,
              t_user_desks.deskId as transactiondesk,
              COALESCE(user_desks.deskId,1) as currentdesk,
            IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
              CONCAT(transaction_employee.id,' - ',transaction_employee.firstName, ' ',transaction_employee.lastName) as transactionemployee,
              CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as currentemployee
              FROM " . $GLOBALS["site_name"] . "_platform.withdrawals
              LEFT JOIN " . $GLOBALS["site_name"] . "_platform.customers on withdrawals.customerId = customers.id
              LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
              LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
              LEFT JOIN users on customers.employeeInChargeId = users.id
              LEFT JOIN users as transaction_employee on withdrawals.receptionEmployeeId=transaction_employee.id
		      LEFT JOIN user_desks as t_user_desks on withdrawals.receptionEmployeeId=t_user_desks.userid
              LEFT JOIN country ON (customers.Country = country.id)
              WHERE withdrawals.status = 'approved'
              AND withdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";

    if (!$includeDemo) {
        $sql .= " AND customers.isDemo=0 ";
    }
    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($transactionemployee) && $transactionemployee != 0) {
        $sql .= " AND withdrawals.receptionEmployeeId=" . $transactionemployee;
    }
    if (is_numeric($currentemployee) && $currentemployee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $currentemployee;
    }

    $sql .= " group by id";

    if ($transactiondesk != 0) {
        $sql .= " having transactiondesk = " . $transactiondesk;
        if ($currentdesk != 0) {
            $sql .= " and currentdesk = " . $currentdesk;
        }
    } else {
        if ($currentdesk != 0) {

            $sql .= " having currentdesk = " . $currentdesk;

        }

    }


    $sql .= ";";


    $withdrawals = $TradingPlatformDB->fetchAll($sql);

    $results = array_merge($customer_deposits, $withdrawals);
    if (!$results) {
        return false;
    } else {
        /*foreach ($results as $key => $data) {
            if ($results[$key]['amountUSD'] == 0) {
                $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
                $USDrate = $rates[$dkey][$results[$key]['currency']];
                if (isset($USDrate))
                    $results[$key]['amountUSD'] = number_format($results[$key]['amount'] * $USDrate, 2, ".", "");
            }
        }*/
        return $results;
    }

}


function getTransactionsForRetention($dpStart, $dpEnd, $desk, $employee)
{

    // $rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}',true);

    $TradingPlatformDB = new spotDB_TradingPlatform();


    $sql = "SELECT  customer_deposits.id,
                customer_deposits.customerId,
                customer_deposits.paymentMethod,
                customer_deposits.clearedBy,
                CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                country.name as countryName,
                customers.regTime as regTime,
                customers.saleStatus as saleStatus,
                customers.verification as verification,
                customer_deposits.amountUSD,
                customer_deposits.confirmTime,
                customer_deposits.requestTime,
                customer_deposits.amount,
                customer_deposits.currency,

                IF(customers.regTime > '" . $dpStart . " 00:00:00', 'Yes', 'No') as NewCustomer,
                IF(customer_deposits.paymentMethod='Bonus','-',IF(customers.firstDepositDate = customer_deposits.confirmTime, 'Yes', 'No')) as FTD,
                'Deposit' as ttype ,
                ifnull(user_desks.deskId,0) as desk,
                CONCAT(users.id,' - ',users.firstName, ' ',users.lastName) as employee
                FROM customers
                LEFT JOIN customer_deposits on customer_deposits.customerId = customers.id
                LEFT JOIN users on customer_deposits.receptionEmployeeId=users.id
                LEFT JOIN user_desks on customer_deposits.receptionEmployeeId=user_desks.userid
                LEFT JOIN country ON (customers.Country = country.id)
                WHERE customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                AND customer_deposits.status = 'approved'
                AND customers.isDemo=0
                AND customer_deposits.paymentMethod<>'Bonus'
                AND  users.department='retention'

                ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customer_deposits.receptionEmployeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND user_desks.deskId = " . $desk;
    }

    $sql .= " group by customer_deposits.id;";


    $results = $TradingPlatformDB->fetchAll($sql);


    if (!$results) {
        return false;
    } else {
        foreach ($results as $key => $data) {
            if ($results[$key]['amountUSD'] == 0) {
                $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
                $USDrate = $rates[$dkey][$results[$key]['currency']];
                if (isset($USDrate))
                    $results[$key]['amountUSD'] = number_format($results[$key]['amount'] * $USDrate, 2, ".", "");
            }
        }
        return $results;
    }

}

function getVinciTransactionsForCommission($dpStart,$dpEnd,$desk,$employee){
    $vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
	
	$sql = "SELECT deposits.Lv_monetarytransactionId AS depositId,
	               methodOfPayment.Value AS methodOfPayment,
	               transactionType.Value AS transactionType,
	               transactionStatus.Value AS transactionStatus, 
	               CONVERT(DATETIME2(0),deposits.Lv_ApprovedOn) AS ApprovedOn,
	               deposits.Lv_TransactionApproved,
	               currencies.ISOCurrencyCode AS currency,
	               ROUND(deposits.Lv_Amount*(commissionSplits.Percentage/100),2) AS amount,
	               ROUND(deposits.Lv_USDValue*(commissionSplits.Percentage/100),2) AS amountUSD,
	               commissionSplits.Percentage AS percentage,
	               'Splitted' AS split,
	               '' AS change,
	               customers.AccountId AS customerId,
                   customers.Name AS customerName,
                   owners.SystemUserId AS employeeId,
                   owners.FullName AS transactionEmployee,
	               owners.Lv_isRetentionOwner,
	               businessUnit.Name AS businessUnit,
	               deposits.Lv_FirstTimeDeposit,
	               CASE WHEN (SELECT MIN(communications.CreatedOn) AS created FROM Vincicm_MSCRM.dbo.AnnotationBase AS communications
	                          LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS communicationOwners ON communicationOwners.SystemUserId=communications.ObjectId
		                      WHERE ObjectTypeCode=1
		                            AND CAST(communications.CreatedOn AS DATE) = CAST(deposits.Lv_ApprovedOn AS DATE)
			                        AND communications.ObjectId = deposits.lv_accountid
			                        AND communications.CreatedBy = ISNULL(changeDeposits.OwnerId,deposits.lean_TransactionOwner)
		                      GROUP BY communications.ObjectId) IS NOT NULL
			            THEN 'Yes'
			            ELSE 'No'
	               END	AS note
            FROM Vincicm_MSCRM.dbo.Lv_monetarytransactionBase AS deposits
            INNER JOIN Vincicm_InventivaCRM.dbo.CommissionSplit AS commissionSplits ON commissionSplits.DepositId = deposits.Lv_monetarytransactionId  
            LEFT JOIN Vincicm_InventivaCRM.dbo.CommissionFullDeposit AS changeDeposits ON changeDeposits.DepositId = deposits.Lv_monetarytransactionId  
            LEFT JOIN Vincicm_MSCRM.dbo.AccountBase AS customers ON customers.AccountId = deposits.lv_accountid 
            LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS owners ON owners.SystemUserId = commissionSplits.OwnerId
            LEFT JOIN Vincicm_MSCRM.dbo.BusinessUnitBase AS businessUnit ON businessUnit.BusinessUnitId = owners.BusinessUnitId
            LEFT JOIN Vincicm_MSCRM.dbo.TransactionCurrencyBase AS currencies ON currencies.TransactionCurrencyId = deposits.TransactionCurrencyId
            LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS transactionType ON transactionType.ObjectTypeCode = 10022 AND transactionType.AttributeValue = deposits.Lv_Type AND transactionType.AttributeName = 'Lv_Type' 
            LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS methodOfPayment ON methodOfPayment.ObjectTypeCode = 10022 AND methodOfPayment.AttributeName = 'Lv_MethodofPayment' AND methodOfPayment.AttributeValue = deposits.Lv_MethodofPayment 
            LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS transactionStatus ON transactionStatus.ObjectTypeCode = 10022 AND transactionStatus.AttributeName = 'lxlite_MonetaryTransactionStatus' AND transactionStatus.AttributeValue = deposits.lxlite_MonetaryTransactionStatus 
            WHERE deposits.Lv_Type = 1
                  AND transactionStatus.Value = 'Approved'
	              AND owners.Lv_IsRetentionOwner = 1
	              AND deposits.Lv_MethodofPayment <> 1
	              AND deposits.Lv_ApprovedON BETWEEN CONVERT(datetime,'{$dpStart}T00:00:00.000') AND CONVERT(datetime,'{$dpEnd}T23:59:59.999')";
  if($desk)
     $sql .= " AND businessUnit.BusinessUnitId = '$desk'";
  if($employee)
     $sql .= " AND owners.SystemUserId = '$employee'";             
  $sql .= " UNION ALL
           SELECT deposits.Lv_monetarytransactionId AS depositId,
	              methodOfPayment.Value AS methodOfPayment,
	              transactionType.Value AS transactionType,
	              transactionStatus.Value AS transactionStatus, 
	              CONVERT(DATETIME2(0),deposits.Lv_ApprovedOn) AS ApprovedOn,
	              deposits.Lv_TransactionApproved,
	              currencies.ISOCurrencyCode AS currency,
	              ISNULL(ROUND(deposits.Lv_Amount*(1-commissionSplits.percentSum/100),2),deposits.Lv_Amount) AS amount,
	              ISNULL(ROUND(deposits.Lv_USDValue*(1-commissionSplits.percentSum/100),2),deposits.Lv_USDValue) AS amountUSD,
	              ISNULL(100-commissionSplits.percentSum,100) AS percentage,
	              CASE WHEN commissionSplits.percentSum IS NULL
                       THEN 'Split' 
			           ELSE 'Splitted'
	              END  AS split,
	              CASE WHEN  changeDeposits.FullDepositId IS NULL
	                   THEN 'Change'
			           ELSE 'Changed'
                  END AS change,
                  customers.AccountId AS customerId,
                  customers.Name AS customerName,
                  owners.SystemUserId AS employeeId,
                  owners.FullName AS transactionEmployee,
	              owners.Lv_isRetentionOwner,
	              businessUnit.Name AS businessUnit,
	              deposits.Lv_FirstTimeDeposit,
	              CASE WHEN (SELECT MIN(communications.CreatedOn) AS created FROM Vincicm_MSCRM.dbo.AnnotationBase AS communications
	                         LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS communicationOwners ON communicationOwners.SystemUserId=communications.ObjectId
		                     WHERE ObjectTypeCode=1
		                           AND CAST(communications.CreatedOn AS DATE) = CAST(deposits.Lv_ApprovedOn AS DATE)
			                       AND communications.ObjectId = deposits.lv_accountid
			                       AND communications.CreatedBy = ISNULL(changeDeposits.OwnerId,deposits.lean_TransactionOwner)
		                     GROUP BY communications.ObjectId) IS NOT NULL
			            THEN 'Yes'
			            ELSE 'No'
	              END	AS note

           FROM Vincicm_MSCRM.dbo.Lv_monetarytransactionBase AS deposits
           LEFT JOIN (SELECT DepositId, SUM(Percentage) AS percentSum 
                      FROM Vincicm_InventivaCRM.dbo.CommissionSplit
                      GROUP BY DepositId) AS commissionSplits ON commissionSplits.DepositId = deposits.Lv_monetarytransactionId  
           LEFT JOIN Vincicm_InventivaCRM.dbo.CommissionFullDeposit AS changeDeposits ON changeDeposits.DepositId = deposits.Lv_monetarytransactionId  
           LEFT JOIN Vincicm_MSCRM.dbo.AccountBase AS customers ON customers.AccountId = deposits.lv_accountid 
           LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS owners ON owners.SystemUserId = ISNULL(changeDeposits.OwnerId,deposits.lean_TransactionOwner)
           LEFT JOIN Vincicm_MSCRM.dbo.BusinessUnitBase AS businessUnit ON businessUnit.BusinessUnitId = owners.BusinessUnitId
           LEFT JOIN Vincicm_MSCRM.dbo.TransactionCurrencyBase AS currencies ON currencies.TransactionCurrencyId = deposits.TransactionCurrencyId
           LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS transactionType ON transactionType.ObjectTypeCode = 10022 AND transactionType.AttributeValue = deposits.Lv_Type AND transactionType.AttributeName = 'Lv_Type' 
           LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS methodOfPayment ON methodOfPayment.ObjectTypeCode = 10022 AND methodOfPayment.AttributeName = 'Lv_MethodofPayment' AND methodOfPayment.AttributeValue = deposits.Lv_MethodofPayment 
           LEFT JOIN Vincicm_MSCRM.dbo.StringMapBase AS transactionStatus ON transactionStatus.ObjectTypeCode = 10022 AND transactionStatus.AttributeName = 'lxlite_MonetaryTransactionStatus' AND transactionStatus.AttributeValue = deposits.lxlite_MonetaryTransactionStatus 
           WHERE deposits.Lv_Type = 1
                 AND transactionStatus.Value = 'Approved'
	             AND owners.Lv_IsRetentionOwner = 1
	             AND deposits.Lv_MethodofPayment <> 1
	             AND deposits.Lv_ApprovedON BETWEEN CONVERT(datetime,'{$dpStart}T00:00:00.000') AND CONVERT(datetime,'{$dpEnd}T23:59:59.999')";
	if($desk)
       $sql .= " AND businessUnit.BusinessUnitId = '$desk'";
    if($employee)
       $sql .= " AND owners.SystemUserId = '$employee'";
    
    return $vinci_rdsDB->fetchAll($sql,array('depositId','customerId'));              	
}

function getTransactionsForCommission($dpStart, $dpEnd, $desk, $employee)
{


    $DB_Connection = new DB_Connect();
    
    $real_deposit = "SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     hedgestonegroup_platform.users.id AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  hedgestonegroup_platform.users.id AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                  AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";
		               
    $sql = "SELECT  MainCoon.commission.depositId AS id,
		           hedgestonegroup_platform.customers.id AS customerId,
                   CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                   real_deposit.paymentMethod AS paymentMethod,
                   real_deposit.currency AS currency,
                   TRUNCATE(real_deposit.amount*(MainCoon.commission.percent/100),2) AS amount,
		           TRUNCATE(real_deposit.amountUSD*(MainCoon.commission.percent/100),2) AS amountUSD,
		           TRUNCATE(real_deposit.amountUSD,2) AS originalAmountUSD,
                   real_deposit.confirmTime AS confirmTime,
                   real_deposit.status AS status,
                   real_deposit.clearedBy AS clearedBy,
		           real_deposit.verification AS verification,
		           IFNULL(MainCoon.users.inventivaId,0) AS inventivaId,
		           hedgestonegroup_platform.users.id AS employeeId,
		           CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employeeName,
                   CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                   hedgestonegroup_platform.user_desks.deskId AS desk,
                   CONCAT('%',MainCoon.commission.percent) AS percentage,
		           'Splitted' split,
		           real_deposit.note AS note,
		           IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='approved'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.confirmTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL, 'Withdrawal',
							   IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='pending'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.requestTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL,'Pending','Regular')
							   ) AS withdrawal
            FROM
             ($real_deposit) AS real_deposit
        RIGHT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
		LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
		LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission.receptionEmployeeId=hedgestonegroup_platform.users.id
		LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission.receptionEmployeeId
		LEFT JOIN MainCoon.users ON MainCoon.users.real_spotId=hedgestonegroup_platform.users.id
        WHERE real_deposit.customerId IS NOT NULL";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.commission.receptionEmployeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= "
                 UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		                hedgestonegroup_platform.customers.id AS customerId,
                        CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                        real_deposit.paymentMethod AS paymentMethod,
                        real_deposit.currency AS currency,
                        TRUNCATE(real_deposit.amount*((100-commission_split.percent)/100),2) AS amount,
		                TRUNCATE(real_deposit.amountUSD*((100-commission_split.percent)/100),2) AS amountUSD,
		                TRUNCATE(real_deposit.amountUSD,2) AS originalAmountUSD,
                        real_deposit.confirmTime AS confirmTime,
                        real_deposit.status AS status,
                        real_deposit.clearedBy AS clearedBy,
		                real_deposit.verification AS verification,
		                IFNULL(MainCoon.users.inventivaId,0) AS inventivaId,
		                hedgestonegroup_platform.users.id AS employeeId,
		                CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employeeName,
                        CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                        hedgestonegroup_platform.user_desks.deskId AS desk,
                        CONCAT('%',(100-commission_split.percent)) AS percentage,
		                'Splitted' split,
		                real_deposit.note AS note,
		                IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='approved'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.confirmTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL, 'Withdrawal',
							   IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='pending'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.requestTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL,'Pending','Regular')
							   ) AS withdrawal
                FROM
                    ($real_deposit) AS real_deposit
             INNER JOIN (SELECT depositId, SUM(percent) AS percent FROM MainCoon.commission
                                GROUP BY depositId) AS commission_split
							    ON real_deposit.id=commission_split.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
             LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
             LEFT JOIN MainCoon.users ON MainCoon.users.real_spotId=hedgestonegroup_platform.users.id
		     WHERE hedgestonegroup_platform.customers.isDemo=0";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }


    $sql .= "
                UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      real_deposit.paymentMethod AS paymentMethod,
                      real_deposit.currency AS currency,
                      TRUNCATE(real_deposit.amount,2) AS amount,
		              TRUNCATE(real_deposit.amountUSD,2) AS amountUSD,
		              TRUNCATE(real_deposit.amountUSD,2) AS originalAmountUSD,
                      real_deposit.confirmTime AS confirmTime,
                      real_deposit.status AS status,
                      real_deposit.clearedBy AS clearedBy,
		              real_deposit.verification AS verification,
		              IFNULL(MainCoon.users.inventivaId,0) AS inventivaId,
		              hedgestonegroup_platform.users.id AS employeeId,
		              CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employeeName,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage,
		              'Split' split,
		              real_deposit.note AS note,
		              IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='approved'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.confirmTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL, 'Withdrawal',
							   IF((SELECT hedgestonegroup_platform.withdrawals.customerId
		                  FROM hedgestonegroup_platform.withdrawals
					      WHERE hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
					           AND hedgestonegroup_platform.withdrawals.status='pending'
					           AND DATE_FORMAT(hedgestonegroup_platform.withdrawals.requestTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')
					           AND hedgestonegroup_platform.withdrawals.customerId = hedgestonegroup_platform.customers.id
							   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL,'Pending','Regular')
							   ) AS withdrawal
             FROM
                 ($real_deposit) AS real_deposit
        LEFT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
        LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
        LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
        LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
        LEFT JOIN MainCoon.users ON MainCoon.users.real_spotId=hedgestonegroup_platform.users.id
        WHERE MainCoon.commission.depositId IS NULL";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $data = $DB_Connection->fetchAll($sql);  

    return $data;
}

function getTransactionsForConversion($dpStart, $dpEnd, $desk, $campaign)
{

    $DB_Connection = new DB_Connect();

    $sql = "SELECT transactions.*
            FROM
            (SELECT MainCoon.conversion_duplicate.depositId AS id,
                real_deposit.customerId,
                real_deposit.customerName,
                real_deposit.currency,
                real_deposit.amount,
                real_deposit.amountUSD,
                real_deposit.confirmTime,
                IF(real_deposit.firstNoteInTwoWeeks<>'0000-00-00 00:00:00' AND real_deposit.firstCallInTwoWeeks<>'0000-00-00 00:00:00',
                   LEAST(real_deposit.firstNoteInTwoWeeks,real_deposit.firstCallInTwoWeeks),
                   IF(real_deposit.firstNoteInTwoWeeks<>'0000-00-00 00:00:00',real_deposit.firstNoteInTwoWeeks,real_deposit.firstCallInTwoWeeks)) AS firstNoteInTwoWeeks,
	            hedgestonegroup_platform.users.id AS employeeId,
                CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                real_deposit.assign,
                real_deposit.isChanged,
                'Duplicated' AS type,
                real_deposit.note,
                IF((SELECT COUNT(hedgestonegroup_platform.withdrawals.id) FROM hedgestonegroup_platform.withdrawals
                           WHERE hedgestonegroup_platform.withdrawals.status='approved'
                             AND hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
                             AND hedgestonegroup_platform.withdrawals.confirmTime BETWEEN real_deposit.confirmTime AND DATE_ADD(real_deposit.confirmTime,interval 2 day)
                             AND real_deposit.customerId=hedgestonegroup_platform.withdrawals.customerId)!=0,'Withdrawal','Regular') AS withdrawal,
                hedgestonegroup_platform.campaigns.id AS campaignId,
                hedgestonegroup_platform.campaigns.name AS campaignName,
                hedgestonegroup_platform.country.name AS country,
                hedgestonegroup_platform.customers.regTime
                FROM ( SELECT change_deposit.id,
		                      change_deposit.customerId,
		                      change_deposit.customerName,
                              change_deposit.currency,
		                      IF(MainCoon.conversion_full_deposit.id IS NULL,change_deposit.amount,0) AS amount,
	                          IF(MainCoon.conversion_full_deposit.id IS NULL,change_deposit.amountUSD,0) AS amountUSD,
		                      change_deposit.confirmTime,
		                      IFNULL((SELECT MIN(hedgestonegroup_platform.customer_communications.createDate)
					          FROM hedgestonegroup_platform.customer_communications
					          WHERE hedgestonegroup_platform.customer_communications.createDate BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.customer_communications.customerId=change_deposit.customerId
							        AND hedgestonegroup_platform.customer_communications.creatorId=change_deposit.employeeId),'0000-00-00 00:00:00') AS firstNoteInTwoWeeks,
							  IFNULL((SELECT MIN(hedgestonegroup_platform.calls.date)
					          FROM hedgestonegroup_platform.calls
					          WHERE hedgestonegroup_platform.calls.date BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.calls.clientId=change_deposit.customerId
							        AND hedgestonegroup_platform.calls.employeeId=change_deposit.employeeId),'0000-00-00 00:00:00') AS firstCallInTwoWeeks,
		                      IF((SELECT MIN(hedgestonegroup_platform.customer_communications.createDate)
				              FROM hedgestonegroup_platform.customer_communications
				              WHERE hedgestonegroup_platform.customer_communications.createDate BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
						            AND hedgestonegroup_platform.customer_communications.customerId=change_deposit.customerId
						            AND hedgestonegroup_platform.customer_communications.creatorId=change_deposit.employeeId) IS NOT NULL OR
						         (SELECT MIN(hedgestonegroup_platform.calls.date)
					          FROM hedgestonegroup_platform.calls
					          WHERE hedgestonegroup_platform.calls.date BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.calls.clientId=change_deposit.customerId
							        AND hedgestonegroup_platform.calls.employeeId=change_deposit.employeeId) IS NOT NULL OR
						            change_deposit.isChanged='Changed',change_deposit.employeeId,186) AS employeeId,
	                         IF(MainCoon.conversion_full_deposit.id IS NULL,'Delete','Deleted') AS assign,
                             change_deposit.isChanged,
		                     '' AS note
                             FROM (SELECT hedgestonegroup_platform.customer_deposits.id,
				                          hedgestonegroup_platform.customers.id AS customerId,
				                          CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                                          hedgestonegroup_platform.customers.currency,
                                          hedgestonegroup_platform.customer_deposits.amount,
                                          hedgestonegroup_platform.customer_deposits.amountUSD,
                                          hedgestonegroup_platform.customer_deposits.confirmTime,
					                      IF(MainCoon.conversion_change_employee.id IS NULL,hedgestonegroup_platform.users.id,MainCoon.conversion_change_employee.employeeId) AS employeeId,
					                      IF(MainCoon.conversion_change_employee.id IS NULL,'Change','Changed') AS isChanged
                                          FROM hedgestonegroup_platform.customer_deposits
					                      LEFT JOIN MainCoon.conversion_change_employee ON MainCoon.conversion_change_employee.depositId= hedgestonegroup_platform.customer_deposits.id
                                          LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
                                          LEFT JOIN  hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
                                          WHERE hedgestonegroup_platform.customers.isDemo=0
                                                AND hedgestonegroup_platform.customer_deposits.status='approved'
						                        AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                                                AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                                                AND (hedgestonegroup_platform.users.department='Sales' OR hedgestonegroup_platform.users.id=186)) AS change_deposit
		                     LEFT JOIN MainCoon.conversion_full_deposit ON MainCoon.conversion_full_deposit.depositId=change_deposit.id
                             #HAVING firstNoteInTwoWeeks IS NOT NULL
			   ) AS real_deposit
               RIGHT JOIN MainCoon.conversion_duplicate ON MainCoon.conversion_duplicate.depositId=real_deposit.id
               LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.conversion_duplicate.employeeId
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.real_deposit.customerId
               LEFT JOIN hedgestonegroup_platform.campaigns ON hedgestonegroup_platform.campaigns.id=hedgestonegroup_platform.customers.campaignId
               LEFT JOIN hedgestonegroup_platform.country ON hedgestonegroup_platform.country.id=hedgestonegroup_platform.customers.country
               WHERE real_deposit.id IS NOT NULL";
    if($desk!=0)
        $sql .= " AND hedgestonegroup_platform.user_desks.deskId=".$desk;
    if($campaign)
        $sql .= " AND hedgestonegroup_platform.campaigns.id IN (".implode(',',$campaign).")";
    $sql .= " UNION ALL
       SELECT real_deposit.id AS id,
         real_deposit.customerId,
         real_deposit.customerName,
         real_deposit.currency,
         real_deposit.amount,
         real_deposit.amountUSD,
         real_deposit.confirmTime,
         IF(real_deposit.firstNoteInTwoWeeks<>'0000-00-00 00:00:00' AND real_deposit.firstCallInTwoWeeks<>'0000-00-00 00:00:00',
                   LEAST(real_deposit.firstNoteInTwoWeeks,real_deposit.firstCallInTwoWeeks),
                   IF(real_deposit.firstNoteInTwoWeeks<>'0000-00-00 00:00:00',real_deposit.firstNoteInTwoWeeks,real_deposit.firstCallInTwoWeeks)) AS firstNoteInTwoWeeks,
	     hedgestonegroup_platform.users.id AS employeeId,
         CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
         real_deposit.assign,
         real_deposit.isChanged,
         IF(MainCoon.conversion_duplicate.id IS NOT NULL,'Duplicated','Duplicate') AS type,
         real_deposit.note,
         IF((SELECT COUNT(hedgestonegroup_platform.withdrawals.id) FROM hedgestonegroup_platform.withdrawals
                           WHERE hedgestonegroup_platform.withdrawals.status='approved'
                             AND hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
                             AND hedgestonegroup_platform.withdrawals.confirmTime BETWEEN real_deposit.confirmTime AND DATE_ADD(real_deposit.confirmTime,interval 2 day)
                             AND real_deposit.customerId=hedgestonegroup_platform.withdrawals.customerId)!=0,'Withdrawal','Regular') AS withdrawal,
         hedgestonegroup_platform.campaigns.id AS campaignId,
         hedgestonegroup_platform.campaigns.name AS campaignName,
         hedgestonegroup_platform.country.name AS country,
         hedgestonegroup_platform.customers.regTime
         FROM (SELECT change_deposit.id,
		                      change_deposit.customerId,
		                      change_deposit.customerName,
                              change_deposit.currency,
		                      IF(MainCoon.conversion_full_deposit.id IS NULL,change_deposit.amount,0) AS amount,
	                          IF(MainCoon.conversion_full_deposit.id IS NULL,change_deposit.amountUSD,0) AS amountUSD,
		                      change_deposit.confirmTime,
		                      IFNULL((SELECT MIN(hedgestonegroup_platform.customer_communications.createDate)
					          FROM hedgestonegroup_platform.customer_communications
					          WHERE hedgestonegroup_platform.customer_communications.createDate BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.customer_communications.customerId=change_deposit.customerId
							        AND hedgestonegroup_platform.customer_communications.creatorId=change_deposit.employeeId),'0000-00-00 00:00:00') AS firstNoteInTwoWeeks,
							  IFNULL((SELECT MIN(hedgestonegroup_platform.calls.date)
					          FROM hedgestonegroup_platform.calls
					          WHERE hedgestonegroup_platform.calls.date BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.calls.clientId=change_deposit.customerId
							        AND hedgestonegroup_platform.calls.employeeId=change_deposit.employeeId),'0000-00-00 00:00:00') AS firstCallInTwoWeeks,
		                      IF((SELECT MIN(hedgestonegroup_platform.customer_communications.createDate)
				              FROM hedgestonegroup_platform.customer_communications
				              WHERE hedgestonegroup_platform.customer_communications.createDate BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
						            AND hedgestonegroup_platform.customer_communications.customerId=change_deposit.customerId
						            AND hedgestonegroup_platform.customer_communications.creatorId=change_deposit.employeeId) IS NOT NULL OR
						         (SELECT MIN(hedgestonegroup_platform.calls.date)
					          FROM hedgestonegroup_platform.calls
					          WHERE hedgestonegroup_platform.calls.date BETWEEN DATE_SUB(change_deposit.confirmTime,interval 15 day) AND change_deposit.confirmTime
							        AND hedgestonegroup_platform.calls.clientId=change_deposit.customerId
							        AND hedgestonegroup_platform.calls.employeeId=change_deposit.employeeId) IS NOT NULL OR
						            change_deposit.isChanged='Changed',change_deposit.employeeId,186) AS employeeId,
	                         IF(MainCoon.conversion_full_deposit.id IS NULL,'Delete','Deleted') AS assign,
                             change_deposit.isChanged,
		                     '' AS note
                             FROM (SELECT hedgestonegroup_platform.customer_deposits.id,
				                          hedgestonegroup_platform.customers.id AS customerId,
				                          CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                                          hedgestonegroup_platform.customers.currency,
                                          hedgestonegroup_platform.customer_deposits.amount,
                                          hedgestonegroup_platform.customer_deposits.amountUSD,
                                          hedgestonegroup_platform.customer_deposits.confirmTime,
					                      IF(MainCoon.conversion_change_employee.id IS NULL,hedgestonegroup_platform.users.id,MainCoon.conversion_change_employee.employeeId) AS employeeId,
					                      IF(MainCoon.conversion_change_employee.id IS NULL,'Change','Changed') AS isChanged
                                          FROM hedgestonegroup_platform.customer_deposits
					                      LEFT JOIN MainCoon.conversion_change_employee ON MainCoon.conversion_change_employee.depositId= hedgestonegroup_platform.customer_deposits.id
                                          LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
                                          LEFT JOIN  hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
                                          WHERE hedgestonegroup_platform.customers.isDemo=0
                                                AND hedgestonegroup_platform.customer_deposits.status='approved'
						                        AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                                                AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                                                AND (hedgestonegroup_platform.users.department='Sales' OR hedgestonegroup_platform.users.id=186)) AS change_deposit
		                     LEFT JOIN MainCoon.conversion_full_deposit ON MainCoon.conversion_full_deposit.depositId=change_deposit.id
                             #HAVING firstNoteInTwoWeeks IS NOT NULL
					 ) AS real_deposit
    LEFT JOIN MainCoon.conversion_duplicate ON MainCoon.conversion_duplicate.depositId=real_deposit.id
    LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=real_deposit.employeeId
    LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.users.id
    LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.real_deposit.customerId
    LEFT JOIN hedgestonegroup_platform.campaigns ON hedgestonegroup_platform.campaigns.id=hedgestonegroup_platform.customers.campaignId
    LEFT JOIN hedgestonegroup_platform.country ON hedgestonegroup_platform.country.id=hedgestonegroup_platform.customers.country
    WHERE hedgestonegroup_platform.customers.isDemo=0";
    if ($desk != 0)
        $sql .= " AND hedgestonegroup_platform.user_desks.deskId=" . $desk;
    if($campaign)
        $sql .= " AND hedgestonegroup_platform.campaigns.id IN (".implode(',',$campaign).")";
    $sql .= ") AS transactions
             ORDER BY transactions.confirmTime";
    
    $data = $DB_Connection->fetchAll($sql);
    
    return $data;


}

function multiBrandTransactionsForConversion($dpStart, $dpEnd, $desk, $campaign){
		
	$brands = array('OTT','HSG');
		
//	$brandConnections = array(new AsyncThread('OTT'),new AsyncThread('HSG'));
	
	foreach($brands as $brand){
		$brandConnection = new BrandConnection($brand);	
		$platform_database = $brandConnection->database('platform');
		$bi_database = $brandConnection->database('bi');
		$return[] = array($platform_database,$bi_database);
	}
	return $return;
	
}

function getFreshLeads($dpStart,$dpEnd,$desk,$employee,$campaign){

    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $adminEmployees=array(0,63,419,2825);
    $fresh_leads=array();
    $last_fresh_leads=array();
    $unique=array();
    $fkey=-1;
    $sql = "SELECT customer_change_log.id,
                        customer_change_log.customerId,
                        CONCAT(customers.firstName,' ',customers.lastName) AS customerName,
                        country.name AS country,
                        campaigns.name AS campaign,
                        CONCAT(oldEmployee.id,' - ',oldEmployee.firstName,' ',oldEmployee.lastName) AS oldEmployee,
                        CONCAT(newEmployee.id,' - ',newEmployee.firstName,' ',newEmployee.lastName) AS newEmployee,
                        newEmployee.id AS newEmployeeId,
                        user_desks.deskId AS newDesk,
                        customer_change_log.date,
                        CONCAT(DATE(customer_change_log.date),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(customer_change_log.date))-MOD(TIME_TO_SEC(TIME(customer_change_log.date)),3600)),'%H:%i')) AS hour
                FROM customer_change_log
                INNER JOIN (SELECT ccl.*
                            FROM (SELECT customer_change_log.customerId,
                                         customer_change_log.date
			                      FROM customer_change_log
			                      LEFT JOIN customers ON customers.id=customer_change_log.customerId
                                  LEFT JOIN users ON users.id=customer_change_log.newValue
                                  LEFT JOIN customer_communications ON customer_communications.customerId=customer_change_log.customerId AND customer_communications.createDate<customer_change_log.date
                                  LEFT JOIN calls ON calls.clientId=customer_change_log.customerId AND calls.lastUpdateDate<customer_change_log.date
                                  WHERE type='employeeInChargeId'
			                            AND oldValue IN (0,63,419,2825)
                                        AND customer_communications.id IS NULL AND calls.id is null";
    if($campaign)
        $sql .= " AND customers.campaignId IN (".implode(',',$campaign).")";
    $sql .= " GROUP BY customerId
                                        ORDER BY date) AS ccl
                            WHERE ccl.date between '$dpStart 00:00:00' AND '$dpEnd 23:59:59')  AS ccl  ON ccl.customerId=customer_change_log.customerId
                                                                                                          AND date(ccl.date)=date(customer_change_log.date)
               LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
               LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
               LEFT JOIN user_desks ON user_desks.userId=newEmployee.id
               LEFT JOIN customers ON customers.id=customer_change_log.customerId
               LEFT JOIN campaigns ON customers.campaignId=campaigns.id
               LEFT JOIN country ON country.id=customers.Country
               WHERE customer_change_log.type='employeeInChargeId'
                     AND customers.isDemo=0
                     AND newEmployee.department='Sales'
                     AND oldEmployee.id<>newEmployee.id";
    if($campaign)
        $sql .= " AND customers.campaignId IN (".implode(',',$campaign).")";
    $sql .= " GROUP BY customerId, date
               ORDER BY customerId, date";
    $results = $TradingPlatformDB->fetchAll($sql);
    foreach ($results as $key => $value){
        if(isset($unique[$results[$key]["customerId"]])){

            if(in_array($fresh_leads[$fkey]["newEmployeeId"],$adminEmployees) || strtotime($results[$key]["date"])-strtotime($fresh_leads[$fkey]["date"])<=30){
                $fresh_leads[$fkey]["oldEmployee"]=$results[$key]["oldEmployee"];
                $fresh_leads[$fkey]["newEmployee"]=$results[$key]["newEmployee"];
                $fresh_leads[$fkey]["newEmployeeId"]=$results[$key]["newEmployeeId"];
                $fresh_leads[$fkey]["newDesk"]=$results[$key]["newDesk"];
                $fresh_leads[$fkey]["date"]=$results[$key]["date"];

            }
            continue;
        }
        array_push($fresh_leads,$results[$key]);
        $unique[$results[$key]["customerId"]]=1;
        $fkey++;
    }
    if($employee!=0){
        foreach($fresh_leads as $key => $value){
            if($fresh_leads[$key]["newEmployeeId"]==$employee)
                array_push($last_fresh_leads,$fresh_leads[$key]);
        }
        return $last_fresh_leads;
    }elseif($desk!=0){
        foreach($fresh_leads as $key => $value){
            if($fresh_leads[$key]["newDesk"]==$desk)
                array_push($last_fresh_leads,$fresh_leads[$key]);
        }
        return $last_fresh_leads;
    }


    return $fresh_leads;
}

function getFTDsForChart($dpStart, $dpEnd, $desk){

    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true) or die('{"error":"Missing arguments"}');

    mysql_set_charset("utf8", $_Link);

    $sql = " SELECT ftds.id AS depositId,
	                customers.id AS customerId,
	                CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	                country.name AS country,
	                customers.currency,
	                ftds.amount,
	                ftds.confirmTime,
	                CONCAT(DATE(ftds.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(ftds.confirmTime))-MOD(TIME_TO_SEC(TIME(ftds.confirmTime)),3600)),'%H:%i')) AS confirmHour,
	                spotUsers.id AS employeeId,
	                CONCAT(spotUsers.firstName,' ',spotUsers.lastName) AS employeeName,
	                campaigns.name AS campaign
	         FROM (SELECT deposits.id,
	                deposits.customerId,
	                deposits.confirmTime,
	                deposits.amount,
	                IF(change_employee.id IS NOT NULL,
	                   change_employee.employeeId,
	                   IF(((SELECT MIN(comm.createDate)
				              FROM hedgestonegroup_platform.customer_communications AS comm
				              WHERE comm.createDate BETWEEN DATE_SUB(deposits.confirmTime,interval 15 day) AND deposits.confirmTime
						            AND comm.customerId=deposits.customerId
						            AND comm.creatorId=deposits.receptionEmployeeId) IS NOT NULL OR
						   (SELECT MIN(calls.date)
					          FROM hedgestonegroup_platform.calls AS calls
					          WHERE calls.date BETWEEN DATE_SUB(deposits.confirmTime,interval 15 day) AND deposits.confirmTime
							        AND calls.clientId=deposits.customerId
							        AND calls.employeeId=deposits.receptionEmployeeId) IS NOT NULL) AND
						   full_deposit.id IS NULL,deposits.receptionEmployeeId,186)) AS employeeId
	              FROM hedgestonegroup_platform.customer_deposits AS deposits
	              LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=deposits.customerId
	              LEFT JOIN MainCoon.conversion_change_employee AS change_employee ON change_employee.depositId=deposits.id
	              LEFT JOIN MainCoon.conversion_full_deposit AS full_deposit ON full_deposit.depositId=deposits.id
	              WHERE DATE(deposits.confirmTime) BETWEEN '$dpStart' AND '$dpEnd'
	                 AND deposits.confirmTime=customers.firstDepositDate
	                 AND deposits.status='approved'
	                 AND deposits.paymentMethod<>'Bonus') AS ftds
	         LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=ftds.customerId
	         LEFT JOIN hedgestonegroup_platform.users AS spotUsers ON spotUsers.id=ftds.employeeId
	         LEFT JOIN hedgestonegroup_platform.user_desks AS desks ON desks.userId=spotUsers.id
	         LEFT JOIN hedgestonegroup_platform.country AS country ON country.id=customers.country
	         LEFT JOIN OneTwoTrade_platform.campaigns AS campaigns ON campaigns.id=customers.campaignId
	         WHERE customers.isDemo=0";
    if($desk!=0){
        $sql .= " AND desks.deskId=$desk";
    }
    $sql .= " GROUP BY depositId";
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;
}

function getNewRegisterLeads($dpStart, $dpEnd, $desk){

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = " SELECT
	                customers.id AS customerId,
	                CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	                country.name AS country,
	                customers.currency,
	                customers.regTime,
	                CONCAT(DATE(customers.regTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(customers.regTime))-MOD(TIME_TO_SEC(TIME(customers.regTime)),3600)),'%H:%i')) AS regHour,
	                campaigns.name AS campaign
	        FROM customers
	        LEFT JOIN users ON users.id=customers.employeeInChargeId
	        LEFT JOIN user_desks ON user_desks.userId=users.id
	        LEFT JOIN campaigns ON campaigns.id=customers.campaignId
	        LEFT JOIN country ON country.id=customers.country
	        WHERE DATE(customers.regTime) BETWEEN '$dpStart' AND '$dpEnd'
	        AND customers.isDemo=0";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    $sql .= " GROUP BY customerId";
    $result = $TradingPlatformDB->fetchAll($sql);
    
    return $result;

}

function getWithdrawalsForCommission($dpEnd, $customerId)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id,
	                CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	                withdrawals.amountUSD,
	                withdrawals.status,
	                IF(withdrawals.status='approved',withdrawals.confirmTime,withdrawals.requestTime) AS date,
	                CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
	                FROM withdrawals
	                LEFT JOIN customers ON customers.id=withdrawals.customerId
	                LEFT JOIN users ON users.id=withdrawals.receptionEmployeeId
	                WHERE ((withdrawals.status='pending' AND  DATE_FORMAT(hedgestonegroup_platform.withdrawals.requestTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m'))
	                         OR (withdrawals.status='approved' AND  DATE_FORMAT(hedgestonegroup_platform.withdrawals.confirmTime,'%Y-%m')=DATE_FORMAT('$dpEnd','%Y-%m')))
	                         AND withdrawals.paymentMethod<>'Bonus'
	                         AND customers.id=$customerId ";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}


function getFtds($dpStart, $dpEnd, $desk, $employee)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(45000);

    $sql = "SELECT  CONCAT(customers.id,' - ',customers.FirstName,' ',customers.LastName) as customer,
        CONCAT(oldEmployee.id,' - ',oldEmployee.firstName,' ',oldEmployee.lastName) as oldEmployee,
		CONCAT(newEmployee.id,' - ',newEmployee.firstName,' ',newEmployee.lastName) as newEmployee,
        customer_change_log.date,
        customers.firstDepositDate,
        SUM(IF((customer_deposits.paymentMethod<>'Bonus' AND customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') ,customer_deposits.amountUSD,0)) as ftdDeposits,
        CONCAT(creator.id,' - ',creator.firstName,' ',creator.lastName) as creator
        FROM customer_change_log
        LEFT JOIN customers ON customers.id=customer_change_log.customerId
        LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
        LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
        LEFT JOIN user_desks ON user_desks.userId=newEmployee.id
        LEFT JOIN customer_deposits ON customer_deposits.customerId=customers.Id AND customer_deposits.receptionEmployeeId=newEmployee.id
        LEFT JOIN (SELECT customer_communications.customerId,
                          customer_communications.createDate,
                          customer_communications.creatorId,
                          ftds.date
                          FROM customer_communications
				          LEFT JOIN (SELECT   customerId, date  FROM customer_change_log
                                   LEFT JOIN customers ON customers.id=customer_change_log.customerId
                                   LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
                                   LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
								   WHERE customer_change_log.type='employeeInChargeId'
			                            AND customer_change_log.date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                        AND customers.isDemo=0
                                        AND oldEmployee.id=2290) AS ftds ON ftds.customerId=customer_communications.customerId
                          LEFT JOIN users on customer_communications.creatorId=users.id
                          WHERE customer_communications.createDate >= ftds.date
                                AND users.department='retention'
                                GROUP BY customer_communications.customerId) AS communication ON communication.customerId=customers.id
             LEFT JOIN users as creator on communication.creatorId=creator.id
             WHERE customer_change_log.type='employeeInChargeId'
			  AND customer_change_log.date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
		--      AND customers.firstDepositDate BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
              AND newEmployee.department='retention'
              AND customers.isDemo=0
              AND oldEmployee.id=2290
               ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customer_change_log.newValue=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND user_desks.deskId= " . $desk;
    }

    $sql .= " GROUP BY customer";


    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getAllVinciBonuses($dpStart, $dpEnd, $desk, $employee)
{
    $vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');  
    
    $chosen_month = date("Y-m-01", strtotime($dpEnd));
    $next_month = date("Y-m-d", strtotime($dpEnd . " first day of 1 month"));
    $data =array();
    
    $sql = "SELECT Rate FROM dbo.CommissionCurrencyRate
            WHERE Month='$chosen_month'";
	$currency_rate = $vinci_rdsDB->fetchAll($sql);
	
	$data['currency_rate'] = is_numeric($currency_rate[0]['Rate']) ? $currency_rate[0]['Rate'] : false;		 
	
    $sql = " SELECT SUM(retentionPaid.Amount) AS amount
	 	     FROM Vincicm_InventivaCRM.dbo.RetentionPaid AS retentionPaid
	 	     LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS employees ON employees.SystemUserId = retentionPaid.employeeId
	 	     WHERE retentionPaid.Date=DATEFROMPARTS(year('$dpEnd'),month('$dpEnd'),1)";
		 
    if ($employee != '0')
        $sql .= " AND retentionPaid.EmployeeId='$employee'";

    if ($desk != '0')
        $sql .= " AND employees.BusinessUnitId ='$desk'";
	
	$paid = $vinci_rdsDB->fetchAll($sql);
	
	$data['paid'] = is_numeric($paid[0]['amount']) ? $paid[0] : false;
	
	$bonusTypes = array('Extra Bonus','Withdrawal','Postponed Sale','Commission Deduction','Other Bonus');
	$sql = "";
	$last_key = end(array_keys($bonusTypes));
	
	foreach($bonusTypes as $key=>$bonusType){
		$bonus = getVinciBonusTableName($bonusType);
		
		$sql .= " SELECT employees.SystemUserId AS employeeId,
	                employees.FullName AS employee,
	                bonus.Date AS date,
	                currencies.CurrencyCode AS currency,
	                bonus.Amount AS amount,
	                paymentMethod.Name AS paymentMethod,
	                '$bonusType' AS status
	                FROM Vincicm_InventivaCRM.dbo.{$bonus['bonusTable']} AS bonus
	                LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS employees ON employees.SystemUserId=bonus.EmployeeId
	                LEFT JOIN Vincicm_InventivaCRM.dbo.Currency AS currencies ON currencies.CurrencyId=bonus.Currency
	                LEFT JOIN Vincicm_InventivaCRM.dbo.PaymentMethod AS paymentMethod ON paymentMethod.MethodId=bonus.PaymentMethodId
	                WHERE bonus.Date BETWEEN '$dpStart' AND '$dpEnd' ";
       if ($employee != '0')
          $sql .= " AND bonus.EmployeeId='$employee'"; 

       if ($desk != '0')
          $sql .= " AND employees.BusinessUnitId ='$desk'";
	   
	   if($last_key != $key)
	      $sql .= " UNION ALL ";
	   	
	 }
	 
     
     $sql .= " UNION ALL
               SELECT employees.SystemUserId AS employeeId,
            	      employees.FullName AS employee,
	                  retentionDifference.Date AS date,
	                  '' AS currency,
	                  CAST(retentionDifference.Amount AS DECIMAL(10,3)) AS amount,
	                  '' AS paymentMethod,
	                  'Retention Difference' AS status
	           FROM Vincicm_InventivaCRM.dbo.RetentionDifference AS retentionDifference
	           LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS employees ON employees.SystemUserId=retentionDifference.EmployeeId
	           WHERE retentionDifference.Date BETWEEN '$chosen_month' AND '$next_month'";

    if ($employee != '0')
          $sql .= " AND retentionDifference.EmployeeId='$employee'";

    if ($desk != '0')
          $sql .= " AND employees.BusinessUnitId ='$desk'";
     
	$bonuses = $vinci_rdsDB->fetchAll($sql,array('employeeId'));
    $data['bonuses'] = $bonuses; 
    
    return $data;

}

function getVinciBonusTableName($bonusType){
	switch($bonusType){
       case 'Extra Bonus':
          $bonusTable = "CommissionExtraBonus";
          $idField = "ExtraBonusId";
          break;
	    
	   case 'Withdrawal':
          $bonusTable = "CommissionPenalty";
          $idField = "PenaltyId";
          break;
          
       case 'Postponed Sale':
          $bonusTable = "CommissionPostponedSale";
          $idField = "PostponedSaleId";
          break;
		  
	   case 'Commission Deduction':
          $bonusTable = "CommissionFine";
          $idField = "FineId";
          break;
       
       case 'Other Bonus':
          $bonusTable = "CommissionOtherBonus";
          $idField = "OtherBonusId";
          break;         		  
    }
    
	return array("bonusTable" => $bonusTable , "idField" => $idField);
}

function getVinciBonus($dpStart, $dpEnd, $desk, $employee,$bonusType){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    $bonus = getVinciBonusTableName($bonusType);

	$sql = "SELECT bonus.{$bonus['idField']} AS id,
                   currency.CurrencyCode AS currency,
                   bonus.Amount AS amount,
                   crmUser.FullName AS employee,
                   bonus.Reason AS reason,
                   paymentMethods.Name AS type, 
                   bonus.Date As date
            FROM Vincicm_InventivaCRM.dbo.{$bonus['bonusTable']} AS bonus
            LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS crmUser ON crmUser.SystemUserId=bonus.EmployeeId
            LEFT JOIN Vincicm_MSCRM.dbo.BusinessUnitBase AS desks ON desks.BusinessUnitId=crmUser.BusinessUnitId
            LEFT JOIN Vincicm_InventivaCRM.dbo.PaymentMethod AS paymentMethods ON paymentMethods.MethodId = bonus.PaymentMethodId
            LEFT JOIN Vincicm_InventivaCRM.dbo.Currency AS currency ON currency.CurrencyId = bonus.Currency
            WHERE bonus.Date BETWEEN '$dpStart' AND '$dpEnd' ";
	if($desk)
	   $sql .= " AND crmUser.BusinessUnitId ='$desk'";
	if($employee)
	   $sql .= " AND crmUser.SystemUserId = '$employee' ";
	
	return $vinci_rdsDB->fetchAll($sql);		
}

function getPenalty($dpStart, $dpEnd, $desk, $employee)
{
    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true) or die('{"error":"Missing arguments"}');
    mysql_set_charset("utf8", $_Link);
    $sql = " SELECT MainCoon.penalty.id,
                    " . $GLOBALS["site_name"] . "_platform.users.id AS employeeId,
                    CONCAT(" . $GLOBALS["site_name"] . "_platform.users.id,' - '," . $GLOBALS["site_name"] . "_platform.users.firstName,' '," . $GLOBALS["site_name"] . "_platform.users.lastName) AS employee,
	                MainCoon.penalty.date,
	                MainCoon.penalty.currency,
	                MainCoon.penalty.amount,
	                TRUNCATE(MainCoon.penalty.amount*" . $GLOBALS["site_name"] . "_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.penalty.type,
	                MainCoon.penalty.reason,
	                '' AS penalty_delete,
	                MainCoon.penalty.retentionWithdrawalId
	                FROM MainCoon.penalty
	                LEFT JOIN " . $GLOBALS["site_name"] . "_platform.users ON " . $GLOBALS["site_name"] . "_platform.users.id=MainCoon.penalty.employeeId
	                LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks ON " . $GLOBALS["site_name"] . "_platform.user_desks.userId=MainCoon.penalty.employeeId
	               LEFT JOIN " . $GLOBALS["site_name"] . "_platform.currencies ON " . $GLOBALS["site_name"] . "_platform.currencies.code=MainCoon.penalty.currency
	                WHERE MainCoon.penalty.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.penalty.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND " . $GLOBALS["site_name"] . "_platform.user_desks.deskId= " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;

}

function getExtra($dpStart, $dpEnd, $desk, $employee)
{
    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);
    $sql = " SELECT MainCoon.extra_bonus.id,
	                CONCAT(" . $GLOBALS["site_name"] . "_platform.users.id,' - '," . $GLOBALS["site_name"] . "_platform.users.firstName,' '," . $GLOBALS["site_name"] . "_platform.users.lastName) AS employee,
	                MainCoon.extra_bonus.date,
	                MainCoon.extra_bonus.currency,
	                MainCoon.extra_bonus.amount,
	                TRUNCATE(MainCoon.extra_bonus.amount*" . $GLOBALS["site_name"] . "_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.extra_bonus.type,
	                MainCoon.extra_bonus.reason,
	                '' AS extra_delete
	                FROM MainCoon.extra_bonus
	                LEFT JOIN " . $GLOBALS["site_name"] . "_platform.users ON " . $GLOBALS["site_name"] . "_platform.users.id=MainCoon.extra_bonus.employeeId
	                LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks ON " . $GLOBALS["site_name"] . "_platform.user_desks.userId=MainCoon.extra_bonus.employeeId
	               LEFT JOIN " . $GLOBALS["site_name"] . "_platform.currencies ON " . $GLOBALS["site_name"] . "_platform.currencies.code=MainCoon.extra_bonus.currency
	                WHERE MainCoon.extra_bonus.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.extra_bonus.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND " . $GLOBALS["site_name"] . "_platform.user_desks.deskId= " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;

}

function getPostponed($dpStart, $dpEnd, $desk, $employee)
{
    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);
    $sql = " SELECT MainCoon.postponed_sales.id,
	                CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.postponed_sales.date,
	                MainCoon.postponed_sales.currency,
	                MainCoon.postponed_sales.amount,
	                TRUNCATE(MainCoon.postponed_sales.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.postponed_sales.type,
	                MainCoon.postponed_sales.reason,
	                '' AS postponed_delete
	                FROM MainCoon.postponed_sales
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.postponed_sales.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.postponed_sales.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.postponed_sales.currency
	                WHERE MainCoon.postponed_sales.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.postponed_sales.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;

}

function getFines($dpStart, $dpEnd, $desk, $employee)
{
    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);
    $sql = " SELECT MainCoon.fines.id,
	                CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.fines.date,
	                MainCoon.fines.currency,
	                MainCoon.fines.amount,
	                TRUNCATE(MainCoon.fines.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.fines.reason,
	                '' AS fines_delete
	                FROM MainCoon.fines
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.fines.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.fines.employeeId
	                LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.fines.currency
	                WHERE MainCoon.fines.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.fines.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;

}

function getOtherBonus($dpStart, $dpEnd, $desk, $employee)
{
    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);
    $sql = " SELECT MainCoon.commission_other_bonus.id,
	                CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.commission_other_bonus.date,
	                MainCoon.commission_other_bonus.currency,
	                MainCoon.commission_other_bonus.amount,
	                TRUNCATE(MainCoon.commission_other_bonus.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.commission_other_bonus.type,
	                MainCoon.commission_other_bonus.reason,
	                '' AS other_delete
	                FROM MainCoon.commission_other_bonus
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.commission_other_bonus.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_other_bonus.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.commission_other_bonus.currency
	                WHERE MainCoon.commission_other_bonus.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.commission_other_bonus.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;

}

function getAllExtras($dpStart, $dpEnd, $desk, $employee)
{
    $DB_Connection = new DB_Connect();  
    
    $chosen_month = date("Y-m-01", strtotime($dpEnd));
    $next_month = date("Y-m-d", strtotime($dpEnd . " first day of 1 month"));
    $data =array();
    
    $sql = "SELECT rate FROM MainCoon.commission_currency
            WHERE month='$chosen_month'";
	$currency_rate = $DB_Connection->fetchRow($sql);
	
	$data['currency_rate'] = is_numeric($currency_rate['rate']) ? $currency_rate : false;		 
    
	$sql = "SELECT * FROM MainCoon.commission_3d_list ORDER BY id";
    
    $data['3d_list']= $DB_Connection->fetchAll($sql);
	
    $sql = " SELECT SUM(MainCoon.retention_paid.amount) AS amount
	 	                FROM MainCoon.retention_paid
	 	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.retention_paid.employeeId
	 	                WHERE MainCoon.retention_paid.date=DATE_FORMAT('$dpEnd','%Y-%m-01')";

    if (is_numeric($employee) && $employee != 0)
        $sql .= " AND MainCoon.retention_paid.employeeId=$employee";

    if ($desk != 0)
        $sql .= " AND hedgestonegroup_platform.user_desks.deskId =$desk";
	$paid = $DB_Connection->fetchRow($sql);
	
	$data['paid'] = is_numeric($paid['amount']) ? $paid : false;
	
    $sql = " SELECT hedgestonegroup_platform.users.id AS employeeId,
	                CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.extra_bonus.date,
	                MainCoon.extra_bonus.currency,
	                MainCoon.extra_bonus.amount,
	                TRUNCATE(MainCoon.extra_bonus.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.extra_bonus.type,
	                'extra bonus' AS status
	                FROM MainCoon.extra_bonus
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.extra_bonus.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.extra_bonus.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.extra_bonus.currency
	                WHERE MainCoon.extra_bonus.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " '
	                 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= " UNION ALL
            	SELECT hedgestonegroup_platform.users.id AS employeeId,
            	    CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.penalty.date,
	                MainCoon.penalty.currency,
	                MainCoon.penalty.amount,
	                TRUNCATE(MainCoon.penalty.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.penalty.type,
	                'withdrawals' AS status
	                FROM MainCoon.penalty
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.penalty.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.penalty.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.penalty.currency
	                WHERE MainCoon.penalty.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " ' ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= " UNION ALL
            	SELECT hedgestonegroup_platform.users.id AS employeeId,
            	    CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.fines.date,
	                MainCoon.fines.currency,
	                MainCoon.fines.amount,
	                TRUNCATE(MainCoon.fines.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.fines.type,
	                'fines' AS status
	                FROM MainCoon.fines
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.fines.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.fines.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.fines.currency
	                WHERE MainCoon.fines.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " ' ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= " UNION ALL
            	SELECT hedgestonegroup_platform.users.id AS employeeId,
            	    CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.postponed_sales.date,
	                MainCoon.postponed_sales.currency,
	                MainCoon.postponed_sales.amount,
	                TRUNCATE(MainCoon.postponed_sales.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.postponed_sales.type,
	                'postponed sales' AS status
	                FROM MainCoon.postponed_sales
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.postponed_sales.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.postponed_sales.employeeId
	               LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.postponed_sales.currency
	                WHERE MainCoon.postponed_sales.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . " ' ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $sql .= " UNION ALL
            	SELECT hedgestonegroup_platform.users.id AS employeeId,
            	    CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.commission_other_bonus.date,
	                MainCoon.commission_other_bonus.currency,
	                MainCoon.commission_other_bonus.amount,
	                TRUNCATE(MainCoon.commission_other_bonus.amount*hedgestonegroup_platform.currencies.rate,2) AS amountUSD,
	                MainCoon.commission_other_bonus.type,
	                'other_bonus' AS status
	                FROM MainCoon.commission_other_bonus
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.commission_other_bonus.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_other_bonus.employeeId
	                LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.currencies.code=MainCoon.commission_other_bonus.currency
	                WHERE MainCoon.commission_other_bonus.date BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "' ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $sql .= " UNION ALL
            	SELECT hedgestonegroup_platform.users.id AS employeeId,
            	    CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                MainCoon.retention_difference.date,
	                '' AS currency,
	                CAST(MainCoon.retention_difference.amount AS DECIMAL(10,3)) AS amount,
	                '' AS amountUSD,
	                '' AS type,
	                'retention_difference' AS status
	                FROM MainCoon.retention_difference
	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.retention_difference.employeeId
	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.retention_difference.employeeId
	                WHERE MainCoon.retention_difference.date BETWEEN '$chosen_month' AND '$next_month'";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $extras = $DB_Connection->fetchAll($sql);
    $data['extras'] = $extras;
    return $data;

}

function getNotesForFTD($customer, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id AS customerId,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 customer_communications.subject,
                 customer_communications.body,
                 customer_communications.createDate,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                 FROM customer_communications
                 LEFT JOIN customers ON customers.id=customer_communications.customerId
                 LEFT JOIN users ON users.id=customer_communications.creatorId
                 WHERE customerId=" . $customer . " AND creatorId=" . $employee;

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getNotes($customerId,$type)
{   
    $TradingPlatformDB = new spotDB_TradingPlatform();
	
    $sql = "SELECT customers.id AS customerId,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 customer_communications.subject,
                 customer_communications.body,
                 customer_communications.createDate,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                 FROM customer_communications
                 LEFT JOIN customers ON customers.id=customer_communications.customerId
                 LEFT JOIN users ON users.id=customer_communications.creatorId
                 WHERE customerId=" . $customerId;
    if($type){
    	$sql .= " AND users.department IN ('".implode("','",$type)."')";
    }             

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getNotesForStatus($customerId)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id AS customerId,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 customer_communications.subject,
                 customer_communications.body,
                 customer_communications.createDate,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                 FROM customer_communications
                 LEFT JOIN customers ON customers.id=customer_communications.customerId
                 LEFT JOIN users ON users.id=customer_communications.creatorId
                 WHERE   users.department='retention'
                         AND customerId=" . $customerId;

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getCommentsForStatus($customerId)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT hedgestonegroup_platform.customers.id AS customerId,
                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                 MainCoon.customer_comments.comment,
                 MainCoon.customer_comments.date
                 FROM MainCoon.customer_comments
                 LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=MainCoon.customer_comments.customerId
                 WHERE MainCoon.customer_comments.customerId=" . $customerId;

    $results = $MainCoonDB->fetchAll($sql);
    return $results;
}

function getSessionsForStatus($customerId)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " SELECT  MainCoon.retention_trade_sessions.id,
	                 hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 MainCoon.retention_trade_sessions.startTime,
	                 MainCoon.retention_trade_sessions.endTime,
	                 MainCoon.users.id AS userId,
	                 MainCoon.users.username AS userName,
	                 MainCoon.retention_trade_sessions.status,
	                 '' AS positions
	                 FROM MainCoon.retention_trade_sessions
	                 LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=MainCoon.retention_trade_sessions.customerId
	                 LEFT JOIN MainCoon.users ON MainCoon.users.id=MainCoon.retention_trade_sessions.userId
	                 WHERE MainCoon.retention_trade_sessions.customerId=$customerId
	                 ORDER BY startTime DESC
	                 ";
    $result = $MainCoonDB->fetchAll($sql);
    return $result;

}

function getTradeSessions($sStart,$sEnd,$employee){
	$dbConnection = new DB_Connect();
	
	$sql = "SELECT tradeSessions.id AS sessionId,
                   spotCustomers.id AS customerId,
                   CONCAT(spotCustomers.FirstName,' ',spotCustomers.LastName) AS customerName,
                   country.name AS countryName,
                   CONCAT(spotUsers.id,' - ',spotUsers.firstName,' ',spotUsers.lastName) AS tradeEmployee,
                   CONCAT(currentEmployees.id,' - ',currentEmployees.firstName,' ',currentEmployees.lastName) AS currentEmployee,
                   COUNT(customerPositions.id) AS countPositions,
                   tradeSessions.startTime,
                   tradeSessions.endTime,
                   tradeSessions.status,
                   IF(tradeSessions.endTime='0000-00-00 00:00:00','00:00:00',TIMEDIFF(tradeSessions.endTime,tradeSessions.startTime)) AS duration
           FROM MainCoon.retention_trade_sessions AS tradeSessions 
           LEFT JOIN hedgestonegroup_platform.customers AS spotCustomers ON spotCustomers.id=tradeSessions.customerId
           LEFT JOIN MainCoon.users AS users ON users.id=tradeSessions.userId
           LEFT JOIN hedgestonegroup_platform.users AS spotUsers ON spotUsers.id=users.real_spotId
           LEFT JOIN hedgestonegroup_platform.users AS currentEmployees ON currentEmployees.id=spotCustomers.employeeInChargeId
           LEFT JOIN hedgestonegroup_platform.country AS country ON country.id=spotCustomers.Country
           LEFT JOIN (SELECT positions.id,
                             positions.customerId,
                             positions.date,
                             IF(positions.status='sold',IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate),positions.openddate) AS endDate,
                             positions.status
					  FROM hedgestonegroup_platform.positions AS positions
                      LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=positions.customerId
                      WHERE positions.status<>'canceled'
                      UNION ALL
                      SELECT ldo_positions.id,
                             ldo_positions.customerId, 
                             ldo_positions.entryTime AS date,
                             IF(ldo_positions.status<>'sold',ldo_positions.endDate,ldo_positions.exitTime) AS endDate,
                             ldo_positions.status
                      FROM hedgestonegroup_platform.ldo_positions AS ldo_positions
                      LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=ldo_positions.customerId
                      WHERE ldo_positions.status<>'canceled'
	                  UNION ALL
                      SELECT forex_positions.id,
                             forex_positions.customerId,
                             forex_positions.entryTime AS date,
                             IF(forex_positions.status='open',forex_positions.endDate,forex_positions.exitTime) AS endDate,
                             forex_positions.status
		              FROM hedgestonegroup_platform.forex_positions AS forex_positions
                      LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=forex_positions.customerId
                      WHERE forex_positions.status<>'canceled'
                      UNION ALL
                      SELECT onetouch_positions.id,
                             onetouch_positions.customerId,
                             onetouch_positions.date AS date,
                             onetouch_options.endTradeTime AS endDate,
                             onetouch_positions.status
                      FROM hedgestonegroup_platform.onetouch_positions AS onetouch_positions
                      LEFT JOIN hedgestonegroup_platform.onetouch_options AS onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                      LEFT JOIN hedgestonegroup_platform.customers AS customers ON customers.id=onetouch_positions.customerId
                      WHERE onetouch_positions.status<>'canceled') AS customerPositions ON customerPositions.customerId=spotCustomers.id
																		   AND ((customerPositions.status IN ('open','won','lost','tie','pending')
                                                                           AND IF(tradeSessions.endTime!='0000-00-00 00:00:00',
                                                                           customerPositions.date BETWEEN tradeSessions.startTime AND tradeSessions.endTime,
																		   customerPositions.date >= tradeSessions.startTime))
                                                                           OR (customerPositions.status='sold'
																		   AND IF(tradeSessions.endTime!='0000-00-00 00:00:00',
                                                                           customerPositions.endDate BETWEEN tradeSessions.startTime AND tradeSessions.endTime,
                                                                           customerPositions.endDate>= tradeSessions.startTime)))
         WHERE tradeSessions.startTime BETWEEN '$sStart 00:00:00' AND '$sEnd 23:59:59'";
         
         
	if($employee)
	  $sql .= " AND users.id IN (".implode(",",$employee).")";
	$sql .= " GROUP by tradeSessions.id";  
	
	return $dbConnection->fetchAll($sql);            
}

function closeTradeSessionForStatus($id)
{
    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $sql = "SELECT users.username
	               FROM users
	               RIGHT JOIN retention_trade_sessions ON retention_trade_sessions.userId=users.id
	               WHERE retention_trade_sessions.id=$id";
    $tradeSession = $MainCoonDB->fetchAll($sql);
    $tradeSessionUserName = $tradeSession[0]['username'];
    if ($userName != $tradeSessionUserName)
        return 'Different UserName';
    $sql = " UPDATE retention_trade_sessions
	              SET endTime=CURRENT_TIMESTAMP ,status='closed'
	              WHERE id=$id";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function openTradeSessionForStatus($customerId, $userId)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "INSERT INTO retention_trade_sessions (customerId,userId,isNotified) VALUES ($customerId,$userId,0)";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function getTradeSessionPositions($sessionId)
{	
    $TradingPlatformDB = new spotDB_TradingPlatform();
	$sql = "SELECT * FROM MainCoon.retention_trade_sessions WHERE id={$sessionId}";
	$session = $TradingPlatformDB->fetchAll($sql);
	if(empty($session))
	   return 'No session';
	$customerId = $session[0]['customerId'];
	$startTime = $session[0]['startTime'];
	$endTime = $session[0]['endTime'];
	
    $sql = "SELECT positions.id,
            customers.id AS customerId,
            CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
            assets.name as assetName,
            assets.type,
            positions.amount,
            positions.payout,
            positions.rate,
            positions.date,
            IF(positions.status='sold',IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate),positions.openddate) AS endDate,
            positions.status,
            'positions' AS table_type,
            IF(options.sixtySeconds=1,'Sixty Seconds','Binary') AS product
            FROM positions
            LEFT JOIN customers ON customers.id=positions.customerId
            LEFT JOIN assets ON assets.id=positions.opassetId
            LEFT JOIN options ON options.id=positions.optionId
            WHERE customers.id=$customerId
                  AND ((positions.status IN ('open','won','lost','tie','pending')";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND positions.date BETWEEN '$startTime' and '$endTime')" :
        " AND positions.date >= '$startTime')";
    $sql .= " OR (positions.status='sold'";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate) BETWEEN '$startTime' and '$endTime'))" :
        " AND IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate) >= '$startTime'))";
    $sql .= " UNION ALL
              SELECT ldo_positions.id,
              customers.id AS customerId,
              CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
              assets.name AS assetName,
              assets.type,
              ldo_positions.investment AS amount,
              ldo_positions.payout,
              ldo_positions.startRate AS rate,
              ldo_positions.entryTime AS date,
              IF(ldo_positions.status<>'sold',ldo_positions.endDate,ldo_positions.exitTime) AS endDate,
              ldo_positions.status,
              'ldo_positions' AS table_type,
              'Ladder' as product
              FROM ldo_positions
              LEFT JOIN customers ON customers.id=ldo_positions.customerId
              LEFT JOIN assets ON assets.id=ldo_positions.assetId
              WHERE customers.id=$customerId
                    AND ((ldo_positions.status IN ('open','won','lost','tie','pending')";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND ldo_positions.entryTime BETWEEN '$startTime' and '$endTime')" :
        " AND ldo_positions.entryTime >= '$startTime')";
    $sql .= " OR (ldo_positions.status='sold'";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND ldo_positions.exitTime BETWEEN '$startTime' and '$endTime'))" :
        " AND ldo_positions.exitTime >= '$startTime'))";
    $sql .= " UNION ALL
             SELECT forex_positions.id,
             customers.id AS customerId,
             CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
             assets.name AS assetName,
             assets.type,
             forex_positions.investment AS amount,
             forex_positions.payout,
             forex_positions.startRate AS rate,
             forex_positions.entryTime AS date,
             IF(forex_positions.status='open',forex_positions.endDate,forex_positions.exitTime) AS endDate,
             forex_positions.status,
             'forex_positions' AS table_type,
             'Forex' AS product
             FROM forex_positions
             LEFT JOIN customers ON customers.id=forex_positions.customerId
             LEFT JOIN assets ON assets.id=forex_positions.assetId
             WHERE customers.id=$customerId
                   AND ((forex_positions.status IN ('open','won','lost','tie','pending')";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND forex_positions.entryTime BETWEEN '$startTime' and '$endTime')" :
        " AND forex_positions.entryTime >= '$startTime')";
    $sql .= " OR (forex_positions.status='sold'";
    $sql .= $endTime!='0000-00-00 00:00:00' ?
        " AND forex_positions.exitTime BETWEEN '$startTime' and '$endTime'))" :
        " AND forex_positions.exitTime >= '$startTime'))";
    $sql .= " UNION ALL
             SELECT onetouch_positions.id,
             customers.id AS customerId,
             CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
             assets.name AS assetName,
             assets.type,
	         onetouch_positions.amount AS amount,
	         onetouch_positions.payout,
	         onetouch_positions.rate,
             onetouch_positions.date AS date,
             onetouch_options.endTradeTime AS endDate,
             onetouch_positions.status,
             'onetouch_positions' AS table_type,
             'One Touch' AS product
             FROM onetouch_positions
             LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
             LEFT JOIN customers ON customers.id=onetouch_positions.customerId
             LEFT JOIN assets ON assets.id=onetouch_options.assetId
             WHERE onetouch_positions.status<>'canceled'
                   AND customers.id=$customerId";
    $sql .= $endTime != '0000-00-00 00:00:00' ?
        " AND onetouch_positions.date BETWEEN '$startTime' and '$endTime'" :
        " AND onetouch_positions.date >= '$startTime'";
    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getUnnotifiedTradeSessions($post){
    set_time_limit(250);
    session_write_close();
    $id_array=array();
    foreach($post as $key=>$value){
        array_push($id_array,$value);
    }
    $startTime = time();
    $spotId = $_SESSION['userdata']['real_spotId'];
    $unnotified = getUnnotified($spotId);
    $unnotified_ids=array();
    foreach($unnotified as $key=>$value){
        array_push($unnotified_ids,$unnotified[$key]->id);
    }
    while((!isset($unnotified[0]) || $unnotified_ids==$id_array) &&  time()-$startTime <=200){
        sleep(5);
        $unnotified_ids=array();
        $unnotified = getUnnotified($spotId);
        foreach($unnotified as $key=>$value){
            array_push($unnotified_ids,$unnotified[$key]->id);
        }
    }; 
    //  session_start(); 
    return $unnotified;


}

function getUnnotified($spotId){
    	
    if($spotId==0)
        return false;
	
    $redis = new Predis\Client();
	
    $stored_unnotified = $redis->get('unnotified_trade_sessions');
	$stored_unnotified = json_decode($stored_unnotified);
	$unnotified_sessions = array();
	foreach($stored_unnotified as $key=>$value){
	   if($stored_unnotified[$key]->employeeId == $spotId)	
	     $unnotified_sessions[] = $stored_unnotified[$key];
	} 
    return $unnotified_sessions;
}

function changeNotifySessions($post){
    $MainCoonDB = new MySqlDriver();
    $id_array=array();
    foreach($post as $key=>$value){
        array_push($id_array,$value);
    }
    $sql = "UPDATE retention_trade_sessions
            SET isNotified=1
            WHERE id IN (".implode(',',$id_array).")";
    $result= $MainCoonDB->exec($sql);
    return $result;
}

function getAcademySessions($sStart,$sEnd,$academyEmployee){

    $dbConnection = new DB_Connect();

    $sql=" SELECT MainCoon.retention_academy_sessions.id,
	              hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS currentEmployee,
	              MainCoon.retention_academy_sessions.startTime,
	              MainCoon.retention_academy_sessions.endTime,
	              MainCoon.users.username,
	              CONCAT(academyEmployees.id,' - ',academyEmployees.firstName,' ',academyEmployees.lastName) AS academyEmployee,
	              MainCoon.retention_academy_sessions.status,
	              MainCoon.retention_academy_sessions.comment,
	              MainCoon.retention_academy_sessions.commentTime,
	              IFNULL((SELECT SUM(amount) FROM hedgestonegroup_platform.customer_deposits
	                      WHERE hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
	                            AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
								AND hedgestonegroup_platform.customer_deposits.status='approved'
								AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN MainCoon.retention_academy_sessions.startTime AND IF(next_session.next_startTime IS NOT NULL, next_session.next_startTime, DATE_ADD(MainCoon.retention_academy_sessions.startTime,interval 72 hour))
				  ),0) AS upsale,
				  IF(next_session.next_startTime IS NOT NULL, next_session.next_startTime, DATE_ADD(MainCoon.retention_academy_sessions.startTime,interval 72 hour)) AS upsaleEndTime,
				  customers.currency,
				  IF(MainCoon.retention_academy_sessions.endTime='0000-00-00 00:00:00','00:00:00',
				    # IF(DATE_FORMAT(TIMEDIFF(MainCoon.retention_academy_sessions.endTime,MainCoon.retention_academy_sessions.startTime),'%H')='00',
				    #    DATE_FORMAT(TIMEDIFF(MainCoon.retention_academy_sessions.endTime,MainCoon.retention_academy_sessions.startTime),'%i:%s'),
				        TIMEDIFF(MainCoon.retention_academy_sessions.endTime,MainCoon.retention_academy_sessions.startTime)) AS duration
	              FROM MainCoon.retention_academy_sessions
	              LEFT JOIN (
	                SELECT ns.* FROM
                    (SELECT MainCoon.retention_academy_sessions.id,
                            MainCoon.retention_academy_sessions.startTime,
                            next_sessions.startTime AS next_startTime
                     FROM MainCoon.retention_academy_sessions
                     LEFT JOIN (SELECT customerId, startTime FROM MainCoon.retention_academy_sessions
                                       ORDER BY startTime ASC) AS next_sessions
                               ON next_sessions.customerId=MainCoon.retention_academy_sessions.customerId
                                  AND next_sessions.startTime>MainCoon.retention_academy_sessions.startTime
                                  AND next_sessions.startTime<=DATE_ADD(MainCoon.retention_academy_sessions.startTime,interval 72 hour)
                     ORDER BY MainCoon.retention_academy_sessions.startTime, next_startTime) AS ns
                    GROUP BY id) AS next_session ON next_session.id=MainCoon.retention_academy_sessions.id
	              LEFT JOIN MainCoon.users ON MainCoon.users.id=MainCoon.retention_academy_sessions.userId
	              LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=MainCoon.retention_academy_sessions.customerId
	              LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=hedgestonegroup_platform.customers.employeeInChargeId
	              LEFT JOIN hedgestonegroup_platform.users AS academyEmployees ON academyEmployees.id=MainCoon.users.real_spotId
	              WHERE DATE(MainCoon.retention_academy_sessions.startTime) BETWEEN '$sStart' AND '$sEnd'";
    if($academyEmployee)
        $sql .= " AND MainCoon.retention_academy_sessions.userId IN (".implode(',',$academyEmployee).")";
    
    return $dbConnection->fetchAll($sql);

}

function closeAcademySession($id)
{
    $MainCoonDB = new MySqlDriver();
    $userId = $_SESSION['userdata']['id'];
    $sql = "SELECT userId
	               FROM retention_academy_sessions
	               WHERE retention_academy_sessions.id=$id";
    $academySession = $MainCoonDB->fetchAll($sql);
    $academySessionUserId = $academySession[0]['userId'];
    if ($userId != $academySessionUserId)
        return 'Different User';
    $sql = " UPDATE retention_academy_sessions
	              SET endTime=CURRENT_TIMESTAMP ,status='closed'
	              WHERE id=$id";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function openAcademySession($customerId,$userId){
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT status
	        FROM retention_academy_sessions
	        WHERE retention_academy_sessions.customerId=$customerId
	        ORDER BY startTime DESC
	        LIMIT 1";
	$academySession = $MainCoonDB->fetchAll($sql);
	//return $academySession;	
	//return !empty($academySession) && $academySession[0]['status']=='open';
	if(!empty($academySession) && $academySession[0]['status']=='open'){
		return 'Session is already open for this specific customer';
	}
    $sql = "INSERT INTO retention_academy_sessions (customerId,userId) VALUES ($customerId,$userId)";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function addAcademyComment($sessionId,$comment){
    $MainCoonDB = new MySqlDriver();
	$comment = str_replace("'", "\'", $comment);
    $sql = "UPDATE retention_academy_sessions
	        SET comment='$comment', commentTime=CURRENT_TIMESTAMP
	        WHERE id=$sessionId";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function getCustomerForSession($customerId){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	         CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
	         customers.isDemo
	         FROM customers
	         LEFT JOIN users ON users.id=customers.employeeInChargeId
	         WHERE customers.id=$customerId";
    $result = $TradingPlatformDB->fetchAll($sql);
    if(!isset($result[0])){
        return 'There is no customer with the specified id';
    }else if($result[0]['isDemo']){
        return 'The specified customer is demo';
    }
    return $result;
}

function getEfficiency($dpStart, $dpEnd, $desk, $employee)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = " SELECT new.id,
                      CONCAT(new.id,' - ',new.employee) as employee,
	SUM(new.realAB_USD) AS realAB_USD,
    SUM(new.trade_realAB_USD) AS trade_realAB_USD,
    SUM(new.no_trade_realAB_USD) AS no_trade_realAB_USD,
    SUM(new.realAB_USD_1000) AS realAB_USD_1000,
    SUM(new.no_trade_realAB_USD_1000) AS no_trade_realAB_USD_1000,
    SUM(new.turnoverUSD) AS turnoverUSD,
    SUM(new.pnlUSD) AS pnlUSD,
    SUM(new.bet) AS bet,
    TRUNCATE(SUM(new.turnoverUSD)/IF(SUM(new.bet)=0,1,SUM(new.bet)),2) AS TO_over_bet,
    0 AS traded_rab_over_rab,
    0 AS rab_over_total_rab,
    0 AS no_trade_over_total_rab,
    0 AS realAB_1000_over_total_rab,
    0 AS pnl_over_total_pnl,
    0 AS TB_over_total_TB,
    0 AS efficiency
FROM
(SELECT  users.id,
         CONCAT(users.firstName,' ',users.lastName) as employee,
      --   CONCAT(customers.id,' - ',customers.FirstName,' ',customers.LastName) AS customerName,
		 TRUNCATE( realBalance.realAB*currencies.rate,2) AS realAB_USD,
         IF(turnover.amount IS NULL, 0,TRUNCATE( realBalance.realAB*currencies.rate,2)) AS trade_realAB_USD,
         IF(turnover.amount IS NULL, TRUNCATE( realBalance.realAB*currencies.rate,2),0) AS no_trade_realAB_USD,
         IF(realBalance.realAB*currencies.rate>=1000,TRUNCATE( realBalance.realAB*currencies.rate,2),0) AS realAB_USD_1000,
		 IF(realBalance.realAB*currencies.rate>=1000 AND turnover.amount IS NULL,TRUNCATE( realBalance.realAB*currencies.rate,2),0) AS no_trade_realAB_USD_1000,
         TRUNCATE(IFNULL(turnover.amount,0)*currencies.rate,2) AS turnoverUSD,
         TRUNCATE(IFNULL(turnover.amount-turnover.payout,0)*currencies.rate,2) AS pnlUSD,
		 IFNULL(turnover.bet,0) AS bet


       FROM users


      LEFT JOIN customers ON users.id=customers.employeeInChargeId
      LEFT JOIN (SELECT customers.id, ( IF(IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl, 0)) AS realAB FROM customers
           LEFT JOIN customer_balance ON customers.id=customer_balance.customerId) AS realBalance ON customers.id=realBalance.id

      LEFT JOIN currencies ON customers.currency=currencies.code
      LEFT JOIN user_desks ON user_desks.userId=users.id
      LEFT JOIN( SELECT turnover1.customerId AS customerId,  SUM(turnover1.amount) AS amount, SUM(turnover1.bet) AS bet,SUM(turnover1.payout) as payout FROM
					(SELECT customerId, SUM(amount) as amount, COUNT(amount) as bet,SUM(payout) as payout
                      FROM onetouch_positions
                      WHERE status!='canceled'
                      AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(amount) as amount, COUNT(amount) as bet,SUM(payout) as payout
                      FROM positions
                      WHERE status!='canceled'
                      AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(investment) as amount, COUNT(investment) as bet,SUM(payout) as payout
                      FROM ldo_positions
                      WHERE status!='canceled'
                      AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(investment) as amount, COUNT(investment) as bet,SUM(payout) as payout
                      FROM forex_positions
                      WHERE status!='canceled'
                      AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                      GROUP BY customerId) as turnover1
                      GROUP BY customerId
                    ) turnover ON customers.id = turnover.customerId
       WHERE
			 customers.isDemo=0
             AND users.department='retention'
             AND users.status='activated') AS new
		LEFT JOIN user_desks ON user_desks.userId=new.id


             ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " WHERE users.id=" . $employee;
        if ($desk != 0) {

            $sql .= " AND user_desks.deskId= " . $desk;
        }
    } else {
        if ($desk != 0) {

            $sql .= " WHERE user_desks.deskId= " . $desk;
        }
    }


    $sql .= " GROUP BY employee";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function addVinciBonus($bonusType,$bonusDate,$bonusEmployee,$bonusCurrency,$bonusAmount,$bonusPaymentMethod,$bonusReason,$extra_bonusMonth){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
	
	$bonus = getVinciBonusTableName($bonusType);
	$bonusReason = str_replace("'", "''", $bonusReason);
	$sql = "INSERT INTO Vincicm_InventivaCRM.dbo.{$bonus['bonusTable']} (Currency,Amount,Date,Reason,EmployeeId,PaymentMethodId) 
	        VALUES ($bonusCurrency,$bonusAmount,'$bonusDate','$bonusReason','$bonusEmployee',$bonusPaymentMethod)";
	
	$bonusResultId = $vinci_rdsDB->execID($sql);
	
	if($extra_bonusMonth && $bonusResultId){
		
		$sql = "INSERT INTO Vincicm_InventivaCRM.dbo.CommissionExtraBonus (Currency,Amount,Date,Reason,EmployeeId,PaymentMethodId)
		        VALUES ($bonusCurrency,$bonusAmount,'{$extra_bonusMonth}-01','$bonusReason','$bonusEmployee',$bonusPaymentMethod)";
		$extraBonusId = $vinci_rdsDB->execID($sql);
		
		if(!$extraBonusId){
			return false;
		}
		$sql = "INSERT INTO Vincicm_InventivaCRM.dbo.CommissionAutoPostpone (PostponedSaleId,ExtraBonusId)
		        VALUES ($bonusResultId,$extraBonusId)";
		return $vinci_rdsDB->exec($sql);		     
	}
	return $bonusResultId;
}

function addVinciPaid($date, $employee, $amount){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
	
	$sql = "UPDATE Vincicm_InventivaCRM.dbo.RetentionPaid
	 	    SET Amount=$amount
	 	    WHERE Date='{$date}-01' AND EmployeeId='$employee'";
    if (($result = $vinci_rdsDB->affectedRows($sql)) == 0) {
        $sql = "INSERT INTO Vincicm_InventivaCRM.dbo.RetentionPaid (EmployeeId,Amount,Date) VALUES ('$employee',$amount, '{$date}-01')";
        $result = $vinci_rdsDB->exec($sql);
    }

    return $result;
}

function addVinciDifference($date, $employee, $amount){
		
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    
    $sql = "SELECT Amount
	  	    FROM Vincicm_InventivaCRM.dbo.RetentionDifference AS retentionDifference
	  	    WHERE Date='{$date}-01' AND EmployeeId='$employee'";
    $check = $vinci_rdsDB->fetchAll($sql);
    if (isset($check[0]) && $check[0]['amount'] == $amount) {
        return 'Difference is already added';
    }
    $sql = "UPDATE Vincicm_InventivaCRM.dbo.RetentionDifference 
	 	    SET Amount=$amount
	 	    WHERE Date='{$date}-01' AND EmployeeId='$employee'";
    if (($result = $vinci_rdsDB->affectedRows($sql)) == 0) {
        $sql = "INSERT INTO Vincicm_InventivaCRM.dbo.RetentionDifference (EmployeeId,Amount,Date) VALUES ('$employee',$amount, '{$date}-01')";
        $result = $vinci_rdsDB->exec($sql);
    }

    return $result;
}

function addPenaltyTable($date, $employee, $currency, $amount, $reason, $type,$id)
{

    $MainCoonDB = new MySqlDriver();
    $userName= $_SESSION['userdata']['username'];
    if($id!=0){
        $sql = "UPDATE MainCoon.retention_withdrawals
		                 SET MainCoon.retention_withdrawals.isAdded=1
		                 WHERE MainCoon.retention_withdrawals.id=$id";
        $MainCoonDB->exec($sql);
    }
    if (isset($reason)) {
        $sql = "INSERT INTO MainCoon.penalty (currency,amount,date,reason,employeeId,type,userName,retentionWithdrawalId) values
                ('" . $currency . "',$amount,'" . $date . "','" . $reason . "',$employee,'" . $type . "','".$userName."',$id)";
    } else {
        $sql = "INSERT INTO MainCoon.penalty (currency,amount,date,reason,employeeId,type,userName,retentionWithdrawalId) values
                ('" . $currency . "',$amount,'" . $date . "','',$employee,'" . $type . "','".$userName."',$id)";

    }


    $result = $MainCoonDB->exec($sql);
    if (!$result) {
        return false;
    } else {
        return $result;
    }


}

function addExtraTable($date, $employee, $currency, $amount, $reason, $type)
{

    $MainCoonDB = new MySqlDriver();
    if (isset($reason)) {
        $sql = "INSERT INTO MainCoon.extra_bonus (currency,amount,date,reason,employeeId,type) values ('" . $currency . "',$amount,'" . $date . "','" . $reason . "',$employee,'" . $type . "')";
    } else {
        $sql = "INSERT INTO MainCoon.extra_bonus (currency,amount,date,reason,employeeId,type) values ('" . $currency . "',$amount,'" . $date . "','',$employee,'" . $type . "')";

    }


    $result = $MainCoonDB->exec($sql);
    if (!$result) {
        return false;
    } else {
        return $result;
    }


}

function addPostponedTable($date, $employee, $currency, $amount, $reason, $type, $extra_bonusMonth, $transactionId)
{

    $MainCoonDB = new MySqlDriver();
	
    if (!isset($reason)) 
    	$reason='';
    $sql = "INSERT INTO MainCoon.postponed_sales (currency,amount,date,reason,employeeId,type) values ('" . $currency . "',$amount,'" . $date . "','" . $reason . "',$employee,'" . $type . "')";

    $postponeId = $MainCoonDB->execID($sql);
	if(!$postponeId)
		return false;
	$sql = "INSERT INTO MainCoon.extra_bonus (currency,amount,date,reason,employeeId,type) values ('" . $currency . "',$amount,'".$extra_bonusMonth."-01','" . $reason . "',$employee,'" . $type . "')";
	
	$extra_bonusId = $MainCoonDB->execID($sql);
	if(!extra_bonusId)
		return false;
	
	$sql = "INSERT INTO MainCoon.auto_postponed (postponed_salesId,extra_bonusId,transactionId,userId) VALUES ($postponeId,$extra_bonusId,$transactionId,{$_SESSION['userdata']['id']})";
	
	$result = $MainCoonDB->exec($sql);
	
	if(!$result){
		return false;
	}else{
		return true;
	}
	
    

}

function addFinesTable($date, $employee, $currency, $amount, $reason)
{

    $MainCoonDB = new MySqlDriver();
    if (isset($reason)) {
        $sql = "INSERT INTO MainCoon.fines (currency,amount,date,reason,employeeId) values ('" . $currency . "',$amount,'" . $date . "','" . $reason . "',$employee)";
    } else {
        $sql = "INSERT INTO MainCoon.fines (currency,amount,date,reason,employeeId) values ('" . $currency . "',$amount,'" . $date . "','',$employee)";

    }


    $result = $MainCoonDB->exec($sql);
    if (!$result) {
        return false;
    } else {
        return $result;
    }


}

function addOtherBonusTable($date, $employee, $currency, $amount, $reason)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    if (isset($reason)) {
        $sql = "INSERT INTO MainCoon.commission_other_bonus (currency,amount,date,reason,employeeId,updateUserName) values ('" . $currency . "',$amount,'" . $date . "','" . $reason . "',$employee,'$userName')";
    } else {
        $sql = "INSERT INTO MainCoon.commission_other_bonus (currency,amount,date,reason,employeeId,updateUserName) values ('" . $currency . "',$amount,'" . $date . "','',$employee,'$userName')";

    }
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function addExtraForConversion($date, $employee, $amount, $reason)
{

    $MainCoonDB = new MySqlDriver();
    $sql = isset($reason) ?
        "INSERT INTO MainCoon.conversion_extra (employeeId,amount,date,reason) values ($employee,$amount,'" . $date . "','" . $reason . "')" :
        "INSERT INTO MainCoon.conversion_extra (employeeId,amount,date,reason) values ($employee,$amount,'" . $date . "','')";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function assignForConversion($depositId, $employeeId, $assign)
{

    $MainCoonDB = new MySqlDriver();
    $sql = $assign == 'Delete' ?
        "INSERT INTO MainCoon.conversion_full_deposit (depositId,employeeId) values ($depositId,$employeeId)" :
        "DELETE FROM MainCoon.conversion_full_deposit WHERE depositId=$depositId AND employeeId=$employeeId";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function addPaid($date, $employee, $amount)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $employee = explode(' ', trim($employee));
    $sql = "SELECT MainCoon.retention_paid.amount
	  	               FROM MainCoon.retention_paid
	  	               WHERE MainCoon.retention_paid.date='" . $date . "-01' AND MainCoon.retention_paid.employeeId=" . $employee[0];
    $check = $MainCoonDB->fetchAll($sql);
    if (isset($check[0]) && $check[0]['amount'] == $amount) {
        return 'Same Amount';
    }
    $sql = "UPDATE MainCoon.retention_paid
	 	               SET MainCoon.retention_paid.amount=$amount , MainCoon.retention_paid.updateUserName='$userName'
	 	               WHERE MainCoon.retention_paid.date='" . $date . "-01' AND MainCoon.retention_paid.employeeId=" . $employee[0];
    if ($MainCoonDB->AffectedRows($sql) == 0) {
        $sql = "INSERT INTO MainCoon.retention_paid (employeeId,amount,date,updateUserName) values ($employee[0],$amount, '" . $date . "-01','$userName')";
    }


    $result = $MainCoonDB->exec($sql);


    return $result;


}

function getPaid($dpEnd, $desk, $employee)
{

    $config = new config();
    $data = array();

    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);

    $sql = " SELECT sum(MainCoon.retention_paid.amount) as amount
	 	                FROM MainCoon.retention_paid
	 	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.retention_paid.employeeId
	 	                WHERE MainCoon.retention_paid.date=DATE_FORMAT('" . $dpEnd . "','%Y-%m-01')";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.retention_paid.employeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId = " . $desk;
    }


    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    if (!$data) {
        return false;
    }
    mysql_close($_Link);
    return $data;


}

function addDifference($date, $employee, $amount)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $sql = "SELECT MainCoon.retention_difference.amount
	  	               FROM MainCoon.retention_difference
	  	               WHERE MainCoon.retention_difference.date='" . $date . "-01' AND MainCoon.retention_difference.employeeId=" . $employee;
    $check = $MainCoonDB->fetchAll($sql);
    if (isset($check[0]) && $check[0]['amount'] == $amount) {
        return 'Same Amount';
    }
    $sql = "UPDATE MainCoon.retention_difference
	 	               SET MainCoon.retention_difference.amount=$amount , MainCoon.retention_difference.updateUserName='$userName'
	 	               WHERE MainCoon.retention_difference.date='" . $date . "-01' AND MainCoon.retention_difference.employeeId=" . $employee;
    if ($MainCoonDB->AffectedRows($sql) == 0) {
        $sql = "INSERT INTO MainCoon.retention_difference (employeeId,amount,date,updateUserName) values ($employee,$amount, '" . $date . "-01','$userName')";
    }

    $result = $MainCoonDB->exec($sql);
    return $result;
}

function getDifference($dpEnd, $desk, $employee)
{

    $config = new config();
    $data = array();
    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'), true);
    mysql_set_charset("utf8", $_Link);

    $sql = " SELECT  MainCoon.retention_difference.id,
	                    hedgestonegroup_platform.users.id AS employeeId,
	 	                CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employeeName,
	 	                MainCoon.retention_difference.date,
	 	                CAST(MainCoon.retention_difference.amount AS DECIMAL(10,3)) AS amount,
	 	                '' AS difference_delete
	 	                FROM MainCoon.retention_difference
	 	                LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.retention_difference.employeeId
	 	                LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.users.id
	 	                WHERE MainCoon.retention_difference.date=DATE_FORMAT('" . $dpEnd . "','%Y-%m-01')";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId = " . $desk;
    }
    $result = mysql_query($sql);
    if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
            $data[] = $row;
        }
    }
    mysql_close($_Link);
    return $data;
}

function getVinciDifference($dpEnd, $desk, $employee)
{

    $vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');

    $sql = " SELECT  difference.RetentionDifferenceId AS id,
	 	             employees.FullName AS employeeName,
	 	             difference.Date AS date,
	 	             CAST(difference.Amount AS DECIMAL(15,3)) AS amount           
	 	     FROM Vincicm_InventivaCRM.dbo.RetentionDifference AS difference
	 	     LEFT JOIN Vincicm_MSCRM.dbo.SystemUserBase AS employees ON employees.SystemUserId=difference.EmployeeId
	 	     WHERE difference.Date=DATEFROMPARTS(year('$dpEnd'),month('$dpEnd'),1)";

    if($desk)
	   $sql .= " AND employees.BusinessUnitId ='$desk'";
	if($employee)
	   $sql .= " AND employees.SystemUserId = '$employee'";
	
	return $vinci_rdsDB->fetchAll($sql);
    
}

function deleteVinciBonus($id,$bonusType){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
	
	$bonus = getVinciBonusTableName($bonusType);
	
	$sql = "DELETE FROM Vincicm_InventivaCRM.dbo.{$bonus['bonusTable']} WHERE {$bonus['idField']} = $id";
	$result = $vinci_rdsDB->exec($sql);
	if(!$result){
	  return false;	
	}
	if($bonusType=='Extra Bonus' || $bonusType=='Postponed Sale'){
		$bonus = getVinciBonusTableName($bonusType);
		$complementBonusType = $bonusType=='Extra Bonus' ? 'Postponed Sale' : 'Extra Bonus';
		$complementBonus = getVinciBonusTableName($complementBonusType);
		 
		$sql = "SELECT * FROM dbo.CommissionAutoPostpone WHERE {$bonus['idField']} = $id";
		$auto_postponed = $vinci_rdsDB->fetchAll($sql);
		if(isset($auto_postponed[0])){
			$sql = "DELETE FROM dbo.{$complementBonus['bonusTable']} WHERE {$complementBonus['idField']} = ".$auto_postponed[0][$complementBonus['idField']];
		    $deleteComplement = $vinci_rdsDB->exec($sql);
			if(!$deleteComplement)
				return false;
			$sql = "DELETE FROM dbo.CommissionAutoPostpone WHERE {$bonus['idField']} = $id";
			$deleteAutoPostponed = $vinci_rdsDB->exec($sql);
			if(!$deleteAutoPostponed)
				return false;
		}
	  }
	  
	  return true;   

}

function deletePenalty($id,$retentionWithdrawalId)
{

    $MainCoonDB = new MySqlDriver();
    if($retentionWithdrawalId){
        $sql= "UPDATE retention_withdrawals
		              SET isAdded=0
 		              WHERE id=$retentionWithdrawalId";
        $MainCoonDB->exec($sql);
    }
    $sql = "DELETE FROM MainCoon.penalty WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function deleteExtra($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.extra_bonus WHERE id=$id";

    $result = $MainCoonDB->exec($sql);
	if(!$result){
	  return false;	
	}
	$sql = "SELECT * FROM MainCoon.auto_postponed WHERE extra_bonusId=$id";
    $auto_postponed = $MainCoonDB->fetchAll($sql);
	if(isset($auto_postponed[0])){
	   $sql = "DELETE FROM MainCoon.postponed_sales WHERE id={$auto_postponed[0]['postponed_salesId']};";
	   $deleteAutoPostponed = $MainCoonDB->exec($sql);
	   if($deleteAutoPostponed){
	     $sql = "DELETE FROM MainCoon.auto_postponed WHERE extra_bonusId=$id;";
		 $deleteAutoPostponed = $MainCoonDB->exec($sql);  	
	   }		   
	   
	}
	
    $return = isset($deleteAutoPostponed) ? $deleteAutoPostponed : true;
    return $return;
}

function deletePostponed($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.postponed_sales WHERE id=$id";

    $result = $MainCoonDB->exec($sql);
	if(!$result){
	  return false;	
	}
	$sql = "SELECT * FROM MainCoon.auto_postponed WHERE postponed_salesId=$id";
    $auto_postponed = $MainCoonDB->fetchAll($sql);
	if(isset($auto_postponed[0])){
	   $sql = "DELETE FROM MainCoon.extra_bonus WHERE id={$auto_postponed[0]['extra_bonusId']};";
	   $deleteAutoPostponed = $MainCoonDB->exec($sql);
	   if($deleteAutoPostponed){
	     $sql = "DELETE FROM MainCoon.auto_postponed WHERE postponed_salesId=$id;";
		 $deleteAutoPostponed = $MainCoonDB->exec($sql);  	
	   }		   
	   
	}
	
    $return = isset($deleteAutoPostponed) ? $deleteAutoPostponed : true;
    return $return;
}

function deleteFines($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.fines WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function deleteOtherBonus($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.commission_other_bonus WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function deleteDifference($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.retention_difference WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function deleteVinciDifference($id){
		
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');

    $sql = "DELETE FROM Vincicm_InventivaCRM.dbo.RetentionDifference WHERE RetentionDifferenceId=$id";

    return $vinci_rdsDB->exec($sql);	
}

function deleteExtraForConversion($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.conversion_extra WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function deleteConversionShiftManager($id)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.conversion_shift_managers WHERE id=$id";

    $result = $MainCoonDB->exec($sql);

    return $result;
}

function getRealScore($dpStart, $dpEnd, $desk, $employee)
{


    $DB_Connection = new DB_Connect();
	
	$commission_3d_list=array();
	
	$sql = "SELECT processor FROM MainCoon.commission_3d_list";
	
	$result = $DB_Connection->fetchAll($sql);
	foreach($result as $key=>$value){
		$commission_3d_list[]=$result[$key]['processor'];
	}
	$implode_3d_list = implode("','",$commission_3d_list);
	
    $sql = "SELECT transactions.employee,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalDeposit,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.clearedBy IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDeposit3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Wire',transactions.amountUSD,0)) AS totalDepositWire,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.paymentMethod<>'Wire' AND transactions.clearedBy NOT IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDepositNon3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonus,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalWithdrawal,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='chargeBack',transactions.amountUSD,0)) AS totalChargeBack,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonusWithdrawal,
       SUM(IF(transactions.paymentMethod='InactivityFee' OR transactions.paymentMethod='Fees',transactions.amountUSD,0)) AS totalFees,

       '' AS percent_3d,
       '' AS percent_wire,
       '' AS percent_non_3d,
       '' AS percent_bonus,
       '' AS percent_withdrawals

        FROM (SELECT  MainCoon.commission.depositId AS id,
		           hedgestonegroup_platform.customers.id AS customerId,
                   CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                   real_deposit.type,
                   real_deposit.paymentMethod AS paymentMethod,
                   real_deposit.currency AS currency,
                   TRUNCATE(real_deposit.amount*(MainCoon.commission.percent/100),2) AS amount,
		           TRUNCATE(real_deposit.amountUSD*(MainCoon.commission.percent/100),2) AS amountUSD,
                   real_deposit.confirmTime AS confirmTime,
                   DATE(real_deposit.confirmTime) AS confirmDate,
                   real_deposit.status AS status,
                   real_deposit.clearedBy AS clearedBy,
		           real_deposit.verification AS verification,
                   CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                   hedgestonegroup_platform.user_desks.deskId AS desk,
                   CONCAT('%',MainCoon.commission.percent) AS percentage,
		           ' ' AS split,
		           real_deposit.note AS note
            FROM
             (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
        RIGHT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
		LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
		LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission.receptionEmployeeId=hedgestonegroup_platform.users.id
		LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission.receptionEmployeeId
        WHERE real_deposit.customerId IS NOT NULL



                ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.commission.receptionEmployeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= "
                 UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		                hedgestonegroup_platform.customers.id AS customerId,
                        CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                        real_deposit.type AS type,
                        real_deposit.paymentMethod AS paymentMethod,
                        real_deposit.currency AS currency,
                        TRUNCATE(real_deposit.amount*((100-commission_split.percent)/100),2) AS amount,
		                TRUNCATE(real_deposit.amountUSD*((100-commission_split.percent)/100),2) AS amountUSD,
                        real_deposit.confirmTime AS confirmTime,
                        DATE(real_deposit.confirmTime) AS confirmDate,
                        real_deposit.status AS status,
                        real_deposit.clearedBy AS clearedBy,
		                real_deposit.verification AS verification,
                        CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                        hedgestonegroup_platform.user_desks.deskId AS desk,
                        CONCAT('%',(100-commission_split.percent)) AS percentage,
		                ' ' AS split,
		                real_deposit.note AS note
                FROM
                    (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
             INNER JOIN (SELECT depositId, SUM(percent) AS percent FROM MainCoon.commission
                                GROUP BY depositId) AS commission_split
							    ON real_deposit.id=commission_split.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
             LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
		     WHERE hedgestonegroup_platform.customers.isDemo=0";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }


    $sql .= "
                UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      real_deposit.type AS type,
                      real_deposit.paymentMethod AS paymentMethod,
                      real_deposit.currency AS currency,
                      TRUNCATE(real_deposit.amount,2) AS amount,
		              TRUNCATE(real_deposit.amountUSD,2) AS amountUSD,
                      real_deposit.confirmTime AS confirmTime,
                      DATE(real_deposit.confirmTime) AS confirmDate,
                      real_deposit.status AS status,
                      real_deposit.clearedBy AS clearedBy,
		              real_deposit.verification AS verification,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage,
		              ' ' AS split,
		              real_deposit.note AS note
             FROM
                 (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
        LEFT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
        LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
        LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
        LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
         WHERE MainCoon.commission.depositId IS NULL";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $sql .= " UNION ALL
	    SELECT        hedgestonegroup_platform.withdrawals.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      hedgestonegroup_platform.withdrawals.type AS type,
                      hedgestonegroup_platform.withdrawals.paymentMethod AS paymentMethod,
                      hedgestonegroup_platform.withdrawals.currency AS currency,
                      TRUNCATE(hedgestonegroup_platform.withdrawals.amount,2) AS amount,
		              TRUNCATE(hedgestonegroup_platform.withdrawals.amountUSD,2) AS amountUSD,
                      hedgestonegroup_platform.withdrawals.confirmTime AS confirmTime,
                      DATE(hedgestonegroup_platform.withdrawals.confirmTime) AS confirmDate,
                      hedgestonegroup_platform.withdrawals.status AS status,
                      hedgestonegroup_platform.withdrawals.clearedBy AS clearedBy,
		              hedgestonegroup_platform.customers.verification AS verification,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage,
		              ' ' AS split,
                      '' AS note
             FROM  hedgestonegroup_platform.withdrawals
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.withdrawals.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.withdrawals.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.withdrawals.receptionEmployeeId
             WHERE
               hedgestonegroup_platform.withdrawals.status='approved'
				   AND  hedgestonegroup_platform.users.department='retention'
				   AND hedgestonegroup_platform.customers.isDemo=0
				   AND hedgestonegroup_platform.withdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'

	            ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }


    $sql .= ") AS transactions
                 GROUP BY employee ;      ";

    $data = $DB_Connection->fetchAll($sql);
    
    return $data;


}

function getPositionsForRealPNL($expireStart,$expireEnd,$customerId){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = " SELECT onetouch_positions.id,
                    customers.id AS customerId,
                    CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                    assets.name AS assetName,
                    assets.type,
	                onetouch_positions.amount AS amount,
	                onetouch_positions.payout,
	                onetouch_positions.rate,
                    onetouch_positions.date AS date,
                    onetouch_options.endTradeTime AS endDate,
                    onetouch_positions.status,
                    'onetouch_positions' AS table_type,
                    'One Touch' AS product
             FROM onetouch_positions
             LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
             LEFT JOIN customers ON customers.id=onetouch_positions.customerId
             LEFT JOIN assets ON assets.id=onetouch_options.assetId
             WHERE onetouch_positions.status IN('won','lost','tie','sold')
             AND onetouch_options.endTradeTime BETWEEN '$expireStart 00:00:00' and '$expireEnd 23:59:59'
             AND customers.id=$customerId
             UNION ALL
             SELECT positions.id,
                    customers.id AS customerId,
                    CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                    assets.name as assetName,
                    assets.type,
                    positions.amount,
                    positions.payout,
                    positions.rate,
                    positions.date,
                    IF(positions.status='sold',IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate),positions.openddate) AS endDate,
                    positions.status,
                    'positions' AS table_type,
                    IF(options.sixtySeconds=1,'Sixty Seconds','Binary') AS product
             FROM positions
             LEFT JOIN customers ON customers.id=positions.customerId
             LEFT JOIN assets ON assets.id=positions.opassetId
             LEFT JOIN options ON options.id=positions.optionId
             WHERE ((positions.status IN('won','lost','tie') AND opendDate BETWEEN '$expireStart 00:00:00' AND '$expireEnd 23:59:59') OR
             (positions.status='sold' AND positions.lastUpdateDate BETWEEN '$expireStart 00:00:00' and '$expireEnd 23:59:59'))
             AND customers.id=$customerId
             UNION ALL
             SELECT ldo_positions.id,
                    customers.id AS customerId,
                    CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                    assets.name AS assetName,
                    assets.type,
                    ldo_positions.investment AS amount,
                    ldo_positions.payout,
                    ldo_positions.startRate AS rate,
                    ldo_positions.entryTime AS date,
                    IF(ldo_positions.status<>'sold',ldo_positions.endDate,ldo_positions.exitTime) AS endDate,
                    ldo_positions.status,
                    'ldo_positions' AS table_type,
                    'Ladder' as product
             FROM ldo_positions
             LEFT JOIN customers ON customers.id=ldo_positions.customerId
             LEFT JOIN assets ON assets.id=ldo_positions.assetId
             WHERE ((ldo_positions.status IN('won','lost','tie') AND endDate between '$expireStart 00:00:00' and '$expireEnd 23:59:59') OR
             (ldo_positions.status='sold' AND exitTime between '$expireStart 00:00:00' and '$expireEnd 23:59:59'))
			 AND customers.id=$customerId
             UNION ALL
             SELECT forex_positions.id,
                    customers.id AS customerId,
                    CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                    assets.name AS assetName,
                    assets.type,
                    forex_positions.investment AS amount,
                    forex_positions.payout,
                    forex_positions.startRate AS rate,
                    forex_positions.entryTime AS date,
                    forex_positions.exitTime AS endDate,
                    forex_positions.status,
                    'forex_positions' AS table_type,
                    'Forex' AS product
             FROM forex_positions
             LEFT JOIN customers on customers.id=forex_positions.customerId
             LEFT JOIN assets ON assets.id=forex_positions.assetId
             WHERE forex_positions.status IN('won','lost','tie','sold')
             AND exitTime BETWEEN '$expireStart 00:00:00' AND '$expireEnd 23:59:59'
             AND customers.id=$customerId
             ";
    $result = $TradingPlatformDB->fetchAll($sql);
    return $result;
}

function getRealPNLForRetention($pStart,$pEnd,$desk,$employee){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = "SELECT customers.id,
                   CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                   country.name AS country,
	               customers.currency,
	               TRUNCATE(IFNULL(pnl.pnl,0),2) AS pnl,
                   TRUNCATE(IFNULL(deposits.totalDeposits,0),2) AS deposit,
	               TRUNCATE(IFNULL(pre_deposits.totalDeposits,0),2) AS pre_deposit,
                   TRUNCATE(IFNULL(pre_pnl.pnl,0),2) AS pre_pnl,
                   TRUNCATE(IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0),2) AS end_pnl,
                   TRUNCATE(IF(IFNULL(deposits.totalDeposits,0)-(IFNULL(pnl.pnl,0)+IFNULL(pre_pnl.pnl,0))>0,
                               IFNULL(deposits.totalDeposits,0)-(IFNULL(pnl.pnl,0)+IFNULL(pre_pnl.pnl,0)),
                               0),
                               2) AS end_RAB,
                   TRUNCATE(IF(IFNULL(pre_deposits.totalDeposits,0)-IFNULL(pre_pnl.pnl,0)>0,
                               IFNULL(pre_deposits.totalDeposits,0)-IFNULL(pre_pnl.pnl,0),
                               0),
                               2) AS pre_RAB,
                   TRUNCATE(IF(IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0)>=IFNULL(deposits.totalDeposits,0),
                                IF(IFNULL(pre_pnl.pnl,0)>=IFNULL(pre_deposits.totalDeposits,0),
                                   IFNULL(deposits.totalDeposits,0)-IFNULL(pre_deposits.totalDeposits,0),
                                   IFNULL(deposits.totalDeposits,0)-IFNULL(pre_pnl.pnl,0)),
                                IF(IFNULL(pre_pnl.pnl,0)>=IFNULL(pre_deposits.totalDeposits,0),
                                   (IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0))-IFNULL(pre_deposits.totalDeposits,0),
                                   (IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0))-IFNULL(pre_pnl.pnl,0))),2) AS real_pnl,
                   CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
                   IF(pnl.customerId IS NOT NULL,'Positions','No Position') AS positions
                   FROM customers
                   LEFT JOIN (
                      SELECT trades.customerId, SUM(trades.pnl) AS pnl
                      FROM
                      (SELECT onetouch_positions.customerId AS customerId,
                              SUM(onetouch_positions.amount) AS amount,
                              SUM(onetouch_positions.payout) AS payout,
                              SUM(onetouch_positions.amount-payout) AS pnl
                      FROM onetouch_positions
                      LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                      LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                      LEFT JOIN users ON users.id=customers.employeeInChargeId
                      LEFT JOIN user_desks ON user_desks.userId=users.id
                      WHERE onetouch_positions.status IN('won','lost','tie','sold')
                      AND onetouch_options.endTradeTime BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'
                      AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                     # AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                      GROUP BY customerId
                      UNION ALL
                      SELECT positions.customerId,
                             SUM(positions.amount) AS amount,
                             SUM(payout) AS payout,
                             SUM(amount-payout) AS pnl
                      FROM positions
                      LEFT JOIN customers ON customers.id=positions.customerId
                      LEFT JOIN users ON users.id=customers.employeeInChargeId
                      LEFT JOIN user_desks ON user_desks.userId=users.id
                      WHERE ((positions.status IN('won','lost','tie') AND opendDate BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59') OR
                            (positions.status='sold' AND positions.lastUpdateDate BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'))
                            AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                         #   AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                      GROUP BY customerId
                      UNION ALL
                      SELECT ldo_positions.customerId,
                             SUM(ldo_positions.investment) AS amount,
                             SUM(ldo_positions.payout) AS payout,
                             SUM(ldo_positions.investment-payout) AS pnl
                      FROM ldo_positions
                      LEFT JOIN customers ON customers.id=ldo_positions.customerId
                      LEFT JOIN users ON users.id=customers.employeeInChargeId
                      LEFT JOIN user_desks ON user_desks.userId=users.id
                      WHERE ((ldo_positions.status IN('won','lost','tie') AND endDate between '$pStart 00:00:00' and '$pEnd 23:59:59') OR
                            (ldo_positions.status='sold' AND exitTime between '$pStart 00:00:00' and '$pEnd 23:59:59'))
                            AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                         #   AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                      GROUP BY customerId
                      UNION ALL
                      SELECT forex_positions.customerId,
                             SUM(forex_positions.investment) AS amount,
                             SUM(forex_positions.payout) AS payout,
                             SUM(investment-payout) AS pnl
                      FROM forex_positions
                      LEFT JOIN customers on customers.id=forex_positions.customerId
                      left join users on users.id=customers.employeeInChargeId
                      left join user_desks on user_desks.userId=users.id
                      WHERE forex_positions.status IN('won','lost','tie','sold')
                      AND exitTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
                      AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                    #  AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                      GROUP BY customerId) AS trades

                      GROUP by trades.customerId) AS pnl ON customers.id=pnl.customerId
                      LEFT JOIN users ON users.id=customers.employeeInChargeId
	                  LEFT JOIN user_desks ON user_desks.userId=customers.employeeInChargeId
	                  LEFT JOIN currencies ON currencies.code=customers.currency
                      LEFT JOIN country ON country.id=customers.Country
		              LEFT JOIN (SELECT customers.id,
		                                IFNULL((SELECT SUM(customer_deposits.amount)
                                                FROM customer_deposits
                                                WHERE customer_deposits.paymentMethod <> 'bonus'
                                                AND customer_deposits.status = 'approved'
                                                AND customer_deposits.confirmTime between customers.regTime and '$pEnd 23:59:59'
                                                AND customer_deposits.customerId = customers.id),0)
                                        -
                                        IFNULL((SELECT SUM(withdrawals.amount)
                                                FROM withdrawals
                                                WHERE withdrawals.paymentMethod <> 'bonus'
                                                AND withdrawals.status = 'approved'
                                                AND withdrawals.confirmTime between customers.regTime and '$pEnd 23:59:59'
                                                AND withdrawals.customerId = customers.id),0) AS totalDeposits
                                 FROM customers
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                               #  AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                                 ) AS deposits ON deposits.id=customers.id
                     LEFT JOIN (SELECT customers.id AS customerId,
					                    IFNULL((SELECT SUM(customer_deposits.amount)
                                                      FROM customer_deposits
                                               WHERE customer_deposits.paymentMethod <> 'bonus'
                                               AND customer_deposits.status = 'approved'
                                               AND customer_deposits.confirmTime>=customers.regTime AND customer_deposits.confirmTime<'$pStart 00:00:00'
                                               AND customer_deposits.customerId = customers.id),0)
                                       -
                                       IFNULL((SELECT SUM(withdrawals.amount)
                                                      FROM withdrawals
                                                WHERE withdrawals.paymentMethod <> 'bonus'
                                                AND withdrawals.status = 'approved'
                                                AND withdrawals.confirmTime>=customers.regTime AND withdrawals.confirmTime<'$pStart 00:00:00'
                                                AND withdrawals.customerId = customers.id),0) AS totalDeposits
                                 FROM customers
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                                 ) AS pre_deposits ON pre_deposits.customerId=customers.id
                     LEFT JOIN (SELECT trades.customerId,
                                       SUM(trades.pnl) AS pnl
                                FROM
                                (SELECT onetouch_positions.customerId AS customerId,
                                        SUM(onetouch_positions.amount) AS amount,
                                        SUM(onetouch_positions.payout) AS payout,
                                        SUM(onetouch_positions.amount-payout) AS pnl
                                 FROM onetouch_positions
                                 LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                                 LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE onetouch_positions.status IN('won','lost','tie','sold')
                                 AND onetouch_options.endTradeTime>=customers.regTime AND onetouch_options.endTradeTime<'$pStart 00:00:00'
                                 AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                              #   AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                                 GROUP BY customerId
                                 UNION ALL
                                 SELECT customerId,
                                        SUM(amount) AS amount,
                                        SUM(payout) AS payout,
                                        SUM(amount-payout) AS pnl
                                 FROM positions
                                 LEFT JOIN customers ON customers.id=positions.customerId
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE ((positions.status IN('won','lost','tie')
                                 AND opendDate>=customers.regTime AND opendDate<'$pStart 00:00:00') OR
                                 (positions.status='sold' AND positions.lastUpdateDate>=customers.regTime AND positions.lastUpdateDate<'$pStart 00:00:00'))
                                 AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                               #  AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                                 GROUP BY customerId
                                 UNION ALL
                                 SELECT customerId,
                                        SUM(investment) AS amount,
                                        SUM(payout) AS payout,
                                        SUM(investment-payout) AS pnl
                                 FROM ldo_positions
                                 LEFT JOIN customers ON customers.id=ldo_positions.customerId
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE ((ldo_positions.status IN('won','lost','tie')
                                 AND endDate>=customers.regTime AND endDate<'$pStart 00:00:00') OR
                                 (ldo_positions.status='sold' AND exitTime>=customers.regTime AND exitTime<'$pStart 00:00:00'))
                                 AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                              #   AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                                 GROUP BY customerId
                                 UNION ALL
                                 SELECT customerId,
                                        SUM(investment) AS amount,
                                        SUM(payout) AS payout,
                                        SUM(investment-payout) AS pnl
                                 FROM forex_positions
                                 LEFT JOIN customers ON customers.id=forex_positions.customerId
                                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                                 LEFT JOIN user_desks ON user_desks.userId=users.id
                                 WHERE forex_positions.status IN('won','lost','tie','sold')
                                 AND exitTime>customers.regTime AND exitTime<'$pStart 00:00:00'
                                 AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                              #   AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                                 GROUP BY customerId) AS trades
                                 GROUP BY trades.customerId) AS pre_pnl ON pre_pnl.customerId=customers.id
                     WHERE users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                     AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                     AND
                     (TRUNCATE(IF(IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0)>=IFNULL(deposits.totalDeposits,0),
                                IF(IFNULL(pre_pnl.pnl,0)>=IFNULL(pre_deposits.totalDeposits,0),
                                   IFNULL(deposits.totalDeposits,0)-IFNULL(pre_deposits.totalDeposits,0),
                                   IFNULL(deposits.totalDeposits,0)-IFNULL(pre_pnl.pnl,0)),
                                IF(IFNULL(pre_pnl.pnl,0)>=IFNULL(pre_deposits.totalDeposits,0),
                                   (IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0))-IFNULL(pre_deposits.totalDeposits,0),
                                   (IFNULL(pre_pnl.pnl,0)+IFNULL(pnl.pnl,0))-IFNULL(pre_pnl.pnl,0))),2)<>0.00 OR
                      pnl.pnl IS NOT NULL  OR
                      TRUNCATE(IFNULL(deposits.totalDeposits,0)-IFNULL(pre_deposits.totalDeposits,0),2)<>0.00)
                                   ";
    $results= $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getQuickPNL($dpStart, $dpEnd, $desk, $affiliate, $employee){
		
	$dbConnect = new DB_TradingPlatform();
	
	set_time_limit(0);
					   	
	$turnoverQuery = getTurnoverQuery($dpStart, $dpEnd, $desk, $affiliate, $employee);
	$pnlQuery = getPNLQuery($dpStart, $dpEnd, $desk, $affiliate, $employee);
	$openPositionQuery = getOpenPositionQuery($dpStart, $dpEnd, $desk, $affiliate, $employee);
	$depositQuery = getDepositQuery($dpStart, $dpEnd, $desk, $affiliate, $employee);
	
	$sql =" SELECT customers.id AS customerId,
                   CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                   country.name AS country,
	               customers.currency,
                   IFNULL(turnover.pre_turnover,0) AS pre_turnover,                       
                   IFNULL(deposit.pre_net_bonus,0) AS pre_net_bonus,
                   IFNULL(deposit.pre_net_deposit,0) AS pre_net_deposit,
                   IFNULL(pnl.pre_pnl,0) AS pre_pnl,
                   IFNULL(open_positions.end_open_positions,0) AS end_open_positions,
                   IFNULL(turnover.end_turnover,0) AS end_turnover,
	               IFNULL(deposit.end_net_bonus,0) AS end_net_bonus,
                   IFNULL(deposit.end_net_deposit,0) AS end_net_deposit,
                   IFNULL(pnl.end_pnl,0) AS end_pnl,
                   CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
                   customers.saleStatus
                   FROM customers
                   LEFT JOIN ( $openPositionQuery ) AS open_positions ON open_positions.customerId=customers.id
                   LEFT JOIN ( $turnoverQuery ) AS turnover ON turnover.customerId=customers.id      
                   LEFT JOIN ( $pnlQuery ) AS pnl ON customers.id=pnl.customerId
                   LEFT JOIN ( $depositQuery ) AS deposit ON customers.id=deposit.customerId
                   LEFT JOIN users ON users.id=customers.employeeInChargeId
	               LEFT JOIN user_desks ON user_desks.userId=customers.employeeInChargeId
	               LEFT JOIN campaigns ON campaigns.id= customers.campaignId
	               LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
	               LEFT JOIN currencies ON currencies.code=customers.currency
                   LEFT JOIN country ON country.id=customers.Country
                 WHERE customers.isDemo=0 ";
           if($desk){
              $sql .= "AND user_desks.deskId=$desk ";  	    
           }
		   if($employee){
              $sql .= "AND users.id=$employee ";  	    
           }      
           if($affiliate){
           	  $sql .= "AND IF((campaigns.id>=408 AND campaigns.id<>417) OR campaigns.id IN (322,323,324), 
                          campaigns.name, SUBSTRING_INDEX(sub_campaigns.param,'_',2))= '$affiliate' ";   
           }
              $sql .= "AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                       AND customers.firstDepositDate<='$dpEnd 23:59:59'
                       GROUP BY customerId";
	
	$result = $dbConnect->fetchAll($sql);
	
	foreach($result as $key=>$value){
		
		$pre_target_turnover = getTargetTurnover($result[$key]['pre_net_deposit'],$result[$key]['pre_net_bonus']);
		$pre_activated_bonus = getActivatedBonus($result[$key]['pre_net_bonus'],$pre_target_turnover,$result[$key]['pre_turnover']);
		$pre_real_money =  $result[$key]['pre_net_deposit'] + $pre_activated_bonus;
		$pre_real_pnl  = min($pre_real_money,$result[$key]['pre_pnl']); 
		
		$end_target_turnover = getTargetTurnover($result[$key]['end_net_deposit'],$result[$key]['end_net_bonus']);
		$end_activated_bonus = getActivatedBonus($result[$key]['end_net_bonus'],$end_target_turnover,$result[$key]['end_turnover']);
		$end_real_money =  $result[$key]['end_net_deposit'] + $end_activated_bonus;
		$end_real_pnl  = min($end_real_money,$result[$key]['end_pnl']);
		
	//	$result[$key]['activated_bonus'] = $end_activated_bonus - $pre_activated_bonus;
		$result[$key]['real_pnl'] = $end_real_pnl - $pre_real_pnl;
		$result[$key]['pnl'] = $result[$key]['end_pnl'] - $result[$key]['pre_pnl'];  
		$result[$key]['RAB'] = max($result[$key]['end_net_deposit']+$end_activated_bonus-$result[$key]['end_pnl'],0);
		$result[$key]['account_balance'] = $result[$key]['end_net_deposit']+ $result[$key]['end_net_bonus'] - $result[$key]['end_pnl'] - $result[$key]['end_open_positions']; 
	    $result[$key]['bonus_balance'] = $result[$key]['account_balance'] - $result[$key]['RAB'];
	    $result[$key]['turnover'] = $result[$key]['end_turnover'] - $result[$key]['pre_turnover'];
		$result[$key]['target_turnover'] = $end_target_turnover; 
		
		$results[$key]['real_pnl'] = number_format($results[$key]['real_pnl'], 2, ".", "");
		$results[$key]['pnl'] = number_format($results[$key]['pnl'], 2, ".", "");
		$results[$key]['RAB'] = number_format($results[$key]['RAB'], 2, ".", "");
		$results[$key]['account_balance'] = number_format($results[$key]['account_balance'], 2, ".", "");
		$results[$key]['bonus_balance'] = number_format($results[$key]['bonus_balance'], 2, ".", "");
		$results[$key]['turnover'] = number_format($results[$key]['turnover'], 2, ".", "");
		$results[$key]['target_turnover'] = number_format($results[$key]['target_turnover'], 2, ".", "");
		
		unset($result[$key]['pre_net_deposit'],
		      $result[$key]['end_net_deposit'],
		      $result[$key]['pre_net_bonus'],
		      $result[$key]['end_net_bonus'],
		      $result[$key]['pre_turnover'],
		      $result[$key]['end_open_positions'],
		      $result[$key]['pre_pnl'],
		      $result[$key]['end_pnl']
			  );
    }
	return $result; 
}

function getTargetTurnover($net_deposit,$net_bonus){
	if($net_bonus>0){
		if($net_deposit>0){
			$target_turnover = ($net_deposit + $net_bonus)*20;
		}else {
			$target_turnover = $net_bonus*40;
		}
	}else {
		$target_turnover = 0 ;
	}
	
	return $target_turnover;
}

function getActivatedBonus($net_bonus,$target_turnover,$turnover){
    if($net_bonus>0){
    	if($turnover>$target_turnover){
    		$activated_bonus = $net_bonus; 
    	}else {
    		$actived_bonus = 0;
    	}
    }else {
    	$activated_bonus = $net_bonus;
    }
	
	return $activated_bonus; 	
}

function getTurnoverQuery($dpStart, $dpEnd, $desk, $affiliate, $employee){
		
	$sql =" SELECT trades.customerId, 
	              ROUND(SUM(trades.pre_turnover),2) AS pre_turnover,
	              ROUND(SUM(trades.end_turnover),2) AS end_turnover
            FROM (SELECT onetouch_positions.customerId,
						 SUM(IF(onetouch_positions.date<'$dpStart 00:00:00',amount,0)) AS pre_turnover,
						 SUM(amount) AS end_turnover
                  FROM onetouch_positions
				  LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                  WHERE onetouch_positions.status<>'canceled'
                        AND onetouch_positions.date<='$dpEnd 23:59:59'
                        AND onetouch_positions.date>=customers.regTime
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
                   if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
                   }
				   if($employee){
               $sql .= "AND users.id=$employee ";  	    
                   }      
        $sql .= "GROUP BY customerId
                 UNION ALL
                 SELECT positions.customerId,
						SUM(IF(positions.date<'$dpStart 00:00:00',amount,0)) AS pre_turnover,
						SUM(amount) AS end_turnover
				 FROM positions
				 LEFT JOIN customers ON customers.id=positions.customerId
				 LEFT JOIN users ON users.id=customers.employeeInChargeId
                 LEFT JOIN user_desks ON user_desks.userId=users.id
                 LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				 WHERE positions.status<>'canceled'
					   AND positions.date<='$dpEnd 23:59:59'
                       AND positions.date>=customers.regTime
                       AND desk2.id IS NULL
                       AND customers.isDemo=0 ";
                  if($desk){
              $sql .= "AND user_desks.deskId=$desk ";  	    
                  }
				  if($employee){
              $sql .= "AND users.id=$employee ";  	    
                  }      
        $sql .= "GROUP BY customerId
                 UNION ALL
                 SELECT ldo_positions.customerId,
                        SUM(IF(startDate<'$dpStart 00:00:00',ldo_positions.investment,0)) AS pre_turnover,
                        SUM(ldo_positions.investment) AS end_turnover
				 FROM ldo_positions
				 LEFT JOIN customers ON customers.id=ldo_positions.customerId
				 LEFT JOIN users ON users.id=customers.employeeInChargeId
				 LEFT JOIN user_desks ON user_desks.userId=users.id
                 LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				 WHERE ldo_positions.status<>'canceled'
                       AND startDate<='$dpEnd 23:59:59'
                       AND startDate>=customers.regTime
                       AND desk2.id IS NULL
                       AND customers.isDemo=0 ";
                  if($desk){
              $sql .= "AND user_desks.deskId=$desk ";  	    
                  }
				  if($employee){
              $sql .= "AND users.id=$employee ";  	    
                  }      
        $sql .= "GROUP BY customerId
				 UNION ALL
                 SELECT forex_positions.customerId,
						SUM(IF(startDate<'$dpStart 00:00:00',forex_positions.investment,0)) AS pre_turnover,
						SUM(forex_positions.investment) AS end_turnover
                 FROM forex_positions
				 LEFT JOIN customers ON customers.id=forex_positions.customerId
				 LEFT JOIN users ON users.id=customers.employeeInChargeId
				 LEFT JOIN user_desks ON user_desks.userId=users.id
                 LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                 WHERE forex_positions.status<>'canceled'
                       AND startDate<='$dpEnd 23:59:59'
                       AND startDate>=customers.regTime
                       AND desk2.id IS NULL
                       AND customers.isDemo=0 ";
                  if($desk){
              $sql .= "AND user_desks.deskId=$desk ";  	    
                  }
				  if($employee){
              $sql .= "AND users.id=$employee ";  	    
                  }      
        $sql .= "GROUP BY customerId)  AS trades
            GROUP BY customerId";
		
	return $sql;	
}

function getPNLQuery($dpStart, $dpEnd, $desk, $affiliate, $employee){
		
		
	$sql = "SELECT trades.customerId, 
	               ROUND(SUM(trades.pre_pnl),2) AS pre_pnl,
	               ROUND(SUM(trades.end_pnl),2) AS end_pnl
            FROM
            (SELECT onetouch_positions.customerId AS customerId,
                    SUM(IF(onetouch_options.endTradeTime<'$dpStart 00:00:00',onetouch_positions.amount-onetouch_positions.payout,0)) AS pre_pnl,
                    SUM(onetouch_positions.amount-onetouch_positions.payout) AS end_pnl
             FROM onetouch_positions
             LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
             LEFT JOIN customers ON customers.id=onetouch_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
             WHERE onetouch_positions.status IN('won','lost','tie','sold')
                   AND onetouch_options.endTradeTime BETWEEN customers.regTime AND '$dpEnd 23:59:59'
                   AND desk2.id IS NULL 
                   AND customers.isDemo=0 ";
              if($desk){
         $sql .= " AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
         $sql .= " AND users.id=$employee ";  	    
              }      
   $sql .= " GROUP BY customerId
             UNION ALL
             SELECT positions.customerId,
                    SUM(IF(opendDate<'$dpStart 00:00:00',amount-payout,0)) AS pre_pnl,
                    SUM(amount-payout) AS end_pnl
             FROM positions
             LEFT JOIN customers ON customers.id=positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
             WHERE positions.status IN('won','lost','tie') 
                   AND opendDate BETWEEN customers.regTime AND '$dpEnd 23:59:59'
                   AND desk2.id IS NULL
                   AND customers.isDemo=0 ";
       if($desk){
         $sql .= " AND user_desks.deskId=$desk ";  	    
       }
	   if($employee){
         $sql .= " AND users.id=$employee ";  	    
       }      
   $sql .= " GROUP BY customerId
             UNION ALL
             SELECT positions.customerId,
                    SUM(IF(IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate)<'$dpStart 00:00:00',amount-payout,0)) AS pre_pnl,
                    SUM(amount-payout) AS end_pnl
             FROM positions
             LEFT JOIN customers ON customers.id=positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
             WHERE positions.status='sold' 
                   AND IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate) BETWEEN customers.regTime AND '$dpEnd 23:59:59'
                   AND desk2.id IS NULL
                   AND customers.isDemo=0 ";
              if($desk){
         $sql .= " AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
         $sql .= " AND users.id=$employee ";  	    
              }      
   $sql .= " GROUP BY customerId
             UNION ALL
             SELECT ldo_positions.customerId,
                    SUM(IF(IF(ldo_positions.status='sold',exitTime,endDate)<'$dpStart 00:00:00',ldo_positions.investment-payout,0)) AS pre_pnl,
                    SUM(ldo_positions.investment-payout) AS end_pnl
             FROM ldo_positions
             LEFT JOIN customers ON customers.id=ldo_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
             WHERE ((ldo_positions.status IN('won','lost','tie') AND endDate BETWEEN customers.regTime AND '$dpEnd 23:59:59') OR
                   (ldo_positions.status='sold' AND exitTime BETWEEN customers.regTime AND '$dpEnd 23:59:59'))
                   AND desk2.id IS NULL
                   AND customers.isDemo=0 ";
              if($desk){
         $sql .= " AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
         $sql .= " AND users.id=$employee ";  	    
              }      
   $sql .= " GROUP BY customerId
             UNION ALL
             SELECT forex_positions.customerId,
                    SUM(IF(exitTime<'$dpStart 00:00:00',investment-payout,0)) AS pre_pnl,
                    SUM(investment-payout) AS end_pnl
             FROM forex_positions
             LEFT JOIN customers on customers.id=forex_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
             WHERE forex_positions.status IN ('won','lost','tie','sold')
			       AND exitTime BETWEEN customers.regTime AND '$dpEnd 23:59:59'
			       AND desk2.id IS NULL
			       AND customers.isDemo=0 ";
              if($desk){
         $sql .= " AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
         $sql .= " AND users.id=$employee ";  	    
              }      
   $sql .= " GROUP BY customerId) AS trades

           GROUP by trades.customerId";
    return $sql;                  
}

function getOpenPositionQuery($dpStart, $dpEnd, $desk, $affiliate, $employee){
			
	$sql = "SELECT trades.customerId,
                   ROUND(SUM(amount),2) AS end_open_positions
            FROM (SELECT onetouch_positions.customerId,
				         SUM(amount) AS amount
                  FROM onetouch_positions
				  LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
				  LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                  WHERE onetouch_positions.status IN ('open','pending')
						AND onetouch_positions.date<='$dpEnd 23:59:59'
						AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT onetouch_positions.customerId,
						 SUM(amount) AS amount
                  FROM onetouch_positions
				  LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
				  LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                  WHERE onetouch_positions.status NOT IN ('canceled','open','pending')
                        AND onetouch_options.endTradeTime>'$dpEnd 23:59:59'
                        AND onetouch_positions.date<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT positions.customerId,
						 SUM(positions.amount) AS amount
				  FROM positions
				  LEFT JOIN customers ON customers.id=positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
                  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE positions.status IN('open','pending')
						AND positions.date<='$dpEnd 23:59:59'
						AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT positions.customerId,
						 SUM(positions.amount) AS amount
				  FROM positions
				  LEFT JOIN customers ON customers.id=positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
                  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE positions.status IN ('won','lost','tie') 
				        AND opendDate>'$dpEnd 23:59:59'
						AND positions.date<='$dpEnd 23:59:59'
						AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
				  SELECT positions.customerId,
						 SUM(positions.amount) AS amount       
				  FROM positions
				  LEFT JOIN customers ON customers.id=positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE positions.status='sold' 
				        AND IF(positions.exitTime<>'0000-00-00 00:00:00',positions.exitTime,positions.lastUpdateDate) >'$dpEnd 23:59:59'
                        AND positions.date<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT ldo_positions.customerId,
				         SUM(ldo_positions.investment) AS amount
				  FROM ldo_positions
				  LEFT JOIN customers ON customers.id=ldo_positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE ldo_positions.status IN ('open','pending') 
                        AND startDate<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT ldo_positions.customerId,
						 SUM(ldo_positions.investment) AS amount
				  FROM ldo_positions
				  LEFT JOIN customers ON customers.id=ldo_positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE ldo_positions.status IN ('won','lost','tie') 
                        AND endDate>'$dpEnd 23:59:59'
                        AND startDate<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT ldo_positions.customerId,
					     SUM(ldo_positions.investment) AS amount
				  FROM ldo_positions
				  LEFT JOIN customers ON customers.id=ldo_positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
				  WHERE ldo_positions.status IN ('sold') 
                        AND exitTime>'$dpEnd 23:59:59'
                        AND startDate<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT forex_positions.customerId,
						 SUM(forex_positions.investment) AS amount
                  FROM forex_positions
				  LEFT JOIN customers ON customers.id=forex_positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                  WHERE forex_positions.status IN ('open','pending')
                        AND startDate<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId
                  UNION ALL
                  SELECT forex_positions.customerId,
						 SUM(forex_positions.investment) AS amount
                  FROM forex_positions
				  LEFT JOIN customers ON customers.id=forex_positions.customerId
				  LEFT JOIN users ON users.id=customers.employeeInChargeId
				  LEFT JOIN user_desks ON user_desks.userId=users.id
                  LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
                  WHERE forex_positions.status IN ('won','lost','tie','sold')
                        AND exitTime>'$dpEnd 23:59:59'
                        AND startDate<='$dpEnd 23:59:59'
                        AND desk2.id IS NULL
                        AND customers.isDemo=0 ";
              if($desk){
               $sql .= "AND user_desks.deskId=$desk ";  	    
              }
			  if($employee){
               $sql .= "AND users.id=$employee ";  	    
              }      
         $sql .= "GROUP BY customerId) AS trades
              GROUP BY customerId";
   return $sql;           
}

function getDepositQuery($dpStart, $dpEnd, $desk, $affiliate, $employee){
		
    $sql = "SELECT customerId, 
                   SUM(pre_amount) AS pre_net_deposit,
                   SUM(pre_bonus) AS pre_net_bonus,
                   SUM(end_amount) AS end_net_deposit,
                   SUM(end_bonus) AS end_net_bonus
            FROM 
            (SELECT customerId,
	               SUM(IF(confirmTime<'$dpStart 00:00:00' AND paymentMethod<>'Bonus',amount,0)) AS pre_amount,
	               SUM(IF(confirmTime<'$dpStart 00:00:00' AND paymentMethod='Bonus',amount,0)) AS pre_bonus,
	               SUM(IF(paymentMethod<>'Bonus',amount,0)) AS end_amount,
	               SUM(IF(paymentMethod='Bonus',amount,0)) AS end_bonus
	        FROM customer_deposits
	        LEFT JOIN customers ON customers.id=customer_deposits.customerId
	        LEFT JOIN users ON users.id=customers.employeeInChargeId
	        LEFT JOIN user_desks ON user_desks.userId=users.id
	        LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
	        WHERE customer_deposits.status = 'approved'
	              AND confirmTime BETWEEN customers.regTime AND '$dpEnd 23:59:59'
	              AND desk2.id IS NULL
                  AND customers.isDemo=0 ";
      if($desk){
         $sql .= "AND user_desks.deskId=$desk ";  	    
      }
	  if($employee){
         $sql .= "AND users.id=$employee ";  	    
      }      
   $sql .= "GROUP BY customerId
            UNION ALL
            SELECT customerId,
	               SUM(IF(confirmTime<'$dpStart 00:00:00' AND paymentMethod<>'Bonus',-amount,0)) AS pre_amount,
	               SUM(IF(confirmTime<'$dpStart 00:00:00' AND paymentMethod='Bonus',-amount,0)) AS pre_bonus,
	               SUM(IF(paymentMethod<>'Bonus',-amount,0)) AS end_amount,
	               SUM(IF(paymentMethod='Bonus',-amount,0)) AS end_bonus
	        FROM withdrawals
	        LEFT JOIN customers ON customers.id=withdrawals.customerId
	        LEFT JOIN users ON users.id=customers.employeeInChargeId
	        LEFT JOIN user_desks ON user_desks.userId=users.id
	        LEFT JOIN user_desks AS desk2 ON desk2.userId=users.id AND desk2.id>user_desks.id
	        WHERE withdrawals.status = 'approved'
	              AND confirmTime BETWEEN customers.regTime AND '$dpEnd 23:59:59'
	              AND desk2.id IS NULL
                  AND customers.isDemo=0 ";
      if($desk){
         $sql .= "AND user_desks.deskId=$desk ";  	    
      }
	  if($employee){
         $sql .= "AND users.id=$employee ";
      }   
   $sql .= "GROUP BY customerId) AS totals
       GROUP BY customerId";  
       
   return $sql;     
                  
}

function onlyFTDs($dpStart, $dpEnd, $desk, $employee, $onlyRetention)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customer_deposits.customerId,
                  customer_deposits.paymentMethod,
		          customer_deposits.clearedBy,
                  customer_deposits.status,
                  customer_deposits.type,
                  customer_deposits.amountUSD,
                  IF(customers.FirstName LIKE '%clos%','YES','NO') AS closed,
                  COALESCE(user_desks.deskId,1) AS desk
            FROM customer_deposits
            LEFT JOIN customers ON customers.id=customer_deposits.customerId
            LEFT JOIN users ON users.id=customers.employeeInChargeId
            LEFT JOIN user_desks ON user_desks.userId=customers.employeeInChargeId
            WHERE customer_deposits.status='approved'
		        AND customers.firstDepositDate=customer_deposits.confirmTime
                AND customers.firstDepositDate BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                AND customers.isDemo=0";
    if ($onlyRetention) {
        $sql .= "  AND users.department='retention'";
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " HAVING desk = " . $desk;
    }
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function changeTradeStatus($customerId, $new_tradeStatus)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "UPDATE MainCoon.customer_trade_status
	 	               SET MainCoon.customer_trade_status.status='" . $new_tradeStatus . "'
	 	               WHERE MainCoon.customer_trade_status.customerId=" . $customerId;
    if ($MainCoonDB->AffectedRows($sql) == 0) {
        $sql = "INSERT INTO MainCoon.customer_trade_status (customerId,status) values ($customerId, '" . $new_tradeStatus . "')";
    }


    $result = $MainCoonDB->exec($sql);


    return $result;


}

function deleteTradeStatus($customerId)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.customer_trade_status WHERE MainCoon.customer_trade_status.customerId=" . $customerId;

    $result = $MainCoonDB->AffectedRows($sql);


    return $result;


}

function addComment($customerId, $comment)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $sql = "INSERT INTO MainCoon.customer_comments (customerId,comment) values ($customerId, '" . $userName . ": " . $comment . "')";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function deleteComment($customerId)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.customer_comments WHERE MainCoon.customer_comments.customerId=" . $customerId;

    $result = $MainCoonDB->AffectedRows($sql);


    return $result;


}

function addRetentionWithdrawalsTable($post){

    $MainCoonDB= new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $sql = "SELECT id,
		               month,
		               customerId,
		               currency,
		               amount
		               FROM monthly_withdrawals
		               WHERE month='{$post['month']}-01'
		                     AND customerId={$post['customerId']}";
    $monthly_withdrawal=$MainCoonDB->fetchAll($sql);
    if(isset($monthly_withdrawal[0])){
        $id=$monthly_withdrawal[0]['id'];
        if($monthly_withdrawal[0]['currency']!=$post['currency'] || $monthly_withdrawal[0]['amount']!=$post['amount']){
            $sql = "UPDATE monthly_withdrawals
			               SET currency='{$post['currency']}' , amount={$post['amount']} , userName='$userName'
			               WHERE id=$id";
            $MainCoonDB->exec($sql);
        }
        $sql= "DELETE FROM retention_withdrawals
			              WHERE monthlyWithdrawalId=$id";
        $MainCoonDB->exec($sql);
    }else{
        $sql = "INSERT INTO monthly_withdrawals (month,customerId,currency,amount,userName) VALUES ('{$post['month']}-01',{$post['customerId']},'{$post['currency']}',{$post['amount']},'$userName')";
        $id=$MainCoonDB->execID($sql);
    }
    for($i=1;$i<=10;$i++){
        if(!(array_key_exists('withdrawal_employeeId_'.$i,$post))){
            break;
        }
        $sql = "INSERT INTO MainCoon.retention_withdrawals (monthlyWithdrawalId,employeeId,date,type,amount,userName)
	                     values ($id,{$post['withdrawal_employeeId_'.$i]},'{$post['withdrawal_date_'.$i]}','{$post['withdrawal_type_'.$i]}',{$post['withdrawal_amount_'.$i]},'$userName')";
        $MainCoonDB->exec($sql);
    }

    return true;
}

function deleteAgentWithdrawals($customerId,$month){
    $MainCoonDB= new MySqlDriver();
    $sql= "SELECT id
	          FROM monthly_withdrawals
	           WHERE customerId=$customerId
	                 AND month='{$month}-01'";
    $id=$MainCoonDB->fetchAll($sql);
    if(!isset($id[0]))
        return "The withdrawal is not added";
    $id=$id[0]['id'];
    $sql= "DELETE FROM monthly_withdrawals
	              WHERE id=$id ";
    $MainCoonDB->exec($sql);
    $sql= "DELETE FROM retention_withdrawals
                  WHERE monthlyWithdrawalId=$id";
    $MainCoonDB->exec($sql);
    return true;

}

function addTargetForConversion($week,$month,$target,$employee)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "UPDATE MainCoon.conversion_targets
	 	               SET MainCoon.conversion_targets.target=$target
	 	               WHERE MainCoon.conversion_targets.week=$week
	 	                    AND MainCoon.conversion_targets.month='{$month}-01'
	 	                    AND MainCoon.conversion_targets.employeeId=$employee";
    if ($MainCoonDB->AffectedRows($sql) == 0) {
        $sql = "INSERT INTO MainCoon.conversion_targets (week,month,employeeId,target) values ($week,'{$month}-01',$employee,$target)";
    }

    $result = $MainCoonDB->exec($sql);
    return $result;
}

function changeWeeklyBonusForConversion($post)
{

    $MainCoonDB = new MySqlDriver();
    $sql = "DELETE FROM MainCoon.conversion_weekly_bonus
	                   WHERE MainCoon.conversion_weekly_bonus.week={$post['chosen_week']}
	                       AND MainCoon.conversion_weekly_bonus.month='{$post['dpStart']}'
	                   ";
    $MainCoonDB->exec($sql);
    for ($i = 1; $i <= 5; $i++) {
        if (!(array_key_exists('week_employeeId_' . $i, $post))) {
            break;
        }
        $sql = "INSERT INTO MainCoon.conversion_weekly_bonus (week,month,employeeId,place,amount)
	                     values ({$post['chosen_week']},'{$post['dpStart']}',{$post['week_employeeId_'.$i]},{$post['week_place_'.$i]},{$post['week_amount_'.$i]})";
        $MainCoonDB->exec($sql);
    }

    return true;
}

function deleteTargetForConversion($week, $month, $employee)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "DELETE FROM MainCoon.conversion_targets
	 	               WHERE MainCoon.conversion_targets.week=$week
	 	                   AND MainCoon.conversion_targets.month='{$month}-01'
	 	                   AND MainCoon.conversion_targets.employeeId=$employee";

    $result = $MainCoonDB->exec($sql);
    return $result;
}

function addWeeksForConversion($week_1, $week_2, $week_3, $week_4, $wStart)
{

    $MainCoonDB = new MySqlDriver();
    $days = getConversionWeeks($wStart);

    $firstday_week_1 = date('Y-m-01', strtotime($week_1));
    for($i=2;$i<=4;$i++){
        ${'firstday_week_'.$i} = ${'week_'.($i-1)};
    }

    for($i=1;$i<=4;$i++){
        foreach($days as $key => $value){
            if($days[$key]['week']==$i && $days[$key]['firstDayofWeek']==${'firstday_week_'.$i} && $days[$key]['lastDayofWeek']==${'week_'.$i}){
                $result[$i]=${'week_'.$i}.' is not changed';
                continue 2;
            }
        }
        $sql = "UPDATE MainCoon.conversion_weeks
	 	               SET MainCoon.conversion_weeks.lastDayofWeek='".${'week_'.$i}. "', MainCoon.conversion_weeks.firstDayofWeek='".${'firstday_week_'.$i}. "'
	 	               WHERE MainCoon.conversion_weeks.week=$i
	 	                     AND MainCoon.conversion_weeks.month='{$wStart}'";
        if($MainCoonDB->AffectedRows($sql)==0){
            $sql = "INSERT INTO MainCoon.conversion_weeks (week,firstDayofWeek,lastDayofWeek,month) values ($i,'".${'firstday_week_'.$i}. "','".${'week_'.$i}."','{$wStart}')";

        }
        $MainCoonDB->execID($sql);
        $result[$i]='Week '.$i.' is changed to '.${'week_'.$i};
    }

    return $result;


}

function addConversionShiftManager($dpMonth, $employee, $userId)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT * FROM conversion_shift_managers
            WHERE DATE_FORMAT(MainCoon.conversion_shift_managers.month,'%Y-%m')='$dpMonth'
            AND employeeId=$employee";
    $result = $MainCoonDB->fetchAll($sql);
    if($result)
        return 'Already Manager';
    $sql = "INSERT INTO conversion_shift_managers (employeeId,month,addUserId) VALUES ($employee,'{$dpMonth}-01',$userId)";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function addShiftFTDsForConversion($date, $ftd, $employee, $type)
{
    $MainCoonDB = new MySqlDriver();
	$userId = $_SESSION['userdata']['id'];
    $sql = "SELECT * FROM conversion_shift_ftds
            WHERE conversion_shift_ftds.date='$date'
            AND employeeId=$employee";
    $result = $MainCoonDB->fetchAll($sql);
	
    if($result){
        if($result[0]['ftds']==$ftd && $result[0]['type']==$type){    
          return 'The Shift is already set';
		}	
		else{
		  $sql = "UPDATE conversion_shift_ftds SET ftds=$ftd, type='$type', addUserId=$userId WHERE id={$result[0]['id']}";
		  $result = $MainCoonDB->exec($sql);
		  return 'The Shift is updated';	
		}
    }	 
	
    $sql = "INSERT INTO MainCoon.conversion_shift_ftds (employeeId,date,ftds,type,addUserId) VALUES ($employee,'$date',$ftd,'$type',$userId)";
    $result = $MainCoonDB->exec($sql); 
    return $result;
}

function deleteShiftFTDsForConversion($id){
	$MainCoonDB = new MySqlDriver();
	
	$sql = "DELETE FROM conversion_shift_ftds WHERE id=$id";
	$result = $MainCoonDB->exec($sql); 
	return $result;
}

function getShiftFTDsForConversion($dpMonth)
{
    $MainCoonDB = new MySqlDriver();
	
    $sql = "SELECT csf.id,
                   spotUser.id AS employeeId,
                   CONCAT(spotUser.firstName,' ',spotUser.lastName) AS employeeName,
                   csf.ftds,
                   csf.type,
                   nsUser.username AS addUser,
                   csf.date  
            FROM MainCoon.conversion_shift_ftds as csf
            LEFT JOIN hedgestonegroup_platform.users AS spotUser ON spotUser.id=csf.employeeId
            LEFT JOIN MainCoon.users AS nsUser ON nsUser.id=csf.addUserId
            WHERE DATE_FORMAT(csf.date,'%Y-%m')='$dpMonth'";
			
    $result = $MainCoonDB->fetchAll($sql);
    
    return $result;
}    

function getOpenPositionsForStatus($customerId)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = " SELECT onetouch_positions.customerId,
                    assets.name,
                    onetouch_positions.date as startDate,
                    onetouch_options.endTradeTime as endDate,
					TRUNCATE(onetouch_positions.rate,5) AS rate,
                    onetouch_positions.status,
                    onetouch_options.direction,
                    TRUNCATE(onetouch_positions.amountUSD,4) AS amountUSD
                   FROM onetouch_positions
                   LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                   LEFT JOIN assets ON assets.id=onetouch_options.assetId
                   WHERE onetouch_positions.status='open'
                    AND onetouch_positions.customerId=$customerId

             UNION ALL
             SELECT positions.customerId,
                    assets.name,
                    positions.date as startDate,
                    positions.opendDate as endDate,
                    TRUNCATE(positions.rate,5) AS rate,
                    positions.status,
                    positions.position AS direction,
                    TRUNCATE(positions.amountUSD,4) AS amountUSD
                   FROM positions
                   LEFT JOIN assets ON assets.id=positions.opassetId
                   WHERE positions.status='open'
                    AND positions.customerId=$customerId
             UNION ALL
             SELECT ldo_positions.customerId,
                     assets.name,
                     ldo_positions.entryTime as startDate,
                     ldo_positions.endDate as endDate,
                     TRUNCATE(ldo_positions.startRate,5) as rate,
                     ldo_positions.status,
                     ldo_positions.direction,
                     TRUNCATE(ldo_positions.investmentUSD,4) AS amountUSD
                   FROM ldo_positions
                   LEFT JOIN assets ON assets.id=ldo_positions.assetId
                   WHERE ldo_positions.status='open'
                       AND ldo_positions.customerId=$customerId
             UNION ALL
             SELECT forex_positions.customerId,
                    assets.name,
					forex_positions.entryTime as startDate,
					forex_positions.endDate as endDate,
					TRUNCATE(forex_positions.startRate,5) as rate,
                    forex_positions.status,
                    forex_positions.direction,
                    TRUNCATE(forex_positions.investmentUSD,4) AS amountUSD
                   FROM  forex_positions
                    LEFT JOIN assets ON assets.id=forex_positions.assetId
                   WHERE forex_positions.status='open'
                     AND forex_positions.customerId=$customerId

                   ";
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;

}

function getPendingWithdrawals($customerId)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = " SELECT withdrawals.id,
	              customers.id AS customerId,
	              CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	              customers.currency,
	              withdrawals.amount,
	              withdrawals.amountUSD,
	              withdrawals.status,
	              withdrawals.requestTime,
	              CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS transactionEmployee
	              FROM withdrawals
	              LEFT JOIN customers ON customers.id=withdrawals.customerId
	              LEFT JOIN users ON users.id=withdrawals.receptionEmployeeId
	              WHERE withdrawals.status='pending'
	                   AND customers.id=$customerId


                   ";
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;

}

function getTradeStatus($RAB_from, $RAB_to, $regStatus, $tradeStatus, $countries, $excludeCountries, $desk, $employee, $verification, $customerId, $zeroRAB)
{
    $DB_Connection = new DB_Connect();
    set_time_limit(0);
    
    $sql = "
	         SELECT hedgestonegroup_platform.customers.id,
                   CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                   hedgestonegroup_platform.country.name AS Country,
                   hedgestonegroup_platform.currencies.code AS Currency,
                   TRUNCATE((IFNULL(hedgestonegroup_platform.customer_balance.lastBalance,0)
    			         +
    			         IFNULL(cbd.amount,0))*hedgestonegroup_platform.currencies.rate,2) AS AccountBalanceUSD,
                   TRUNCATE(   ( IF(IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
                                   FROM hedgestonegroup_platform.customer_deposits
                                   WHERE hedgestonegroup_platform.customer_deposits.paymentMethod <> 'bonus'
                                   AND hedgestonegroup_platform.customer_deposits.status = 'approved'
                                   AND hedgestonegroup_platform.customer_deposits.customerId = hedgestonegroup_platform.customers.id),0)
                                   -
                                IFNULL((SELECT SUM(withdrawals2.amount)
                                FROM hedgestonegroup_platform.withdrawals AS withdrawals2
                                WHERE withdrawals2.paymentMethod <> 'bonus'
                                AND withdrawals2.status = 'approved'
                                AND withdrawals2.customerId = hedgestonegroup_platform.customers.id),0)
                                  -
                                hedgestonegroup_platform.customer_balance.pnl >=0,
                                IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
                                FROM hedgestonegroup_platform.customer_deposits
                                WHERE hedgestonegroup_platform.customer_deposits.paymentMethod <> 'bonus'
                                AND hedgestonegroup_platform.customer_deposits.status = 'approved'
                                AND hedgestonegroup_platform.customer_deposits.customerId = hedgestonegroup_platform.customers.id),0)
                                 -
                                IFNULL((SELECT SUM(withdrawals2.amount)
                                FROM hedgestonegroup_platform.withdrawals AS withdrawals2
                                WHERE withdrawals2.paymentMethod <> 'bonus'
                                AND withdrawals2.status = 'approved'
                                AND withdrawals2.customerId = hedgestonegroup_platform.customers.id),0)
                                 -
                                hedgestonegroup_platform.customer_balance.pnl, 0))*hedgestonegroup_platform.currencies.rate,2) AS realAccountBalanceUSD,

               TRUNCATE((IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
			                     FROM hedgestonegroup_platform.customer_deposits
			                     WHERE hedgestonegroup_platform.customer_deposits.status='approved'
			                     AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
			                     AND hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id),0)
			             -
			            IFNULL((SELECT SUM(hedgestonegroup_platform.withdrawals.amount)
			                    FROM hedgestonegroup_platform.withdrawals
			                    WHERE hedgestonegroup_platform.withdrawals.status='approved'
			                    AND hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
			                    AND hedgestonegroup_platform.withdrawals.customerId=hedgestonegroup_platform.customers.id
					            ),0))*hedgestonegroup_platform.currencies.rate,2) AS totalDepositUSD,
			   TRUNCATE((IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
			                     FROM hedgestonegroup_platform.customer_deposits
			                     WHERE hedgestonegroup_platform.customer_deposits.status='approved'
			                     AND hedgestonegroup_platform.customer_deposits.paymentMethod='Bonus'
			                     AND hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id),0)
			             -
			            IFNULL((SELECT SUM(hedgestonegroup_platform.withdrawals.amount)
			                    FROM hedgestonegroup_platform.withdrawals
			                    WHERE hedgestonegroup_platform.withdrawals.status='approved'
			                    AND hedgestonegroup_platform.withdrawals.paymentMethod='Bonus'
			                    AND hedgestonegroup_platform.withdrawals.customerId=hedgestonegroup_platform.customers.id
					            ),0))*hedgestonegroup_platform.currencies.rate,2) AS totalBonusUSD,
               CONCAT(hedgestonegroup_platform.users.id, ' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS CurrentEmployee,
               hedgestonegroup_platform.customers.regStatus,
               hedgestonegroup_platform.customers.verification,
               hedgestonegroup_platform.customers.regTime as registrationDate,
               IFNULL(MAX(hedgestonegroup_platform.customer_login_log.dateLogin),'0000-00-00 00:00:00') AS lastLoginDate,
               IFNULL(lastNote.createDate,'0000-00-00 00:00:00') AS lastNoteDate,
               IF(lastNote.createDate IS NULL,'No Note',IF(DATEDIFF(CURDATE(),DATE(lastNote.createDate))>=7,CONCAT(DATEDIFF(CURDATE(),DATE(lastNote.createDate)),' Days No Note'),0)) AS today_lastNoteDate,
               IF(open_positions.customerId IS NOT NULL,'Open Positions','') AS openPositions,
               IF((SELECT hedgestonegroup_platform.withdrawals.customerId FROM hedgestonegroup_platform.withdrawals
			           WHERE hedgestonegroup_platform.withdrawals.status='pending'
			               AND hedgestonegroup_platform.withdrawals.customerId=hedgestonegroup_platform.customers.id
						   GROUP BY hedgestonegroup_platform.withdrawals.customerId) IS NOT NULL,'pending','') AS pendingWithdrawals,
               IF(MainCoon.customer_trade_status.id IS NOT NULL,MainCoon.customer_trade_status.status,
               IF(CURDATE()-DATE(hedgestonegroup_platform.customers.regTime)<=6,'Fresh',IF(open_positions.customerId IS NOT NULL,'Open Positions','Regular'))
               ) AS tradeStatus,
               IFNULL((SELECT MainCoon.customer_comments.comment
                             FROM MainCoon.customer_comments
                             WHERE MainCoon.customer_comments.customerId=hedgestonegroup_platform.customers.id
                             ORDER BY MainCoon.customer_comments.date DESC
                             LIMIT 1),'') AS comment,
               IFNULL((SELECT MAX(MainCoon.customer_comments.date)
                             FROM MainCoon.customer_comments
                             WHERE MainCoon.customer_comments.customerId=hedgestonegroup_platform.customers.id),'0000-00-00 00:00:00') AS commentDate,
               '' AS addComment,
              (SELECT COUNT(MainCoon.retention_trade_sessions.id)
			           FROM MainCoon.retention_trade_sessions
			           WHERE MainCoon.retention_trade_sessions.customerId=hedgestonegroup_platform.customers.id
						 ) AS session,
			   (SELECT MainCoon.retention_trade_sessions.status
			           FROM MainCoon.retention_trade_sessions
					   WHERE MainCoon.retention_trade_sessions.customerId=hedgestonegroup_platform.customers.id
					   ORDER BY MainCoon.retention_trade_sessions.startTime DESC
					   LIMIT 1) AS session_status
              FROM hedgestonegroup_platform.customers
              LEFT JOIN hedgestonegroup_platform.currencies ON hedgestonegroup_platform.customers.currency= hedgestonegroup_platform.currencies.code
              LEFT JOIN hedgestonegroup_platform.country ON hedgestonegroup_platform.customers.country=hedgestonegroup_platform.country.id
              LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customers.employeeInChargeId=hedgestonegroup_platform.users.id
              LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.customers.employeeInChargeId= hedgestonegroup_platform.user_desks.userId
              LEFT JOIN hedgestonegroup_platform.customer_balance ON hedgestonegroup_platform.customer_balance.customerId = hedgestonegroup_platform.customers.id
              LEFT JOIN
    				(SELECT customerId, 
    				        SUM(amount) AS amount
    				 FROM hedgestonegroup_platform.customer_balance_daily
					 GROUP BY customerId
					 ) AS cbd ON hedgestonegroup_platform.customers.id = cbd.customerId
              LEFT JOIN hedgestonegroup_platform.customer_login_log ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_login_log.customerId
              LEFT JOIN MainCoon.customer_trade_status ON MainCoon.customer_trade_status.customerId=hedgestonegroup_platform.customers.id
             # LEFT JOIN MainCoon.customer_comments ON MainCoon.customer_comments.customerId=hedgestonegroup_platform.customers.id
              LEFT JOIN ( SELECT open_positions.customerId
                         FROM
                         (SELECT hedgestonegroup_platform.onetouch_positions.customerId
                              FROM hedgestonegroup_platform.onetouch_positions
                              WHERE hedgestonegroup_platform.onetouch_positions.status='open'
                         UNION ALL
                          SELECT hedgestonegroup_platform.positions.customerId
                              FROM hedgestonegroup_platform.positions
                              WHERE hedgestonegroup_platform.positions.status='open'
                         UNION ALL
                         SELECT hedgestonegroup_platform.ldo_positions.customerId
                             FROM hedgestonegroup_platform.ldo_positions
                             WHERE hedgestonegroup_platform.ldo_positions.status='open'
                         UNION ALL
                         SELECT hedgestonegroup_platform.forex_positions.customerId
                             FROM hedgestonegroup_platform.forex_positions
                             WHERE hedgestonegroup_platform.forex_positions.status='open') AS open_positions
                         GROUP BY open_positions.customerId) AS open_positions ON open_positions.customerId=hedgestonegroup_platform.customers.id
              LEFT JOIN ( SELECT hedgestonegroup_platform.customer_communications.customerId,
			                    MAX(hedgestonegroup_platform.customer_communications.createDate) AS createDate
								FROM hedgestonegroup_platform.customer_communications
								LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=hedgestonegroup_platform.customer_communications.creatorId
								WHERE  hedgestonegroup_platform.users.department<>'backOffice'
						        GROUP BY customerId ) AS lastNote ON lastNote.customerId=hedgestonegroup_platform.customers.id
            WHERE hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.FirstName NOT LIKE '%clos%'
            AND hedgestonegroup_platform.customers.isDemo=0
           AND  TRUNCATE(IF(IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
                                   FROM hedgestonegroup_platform.customer_deposits
                                   WHERE hedgestonegroup_platform.customer_deposits.paymentMethod <> 'bonus'
                                   AND hedgestonegroup_platform.customer_deposits.status = 'approved'
                                   AND hedgestonegroup_platform.customer_deposits.customerId = hedgestonegroup_platform.customers.id),0)
                                   -
                                IFNULL((SELECT SUM(withdrawals2.amount)
                                FROM hedgestonegroup_platform.withdrawals AS withdrawals2
                                WHERE withdrawals2.paymentMethod <> 'bonus'
                                AND withdrawals2.status = 'approved'
                                AND withdrawals2.customerId = hedgestonegroup_platform.customers.id),0)
                                  -
                                hedgestonegroup_platform.customer_balance.pnl >=0,
                                IFNULL((SELECT SUM(hedgestonegroup_platform.customer_deposits.amount)
                                FROM hedgestonegroup_platform.customer_deposits
                                WHERE hedgestonegroup_platform.customer_deposits.paymentMethod <> 'bonus'
                                AND hedgestonegroup_platform.customer_deposits.status = 'approved'
                                AND hedgestonegroup_platform.customer_deposits.customerId = hedgestonegroup_platform.customers.id),0)
                                 -
                                IFNULL((SELECT SUM(withdrawals2.amount)
                                FROM hedgestonegroup_platform.withdrawals AS withdrawals2
                                WHERE withdrawals2.paymentMethod <> 'bonus'
                                AND withdrawals2.status = 'approved'
                                AND withdrawals2.customerId = hedgestonegroup_platform.customers.id),0)
                                 -
                                hedgestonegroup_platform.customer_balance.pnl, 0)*hedgestonegroup_platform.currencies.rate,2) ";
    if ($RAB_from) {
        if ($RAB_to) {
            $sql .= " BETWEEN " . $RAB_from . " AND " . $RAB_to;

        } else {
            $sql .= " >= " . $RAB_from;
        }

    } else {
        if ($RAB_to) {
            $sql .= $zeroRAB ? " <= $RAB_to" : " BETWEEN 0.01 AND $RAB_to ";

        } else {
            $sql .= $zeroRAB ? " >= 0 " : " > 0";
        }
    }

    if ($customerId) {
        $sql .= " AND hedgestonegroup_platform.customers.id=$customerId";
    }
    if ($regStatus) {
        $sql .= " AND hedgestonegroup_platform.customers.regStatus IN ('" . implode("','", $regStatus) . "')";
    }
    if ($countries) {
        $sql .= " AND hedgestonegroup_platform.country.name IN ('" . implode("','", $countries) . "') ";
    }
    if ($excludeCountries) {
        $sql .= " AND hedgestonegroup_platform.country.name NOT IN ('" . implode("','", $excludeCountries) . "') ";
    }
    if ($desk != 0) {
        $sql .= "  AND hedgestonegroup_platform.user_desks.deskId=" . $desk;
    }
    if ($employee) {
        $sql .= " AND hedgestonegroup_platform.users.id IN ('" . implode("','", $employee) . "')";

    }
	if ($verification) {
        $sql .= " AND hedgestonegroup_platform.customers.verification IN ('" . implode("','", $verification) . "')";
    }
	
    $sql .= " GROUP BY hedgestonegroup_platform.customers.id";

    if ($tradeStatus) {
        $sql .= " HAVING tradeStatus IN ('" . implode("','", $tradeStatus) . "')";

    }
	
    $data = $DB_Connection->fetchAll($sql);
	
    return $data;

}


function getScore($dpStart, $dpEnd, $last_dpStart, $last_dpEnd, $last_2_dpStart, $last_2_dpEnd, $desk, $employee)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();
    $this_sunday = date("Y-m-d", strtotime("sunday last week"));
    $this_saturday = date("Y-m-d", strtotime("saturday this week"));
    $sql = "SELECT CONCAT(users.id,' - ',users.firstName,' ',users.lastName) as employee,
             SUM(IF(customer_deposits.confirmTime BETWEEN '" . $last_2_dpStart . " 00:00:00' AND '" . $last_2_dpEnd . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0)) as last2Deposits,
             SUM(IF(customer_deposits.confirmTime BETWEEN '" . $last_dpStart . " 00:00:00' AND '" . $last_dpEnd . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0)) as lastDeposits,
             SUM(IF(customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0)) as currentDeposits,
             SUM(IF(customer_deposits.confirmTime BETWEEN '" . $last_dpStart . " 00:00:00' AND '" . $last_dpEnd . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0))*1.1 as targetDeposits,
             TRUNCATE(SUM(IF(customer_deposits.confirmTime BETWEEN '" . $last_dpStart . " 00:00:00' AND '" . $last_dpEnd . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0))/4,2) as weeklyTarget,
             SUM(IF(customer_deposits.confirmTime BETWEEN '" . $this_sunday . " 00:00:00' AND '" . $this_saturday . " 23:59:59' AND customer_deposits.paymentMethod<>'Bonus',customer_deposits.amountUSD,0)) as weeklyDeposits
           FROM users
           LEFT JOIN customer_deposits ON customer_deposits.receptionEmployeeId=users.id
           LEFT JOIN customers ON customers.id=customer_deposits.customerId
           LEFT JOIN user_desks ON user_desks.userId=users.id
            WHERE users.department='retention'
            AND users.status='activated'
            AND customer_deposits.status = 'approved'
            AND customers.isDemo=0
            AND users.id NOT IN (2406,2378,2290,2421,2115,2509)


                ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customer_deposits.receptionEmployeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND user_desks.deskId = " . $desk;
    }

    $sql .= " GROUP BY users.id";


    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getSplit($transactionId, $employee, $percentage, $splitPercentage)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    
    $check_sql = "SELECT * FROM MainCoon.commission WHERE depositId=$transactionId";
    $check_record = $MainCoonDB->fetchAll($check_sql);
     
    if ($percentage == '%100') {
        	
        if(isset($check_record[0])) return 'Already Splitted';
         
        $change_sql = "INSERT INTO MainCoon.commission_change_log (depositId,employeeId,percent,type,changeUserName) values ($transactionId,$employee,$splitPercentage,'add','" . $userName . "')";
        $MainCoonDB->exec($change_sql);

        $sql = "INSERT INTO MainCoon.commission (depositId,receptionEmployeeId,percent) values ($transactionId,$employee,$splitPercentage)";
        $return_value = 'Successful Split';
    } else {

        if(!isset($check_record[0])) return 'Already Deleted';
		
		$last_key = end(array_keys($check_record));
	    $change_sql = "INSERT INTO commission_change_log (depositId,employeeId,percent,type,changeUserName) VALUES ";
        
        foreach($check_record as $key=>$value){
		  $change_sql .= " ($transactionId,".$check_record[$key]["receptionEmployeeId"].",".$check_record[$key]["percent"].",'delete','$userName') ";
    	  if($key!=$last_key) 
    	     $change_sql .= " , ";
	    }
	
        $MainCoonDB->exec($change_sql);

        $sql = "DELETE FROM MainCoon.commission WHERE depositId= " . $transactionId;
        $return_value = 'Deleted Split';
    }


    $result = $MainCoonDB->exec($sql);
    $return_value = $result ? $return_value : $result;
    
    return $return_value;

}

function addVinciSplit($split, $transactionId)
{
    $vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    $last_key = end(array_keys($split));
    
    $sql = "SELECT SplitId FROM dbo.CommissionSplit WHERE DepositId='$transactionId'";
	
	$splitted = $vinci_rdsDB->fetchAll($sql);
	if($splitted)
	   return 'Already Splitted';
	    
    $sql = "INSERT INTO dbo.CommissionChangeLog (Type,Action,DepositId,OwnerId,Percentage) VALUES ";
    foreach($split as $key=>$value){
    	$sql .= " ('split','add','$transactionId','{$split[$key]['employee']}',{$split[$key]['percent']}) ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
    }
    
    $result = $vinci_rdsDB->exec($sql);
    
    if(!$result)
       return false;
       
    $sql = "INSERT INTO dbo.CommissionSplit (DepositId,OwnerId,Percentage) VALUES ";
    foreach($split as $key=>$value){
    	$sql .= " ('$transactionId','{$split[$key]['employee']}',{$split[$key]['percent']}) ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
    }
	
    return $vinci_rdsDB->exec($sql);

}

function deleteVinciSplit($transactionId)
{
    $vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    
	$sql = "SELECT * FROM dbo.CommissionSplit WHERE DepositId='$transactionId'";
	 
	$split = $vinci_rdsDB->fetchAll($sql,array('DepositId','OwnerId'));
	if(!$split)
	  return 'Already Deleted';
	  
	$last_key = end(array_keys($split));
	$sql = "INSERT INTO dbo.CommissionChangeLog (Type,Action,DepositId,OwnerId,Percentage) VALUES ";
    foreach($split as $key=>$value){
    	$sql .= " ('split','delete','$transactionId','{$split[$key]['OwnerId']}',{$split[$key]['Percentage']}) ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
    }
    
    $result = $vinci_rdsDB->exec($sql);
    
    if(!$result)
       return false;
       
    $sql = "DELETE FROM dbo.CommissionSplit WHERE DepositId='$transactionId'";
	
	return $vinci_rdsDB->exec($sql);
}

function addVinciChangeEmployee($transactionId,$changeEmployee){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    
    $sql = "SELECT FullDepositId FROM dbo.CommissionFullDeposit WHERE DepositId='$transactionId'";
	
	$changed = $vinci_rdsDB->fetchAll($sql);
	if($changed)
	   return 'Already Changed';
	
	$sql = "INSERT INTO dbo.CommissionChangeLog (Type,Action,DepositId,OwnerId) VALUES 
            ('change','add','$transactionId','$changeEmployee') ";
    
    $result = $vinci_rdsDB->exec($sql);
    
    if(!$result)
       return false;
	
	$sql = "INSERT INTO dbo.CommissionFullDeposit (DepositId,OwnerId) VALUES ('$transactionId','$changeEmployee') ";
    	
    return $vinci_rdsDB->exec($sql);
}

function deleteVinciChangeEmployee($transactionId){
	$vinci_rdsDB = new leverateDB_Connection('mssql_rds','vinci_rds');
    
	$sql = "SELECT * FROM dbo.CommissionFullDeposit WHERE DepositId='$transactionId'";
	 
	$change = $vinci_rdsDB->fetchAll($sql,array('DepositId','OwnerId'));
	if(!$change)
	  return 'Already Deleted';
	  
	$sql = "INSERT INTO dbo.CommissionChangeLog (Type,Action,DepositId,OwnerId) VALUES 
            ('change','delete','$transactionId','{$change[0]['OwnerId']}') ";
    
    $result = $vinci_rdsDB->exec($sql);
    
    if(!$result)
       return false;
       
    $sql = "DELETE FROM dbo.CommissionFullDeposit WHERE DepositId='$transactionId'";
	
	return $vinci_rdsDB->exec($sql);
}

function addSplit($split, $transactionId)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    $last_key = end(array_keys($split));
    
    $sql = "SELECT * FROM MainCoon.commission WHERE depositId=$transactionId";
	
	$splitted = $MainCoonDB->fetchAll($sql);
	if($splitted)
	   return 'Already Splitted';
	    
    $sql = "INSERT INTO MainCoon.commission_change_log (depositId,employeeId,percent,type,changeUserName) VALUES ";
    foreach($split as $key=>$value){
    	$sql .= " ($transactionId,".$split[$key]["employee"].",".$split[$key]["percent"].",'add','$userName') ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
    }
    
    $result = $MainCoonDB->exec($sql);
    
    if(!$result)
       return false;
       
    $sql = "INSERT INTO MainCoon.commission (depositId,receptionEmployeeId,percent) VALUES ";
    foreach($split as $key=>$value){
    	$sql .= " ($transactionId,".$split[$key]["employee"].",".$split[$key]["percent"].") ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
    }
	
    $result = $MainCoonDB->exec($sql);
	
    return $result;
}

function deleteSplit($transactionId)
{

    $MainCoonDB = new MySqlDriver();
    $userName = $_SESSION['userdata']['username'];
    
	$sql = "SELECT * FROM commission WHERE depositId=$transactionId";
	 
	$split = $MainCoonDB->fetchAll($sql);
	if(!$split)
	  return 'Already Deleted';
	  
	$last_key = end(array_keys($split));
	$sql = "INSERT INTO commission_change_log (depositId,employeeId,percent,type,changeUserName) VALUES ";
	
	foreach($split as $key=>$value){
		$sql .= " ($transactionId,".$split[$key]["receptionEmployeeId"].",".$split[$key]["percent"].",'delete','$userName') ";
    	if($key!=$last_key) 
    	   $sql .= " , ";
	}
	
	$result = $MainCoonDB->exec($sql);
    
    if(!$result)
       return false;
       
    $sql = "DELETE FROM commission WHERE depositId=$transactionId";
	
	$result = $MainCoonDB->exec($sql);
	
	return $result;   
}

function getChangeTransaction($transactionId, $employee)
{

    $MainCoonDB = new MySqlDriver();

    $sql = "INSERT INTO MainCoon.commission_full_deposit (depositId,receptionEmployeeId) values ($transactionId,$employee)";


    $result = $MainCoonDB->exec($sql);
    if (!$result) {
        return false;
    } else {
        return $result;
    }

}


function getConversionWeeks($dpStart)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT week,
                   firstDayofWeek,
	               lastDayofWeek
	               FROM conversion_weeks
	               WHERE month='{$dpStart}'
	                     AND week IN (1,2,3,4)
	               ORDER BY week ASC      ";
    $result = $MainCoonDB->fetchAll($sql);
    return $result;

}

function getTargetsForConversion($dpStart)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT week,
	               target,
	               employeeId
	               FROM conversion_targets
	               WHERE month='{$dpStart}'
	                     AND week IN (1,2,3,4)
	               ORDER BY week ASC      ";
    $result = $MainCoonDB->fetchAll($sql);
    return $result;
}

function getWeeklyBonusForConversion($dpStart)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " SELECT  hedgestonegroup_platform.users.id AS employeeId,
	                 CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                 MainCoon.conversion_weekly_bonus.week,
	                 MainCoon.conversion_weekly_bonus.place,
	                 MainCoon.conversion_weekly_bonus.amount
	                 FROM MainCoon.conversion_weekly_bonus
	                 LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.conversion_weekly_bonus.employeeId
	                 WHERE MainCoon.conversion_weekly_bonus.month='$dpStart'
	                 ";
    $result = $MainCoonDB->fetchAll($sql);
    return $result;

}


function getExtraForConversion($dpMonth)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " SELECT  MainCoon.conversion_extra.id,
	                 hedgestonegroup_platform.users.id AS employeeId,
	                 CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                 MainCoon.conversion_extra.amount,
	                 MainCoon.conversion_extra.date,
	                 MainCoon.conversion_extra.reason,
	                 '' AS extra_delete
	                 FROM MainCoon.conversion_extra
	                 LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.conversion_extra.employeeId
	                 WHERE DATE_FORMAT(MainCoon.conversion_extra.date,'%Y-%m')='$dpMonth'
	                 ";
    $result = $MainCoonDB->fetchAll($sql);

    return $result;

}

function getConversionShiftManagers($dpMonth,$employee)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " SELECT  MainCoon.conversion_shift_managers.id,
	                 hedgestonegroup_platform.users.id AS employeeId,
	                 CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                 DATE_FORMAT(MainCoon.conversion_shift_managers.month,'%Y-%m') As month
	                 FROM MainCoon.conversion_shift_managers
	                 LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.conversion_shift_managers.employeeId
	                 WHERE DATE_FORMAT(MainCoon.conversion_shift_managers.month,'%Y-%m')='$dpMonth'
	                 ";
    if($employee){
        $sql .= " AND MainCoon.conversion_shift_managers.employeeId=$employee";
    }
    $result = $MainCoonDB->fetchAll($sql);

    return $result;

}

function getFTDsForShiftManagers($dpMonth){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = " SELECT customer_deposits.id,
	                confirmTime
	         FROM customer_deposits
	         LEFT JOIN customers ON customers.id=customer_deposits.customerId
	         WHERE customers.isDemo=0
	         AND customer_deposits.paymentMethod<>'Bonus'
	         AND customer_deposits.status='approved'
	         AND customer_deposits.confirmTime=customers.firstDepositDate
	         AND DATE_FORMAT(customer_deposits.confirmTime,'%Y-%m')='$dpMonth'";

    $result =  $TradingPlatformDB->fetchAll($sql);
    return $result;
}

function getConversionShifts($dpMonth)
{
    $MainCoonDB = new MySqlDriver();
    /* $sql = " SELECT * FROM MainCoon.conversion_shift_managers
              WHERE DATE_FORMAT(MainCoon.conversion_shift_managers.month,'%Y-%m')='$dpMonth'
              AND MainCoon.conversion_shift_managers.employeeId=$employee";
     $result = $MainCoonDB->fetchAll($sql);
     if(!$result)
         return 'Not A Manager';     */
    $sql = " SELECT  MainCoon.conversion_shifts.id,
	                 hedgestonegroup_platform.users.id AS employeeId,
	                 CONCAT(hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	                 MainCoon.conversion_shifts.startTime,
	                 MainCoon.conversion_shifts.endTime,
	                 MainCoon.conversion_shifts.status
	                 FROM MainCoon.conversion_shifts
	                 LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.conversion_shifts.employeeId
	                 WHERE DATE_FORMAT(MainCoon.conversion_shifts.startTime,'%Y-%m')='$dpMonth'
	                 ORDER BY startTime
	                 ";
    $result = $MainCoonDB->fetchAll($sql);

    return $result;

}

function openConversionShift($employee)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " SELECT id FROM MainCoon.conversion_shifts
	         WHERE employeeId=$employee
	         AND status='open'";
    $open_shifts = $MainCoonDB->fetchAll($sql);
    if(isset($open_shifts[0]))
        return 'open shift';
    $sql = " INSERT INTO MainCoon.conversion_shifts (employeeId) VALUES ($employee)";
    $result = $MainCoonDB->exec($sql);
    return $result;

}

function closeConversionShift($id)
{
    $MainCoonDB = new MySqlDriver();
    $sql = " UPDATE MainCoon.conversion_shifts
	         SET endTime=CURRENT_TIMESTAMP ,status='closed'
	         WHERE id=$id";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function changeDuplicate($depositId, $employee, $type)
{

    $MainCoonDB = new MySqlDriver();
    $sql = $type == 'Duplicate' ?
        "INSERT INTO conversion_duplicate (depositId,employeeId) VALUES ($depositId,$employee)" :
        "DELETE FROM conversion_duplicate WHERE depositId=$depositId";
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function deleteChangedEmployeeForConversion($id){

    $MainCoonDB= new MySqlDriver();
    $sql = "DELETE FROM conversion_full_deposit WHERE depositId=$id";
    $MainCoonDB->exec($sql);
    $sql = "DELETE FROM conversion_duplicate WHERE depositId=$id";
    $MainCoonDB->exec($sql);
    $sql = "DELETE FROM conversion_change_employee WHERE depositId=$id";
    $result=$MainCoonDB->exec($sql);
    $return_value= $result ? 'success' : false;
    return $return_value;
}

function changeEmployeeForConversion($depositId,$employeeId){

    $MainCoonDB= new MySqlDriver();
    $sql = "DELETE FROM conversion_full_deposit WHERE depositId=$depositId";
    $MainCoonDB->exec($sql);
    $sql = "DELETE FROM conversion_duplicate WHERE depositId=$depositId";
    $MainCoonDB->exec($sql);
    $sql = "INSERT INTO conversion_change_employee (depositId,employeeId) VALUES ($depositId,$employeeId)";
    $result=$MainCoonDB->exec($sql);
    $return_value= $result ? 'success' : false;
    return $return_value;
}

function getNotesForConversion($nStart, $nEnd, $customer, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id AS customerId,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 customer_communications.subject,
                 customer_communications.body,
                 customer_communications.createDate,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                 FROM customer_communications
                 LEFT JOIN customers ON customers.id=customer_communications.customerId
                 LEFT JOIN users ON users.id=customer_communications.creatorId
                 WHERE customerId=$customer
                       AND creatorId=$employee
                 #      AND customer_communications.createDate BETWEEN '{$nStart}' AND '{$nEnd}'
          UNION ALL
          SELECT customers.id AS customerId,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 calls.subject,
                 calls.content AS body,
                 calls.date AS createDate,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                 FROM calls
                 LEFT JOIN customers ON customers.id=calls.clientId
                 LEFT JOIN users ON users.id=calls.employeeId
                 WHERE clientId=$customer
                       AND employeeId=$employee
                 #      AND calls.date BETWEEN '{$nStart}' AND '{$nEnd}'";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getPreExcludeEmployees($desk){
	$MainCoonDB= new MySqlDriver();
	$sql = " SELECT exclude_employees.id,
	                employees.id AS employeeId,  
	                CONCAT(employees.firstName,' ',employees.lastName) AS employee,
	                MainCoon.users.username AS addUser
	         FROM MainCoon.shuffle_exclude_employees AS exclude_employees
	         LEFT JOIN MainCoon.users ON MainCoon.users.id = exclude_employees.addUserId
	         LEFT JOIN hedgestonegroup_platform.users AS employees ON employees.id = exclude_employees.employeeId
	         LEFT JOIN hedgestonegroup_platform.user_desks AS desks ON desks.userId=employees.id";
	if($desk!=0)		 
	     $sql .= " WHERE desks.deskId=$desk";
    $sql .= " GROUP BY id";			 
    $results = $MainCoonDB->fetchAll($sql);
	
	return $results;			 
}

function addPreExcludeEmployees($employee){
	$MainCoonDB= new MySqlDriver();
	$sql = " SELECT * FROM shuffle_exclude_employees
	         WHERE employeeId=$employee";
	$excluded = $MainCoonDB->fetchAll($sql);		 
	$isExcluded = isset($excluded[0]) ; 
	if($isExcluded)
	  return 'Employee is already excluded';
	$sql = " INSERT INTO shuffle_exclude_employees (employeeId,addUserId) VALUES ($employee,{$_SESSION['userdata']['id']})";
	$result = $MainCoonDB->exec($sql);
	
	return $result;

}

function deletePreExcludeEmployees($id){
	$MainCoonDB= new MySqlDriver();
	$sql = "DELETE FROM shuffle_exclude_employees WHERE id=$id";
	$result = $MainCoonDB->exec($sql);
	return $result;
}

function getRealBalance($dpStart, $dpEnd, $desk, $employee)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT
                customers.id,
                CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
                CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) AS employee,


           --     MIN(customer_deposits.confirmTime) AS firstDepositDate,
                customers.currency,
                user_desks.deskId as desk,
           		(IF(IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = customers.id),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = customers.id),0)
                    -
                    customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = customers.id),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = customers.id),0)
                    -
                    customer_balance.pnl, 0))*currencies.rateUSD AS real_account_balanceUSD

            FROM customer_deposits
            RIGHT JOIN customers ON customer_deposits.customerId = customers.id
            LEFT JOIN users ON customers.employeeInChargeId = users.id
            LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
            left join currencies on customers.currency=currencies.code
            LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
            WHERE customer_deposits.paymentMethod != 'Bonus'
            AND customers.isDemo=0
         --   AND firstDepositDate BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
             AND  users.department='retention'
             ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    $sql .= " GROUP BY customers.id ";

    if ($desk != 0) {
        $sql .= " HAVING desk = " . $desk;
    }

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;


}

function getRealScoreForChart($dpStart, $dpEnd, $desk, $employee)
{


    $DB_Connection = new DB_Connect();
	
	$commission_3d_list=array();
	
	$sql = "SELECT processor FROM MainCoon.commission_3d_list";
	
	$result = $DB_Connection->fetchAll($sql);
	foreach($result as $key=>$value){
		$commission_3d_list[]=$result[$key]['processor'];
	}
	$implode_3d_list = implode("','",$commission_3d_list);
	
    $sql = "SELECT transactions.confirmDate AS confirmDate,
       transactions.confirmHour AS confirmHour,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalDeposit,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Credit Card',transactions.amountUSD,0)) AS totalCreditCard,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.clearedBy IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDeposit3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Wire',transactions.amountUSD,0)) AS totalDepositWire,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.paymentMethod<>'Wire' AND transactions.clearedBy NOT IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDepositNon3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonus,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalWithdrawal,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='chargeBack',transactions.amountUSD,0)) AS totalChargeBack,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonusWithdrawal,
       SUM(IF(transactions.paymentMethod='InactivityFee' OR transactions.paymentMethod='Fees',transactions.amountUSD,0)) AS totalFees,
       '' AS percent

        FROM (SELECT  MainCoon.commission.depositId AS id,
		           hedgestonegroup_platform.customers.id AS customerId,
                   CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                   real_deposit.type,
                   real_deposit.paymentMethod AS paymentMethod,
                   real_deposit.currency AS currency,
                   TRUNCATE(real_deposit.amount*(MainCoon.commission.percent/100),2) AS amount,
		           TRUNCATE(real_deposit.amountUSD*(MainCoon.commission.percent/100),2) AS amountUSD,
                   real_deposit.confirmTime AS confirmTime,
                   DATE(real_deposit.confirmTime) AS confirmDate,
                   CONCAT(DATE(real_deposit.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(real_deposit.confirmTime))-MOD(TIME_TO_SEC(TIME(real_deposit.confirmTime)),3600)),'%H:%i')) AS confirmHour,
                   real_deposit.status AS status,
                   real_deposit.clearedBy AS clearedBy,
		           real_deposit.verification AS verification,
                   CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                   hedgestonegroup_platform.user_desks.deskId AS desk,
                   CONCAT('%',MainCoon.commission.percent) AS percentage,
		           ' ' AS split,
		           real_deposit.note AS note
            FROM
             (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
        RIGHT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
		LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
		LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission.receptionEmployeeId=hedgestonegroup_platform.users.id
		LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission.receptionEmployeeId
        WHERE real_deposit.customerId IS NOT NULL



                ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND MainCoon.commission.receptionEmployeeId=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }

    $sql .= "
                 UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		                hedgestonegroup_platform.customers.id AS customerId,
                        CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                        real_deposit.type AS type,
                        real_deposit.paymentMethod AS paymentMethod,
                        real_deposit.currency AS currency,
                        TRUNCATE(real_deposit.amount*((100-commission_split.percent)/100),2) AS amount,
		                TRUNCATE(real_deposit.amountUSD*((100-commission_split.percent)/100),2) AS amountUSD,
                        real_deposit.confirmTime AS confirmTime,
                        DATE(real_deposit.confirmTime) AS confirmDate,
                        CONCAT(DATE(real_deposit.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(real_deposit.confirmTime))-MOD(TIME_TO_SEC(TIME(real_deposit.confirmTime)),3600)),'%H:%i')) AS confirmHour,
                        real_deposit.status AS status,
                        real_deposit.clearedBy AS clearedBy,
		                real_deposit.verification AS verification,
                        CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                        hedgestonegroup_platform.user_desks.deskId AS desk,
                        CONCAT('%',(100-commission_split.percent)) AS percentage,
		                ' ' AS split,
		                real_deposit.note AS note
                FROM
                    (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
             INNER JOIN (SELECT depositId, SUM(percent) AS percent FROM MainCoon.commission
                                GROUP BY depositId) AS commission_split
							    ON real_deposit.id=commission_split.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
             LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
		     WHERE hedgestonegroup_platform.customers.isDemo=0";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }


    $sql .= "
                UNION ALL ";

    $sql .= "SELECT   real_deposit.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      real_deposit.type AS type,
                      real_deposit.paymentMethod AS paymentMethod,
                      real_deposit.currency AS currency,
                      TRUNCATE(real_deposit.amount,2) AS amount,
		              TRUNCATE(real_deposit.amountUSD,2) AS amountUSD,
                      real_deposit.confirmTime AS confirmTime,
                      DATE(real_deposit.confirmTime) AS confirmDate,
                      CONCAT(DATE(real_deposit.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(real_deposit.confirmTime))-MOD(TIME_TO_SEC(TIME(real_deposit.confirmTime)),3600)),'%H:%i')) AS confirmHour,
                      real_deposit.status AS status,
                      real_deposit.clearedBy AS clearedBy,
		              real_deposit.verification AS verification,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage,
		              ' ' AS split,
		              real_deposit.note AS note
             FROM
                 (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	                 hedgestonegroup_platform.customer_deposits.type AS type,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage,
                     ' ' AS split,
                     IF(new.id IS NULL,'NO','YES') AS note
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
			   LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 MainCoon.commission_full_deposit.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                          RIGHT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
			        AND hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customer_deposits.type AS type,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage,
                  ' ' AS split,
                  IF(new.id IS NULL,'NO','YES') AS note
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN ( SELECT deposit.id
								FROM(
									  SELECT hedgestonegroup_platform.customer_deposits.id,
											 hedgestonegroup_platform.customer_deposits.customerId,
											 hedgestonegroup_platform.customer_deposits.receptionEmployeeId ,
											 hedgestonegroup_platform.customer_deposits.confirmTime,
											 hedgestonegroup_platform.customer_deposits.paymentMethod
                                             FROM hedgestonegroup_platform.customer_deposits
                                             LEFT JOIN MainCoon.commission_full_deposit ON MainCoon.commission_full_deposit.depositId=hedgestonegroup_platform.customer_deposits.id
                                              WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                                             ) AS deposit
									      LEFT JOIN hedgestonegroup_platform.customer_communications
                                             ON deposit.customerId=hedgestonegroup_platform.customer_communications.customerId AND deposit.receptionEmployeeId=hedgestonegroup_platform.customer_communications.creatorId
										   WHERE  deposit.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                                           AND DATE(deposit.confirmTime)=DATE(hedgestonegroup_platform.customer_communications.createDate)
                                           GROUP BY deposit.id
                                         ) AS new ON new.id=hedgestonegroup_platform.customer_deposits.id
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL

                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
		               AND hedgestonegroup_platform.customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59') as real_deposit
        LEFT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
        LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
        LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
        LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
         WHERE MainCoon.commission.depositId IS NULL";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }
    $sql .= " UNION ALL
	    SELECT        hedgestonegroup_platform.withdrawals.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      hedgestonegroup_platform.withdrawals.type AS type,
                      hedgestonegroup_platform.withdrawals.paymentMethod AS paymentMethod,
                      hedgestonegroup_platform.withdrawals.currency AS currency,
                      TRUNCATE(hedgestonegroup_platform.withdrawals.amount,2) AS amount,
		              TRUNCATE(hedgestonegroup_platform.withdrawals.amountUSD,2) AS amountUSD,
                      hedgestonegroup_platform.withdrawals.confirmTime AS confirmTime,
                      DATE(hedgestonegroup_platform.withdrawals.confirmTime) AS confirmDate,
                      CONCAT(DATE(hedgestonegroup_platform.withdrawals.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(hedgestonegroup_platform.withdrawals.confirmTime))-MOD(TIME_TO_SEC(TIME(hedgestonegroup_platform.withdrawals.confirmTime)),3600)),'%H:%i')) AS confirmHour,
                      hedgestonegroup_platform.withdrawals.status AS status,
                      hedgestonegroup_platform.withdrawals.clearedBy AS clearedBy,
		              hedgestonegroup_platform.customers.verification AS verification,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage,
		              ' ' AS split,
                      '' AS note
             FROM  hedgestonegroup_platform.withdrawals
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.withdrawals.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.withdrawals.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.withdrawals.receptionEmployeeId
             WHERE
               hedgestonegroup_platform.withdrawals.status='approved'
				   AND  hedgestonegroup_platform.users.department='retention'
				   AND hedgestonegroup_platform.customers.isDemo=0
				   AND hedgestonegroup_platform.withdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'

	            ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND hedgestonegroup_platform.users.id=" . $employee;

    }
    if ($desk != 0) {

        $sql .= " AND hedgestonegroup_platform.user_desks.deskId= " . $desk;
    }


    $sql .= ") AS transactions";
    if ($dpStart != $dpEnd)
        $sql .= " GROUP BY confirmDate ;";
    else
        $sql .= " GROUP BY confirmHour ;";

    $data = $DB_Connection->fetchAll($sql);
    
    return $data;


}

function getChartForDesks($dpStart, $dpEnd, $desk1, $desk2)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    
    $commission_3d_list=array();
	
	$sql = "SELECT processor FROM MainCoon.commission_3d_list";
	
	$result = $dbConnect->fetchAll($sql);
	foreach($result as $key=>$value){
		$commission_3d_list[]=$result[$key]['processor'];
	}
	$implode_3d_list = implode("','",$commission_3d_list);

    $sql = "SELECT transactions.confirmDate AS confirmDate,
	   transactions.confirmHour AS confirmHour,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalDeposit,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Credit Card',transactions.amountUSD,0)) AS totalCreditCard,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.clearedBy IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDeposit3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Wire',transactions.amountUSD,0)) AS totalDepositWire,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod<>'Bonus' AND transactions.paymentMethod<>'Wire' AND transactions.clearedBy NOT IN ('".$implode_3d_list."'),transactions.amountUSD,0)) AS totalDepositNon3D,
       SUM(IF(transactions.type='deposit' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonus,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod<>'Bonus',transactions.amountUSD,0)) AS totalWithdrawal,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='chargeBack',transactions.amountUSD,0)) AS totalChargeBack,
       SUM(IF(transactions.type='withdrawal' AND transactions.paymentMethod='Bonus',transactions.amountUSD,0)) AS totalBonusWithdrawal,
       SUM(IF(transactions.paymentMethod='InactivityFee' OR transactions.paymentMethod='Fees',transactions.amountUSD,0)) AS totalFees,
       transactions.desk
  FROM  (SELECT  customer_deposits.customerId,
        customer_deposits.paymentMethod,
        customer_deposits.clearedBy,
        customer_deposits.type,
        TRUNCATE(customer_deposits.amountUSD,2) AS amountUSD,
        customer_deposits.confirmTime,
        DATE(customer_deposits.confirmTime) AS confirmDate,
        CONCAT(DATE(customer_deposits.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(customer_deposits.confirmTime))-MOD(TIME_TO_SEC(TIME(customer_deposits.confirmTime)),3600)),'%H:%i')) AS confirmHour,
        user_desks.deskId AS desk

    FROM customer_deposits
    LEFT JOIN customers ON customers.id=customer_deposits.customerId
    LEFT JOIN users ON users.id=customer_deposits.receptionEmployeeId
    LEFT JOIN user_desks ON user_desks.userId=customer_deposits.receptionEmployeeId
    WHERE    customer_deposits.status='approved'
      AND   customers.isDemo=0
      AND users.department='retention'
      AND user_desks.deskId IN (" . $desk1 . "," . $desk2 . ")
      AND customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
   UNION ALL

   SELECT  withdrawals.customerId,
           withdrawals.paymentMethod,
           withdrawals.clearedBy,
           withdrawals.type,
           TRUNCATE(withdrawals.amountUSD,2) AS amountUSD,
           withdrawals.confirmTime,
           DATE(withdrawals.confirmTime) AS confirmDate,
           CONCAT(DATE(withdrawals.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(withdrawals.confirmTime))-MOD(TIME_TO_SEC(TIME(withdrawals.confirmTime)),3600)),'%H:%i')) AS confirmHour,
           user_desks.deskId AS desk

  FROM withdrawals
  LEFT JOIN customers ON customers.id=withdrawals.customerId
  LEFT JOIN users ON users.id=withdrawals.receptionEmployeeId
  LEFT JOIN user_desks ON user_desks.userId=withdrawals.receptionEmployeeId
  WHERE    withdrawals.status='approved'
      AND   customers.isDemo=0
      AND users.department='retention'
      AND user_desks.deskId IN (" . $desk1 . "," . $desk2 . ")
      AND withdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' ) AS transactions";
    if ($dpStart != $dpEnd)
        $sql .= " GROUP BY confirmDate, desk";
    else
        $sql .= " GROUP BY confirmHour, desk";
    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}

function getRealPNLForChart($pStart,$pEnd,$desk,$employee){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);

    $dates = array();
    $current = strtotime($pStart);
    $last_date = strtotime($pEnd);
    while( $current <= $last_date ) {

        $dates[date('Y-m-d', $current)] = array("pnl" => 0,
            "deposit" => 0);
        $current = strtotime('+1 day', $current);
    }

    $sql="SELECT customers.id,
                 CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                 country.name AS country,
	             customers.currency,
	             TRUNCATE(IFNULL(pre_deposits.totalDeposits,0),2) AS pre_deposit,
                 TRUNCATE(IFNULL(pre_pnl.pnl,0),2) AS pre_pnl,
                 CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
         FROM customers
         LEFT JOIN users ON users.id=customers.employeeInChargeId
	     LEFT JOIN user_desks ON user_desks.userId=customers.employeeInChargeId
	     LEFT JOIN currencies ON currencies.code=customers.currency
         LEFT JOIN country ON country.id=customers.Country
         LEFT JOIN (SELECT customers.id AS customerId,
				           IFNULL((SELECT SUM(customer_deposits.amount)
                                   FROM customer_deposits
                                   WHERE customer_deposits.paymentMethod <> 'bonus'
                                         AND customer_deposits.status = 'approved'
                                         AND customer_deposits.confirmTime>=customers.regTime AND customer_deposits.confirmTime<'$pStart 00:00:00'
                                         AND customer_deposits.customerId = customers.id),0)
                           -
                           IFNULL((SELECT SUM(withdrawals.amount)
                                   FROM withdrawals
                                   WHERE withdrawals.paymentMethod <> 'bonus'
                                         AND withdrawals.status = 'approved'
                                         AND withdrawals.confirmTime>=customers.regTime AND withdrawals.confirmTime<'$pStart 00:00:00'
                                         AND withdrawals.customerId = customers.id),0) AS totalDeposits
                     FROM customers
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     WHERE users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                     ) AS pre_deposits ON pre_deposits.customerId=customers.id
         LEFT JOIN (SELECT trades.customerId,
                           SUM(trades.pnl) AS pnl
                    FROM
                    (SELECT onetouch_positions.customerId AS customerId,
                            SUM(onetouch_positions.amount-payout) AS pnl
                     FROM onetouch_positions
                     LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                     LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     WHERE onetouch_positions.status IN('won','lost','tie','sold')
                           AND onetouch_options.endTradeTime>=customers.regTime AND onetouch_options.endTradeTime<'$pStart 00:00:00'
                           AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                     GROUP BY customerId
                     UNION ALL
                     SELECT customerId,
                            SUM(amount-payout) AS pnl
                     FROM positions
                     LEFT JOIN customers ON customers.id=positions.customerId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     WHERE ((positions.status IN('won','lost','tie')
                           AND opendDate>=customers.regTime AND opendDate<'$pStart 00:00:00') OR
                           (positions.status='sold' AND positions.lastUpdateDate>=customers.regTime AND positions.lastUpdateDate<'$pStart 00:00:00'))
                           AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";

    $sql .= " AND customers.isDemo=0
                     GROUP BY customerId
                     UNION ALL
                     SELECT customerId,
                            SUM(investment-payout) AS pnl
                     FROM ldo_positions
                     LEFT JOIN customers ON customers.id=ldo_positions.customerId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     WHERE ((ldo_positions.status IN('won','lost','tie')
                           AND endDate>=customers.regTime AND endDate<'$pStart 00:00:00') OR
                           (ldo_positions.status='sold' AND exitTime>=customers.regTime AND exitTime<'$pStart 00:00:00'))
                           AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                     GROUP BY customerId
                     UNION ALL
                     SELECT customerId,
                            SUM(investment-payout) AS pnl
                     FROM forex_positions
                     LEFT JOIN customers ON customers.id=forex_positions.customerId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     WHERE forex_positions.status IN('won','lost','tie','sold')
                           AND exitTime>customers.regTime AND exitTime<'$pStart 00:00:00'
                           AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0
                    GROUP BY customerId) AS trades
                    GROUP BY trades.customerId) AS pre_pnl ON pre_pnl.customerId=customers.id
                    WHERE users.department='retention'
                          AND customers.isDemo=0";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";


    $customers= $TradingPlatformDB->fetchAll($sql);

    foreach($customers as $key => $value){
        $customers[$key]['dates']=$dates;

    }

    return $customers;
}

function getPNLForPeriod($pStart,$pEnd,$desk,$employee){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = "SELECT trades.customerId, TRUNCATE(SUM(trades.pnl),2) AS pnl, trades.endDate, trades.endHour
            FROM
            (SELECT onetouch_positions.customerId AS customerId,
                    SUM(onetouch_positions.amount-payout) AS pnl,
                    DATE(onetouch_options.endTradeTime) AS endDate,
                    CONCAT(DATE(onetouch_options.endTradeTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(onetouch_options.endTradeTime))-MOD(TIME_TO_SEC(TIME(onetouch_options.endTradeTime)),3600)),'%H:%i')) AS endHour
             FROM onetouch_positions
             LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
             LEFT JOIN customers ON customers.id=onetouch_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             WHERE onetouch_positions.status IN('won','lost','tie','sold')
                   AND onetouch_options.endTradeTime BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'
                   AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, endDate";
    else
        $sql .= " GROUP BY customerId, endHour";
    $sql .= " UNION ALL
             SELECT positions.customerId,
                    SUM(amount-payout) AS pnl,
                    DATE(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate)) AS endDate,
                    CONCAT(DATE(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate)),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate)))-MOD(TIME_TO_SEC(TIME(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate))),3600)),'%H:%i')) AS endHour
             FROM positions
             LEFT JOIN customers ON customers.id=positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             WHERE ((positions.status IN('won','lost','tie') AND opendDate BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59') OR
                   (positions.status='sold' AND positions.lastUpdateDate BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'))
                   AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, endDate";
    else
        $sql .= " GROUP BY customerId, endHour";
    $sql .= " UNION ALL
             SELECT ldo_positions.customerId,
                    SUM(ldo_positions.investment-payout) AS pnl,
                    DATE(IF(ldo_positions.status='sold',exitTime,endDate)) AS endDate,
                    CONCAT(DATE(IF(ldo_positions.status='sold',exitTime,endDate)),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(IF(ldo_positions.status='sold',exitTime,endDate)))-MOD(TIME_TO_SEC(TIME(IF(ldo_positions.status='sold',exitTime,endDate))),3600)),'%H:%i')) AS endHour
             FROM ldo_positions
             LEFT JOIN customers ON customers.id=ldo_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             WHERE ((ldo_positions.status IN('won','lost','tie') AND endDate BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59') OR
                   (ldo_positions.status='sold' AND exitTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'))
                   AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, endDate";
    else
        $sql .= " GROUP BY customerId, endHour";
    $sql .= " UNION ALL
             SELECT forex_positions.customerId,
                    SUM(investment-payout) AS pnl,
                    DATE(exitTime) AS endDate,
                    CONCAT(DATE(exitTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(exitTime))-MOD(TIME_TO_SEC(TIME(exitTime)),3600)),'%H:%i')) AS endHour
             FROM forex_positions
             LEFT JOIN customers ON customers.id=forex_positions.customerId
             LEFT JOIN users ON users.id=customers.employeeInChargeId
             LEFT JOIN user_desks ON user_desks.userId=users.id
             WHERE forex_positions.status IN('won','lost','tie','sold')
                   AND exitTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
                   AND users.department='retention'";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    $sql .= " AND customers.isDemo=0";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, endDate";
    else
        $sql .= " GROUP BY customerId, endHour";
    $sql .=") AS trades";
    if($pStart!=$pEnd)
        $sql .= " GROUP by trades.customerId, trades.endDate";
    else
        $sql .= " GROUP by trades.customerId, trades.endHour";

    $pnl= $TradingPlatformDB->fetchAll($sql);
    return $pnl;
}

function getNetDepositForPeriod($pStart,$pEnd,$desk,$employee){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = " SELECT deposit.customerId,
	                TRUNCATE(SUM(deposit.amount),2) AS netDeposit,
	                deposit.date,
	                deposit.hour
	         FROM(SELECT customers.id AS customerId,
	                     SUM(amount) AS amount,
	                     DATE(customer_deposits.confirmTime) AS date,
	                     CONCAT(DATE(customer_deposits.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(customer_deposits.confirmTime))-MOD(TIME_TO_SEC(TIME(customer_deposits.confirmTime)),3600)),'%H:%i')) AS hour
	              FROM customer_deposits
	              LEFT JOIN customers ON customers.id=customer_deposits.customerId
	              LEFT JOIN users ON users.id=customers.employeeInChargeId
	              LEFT JOIN user_desks ON user_desks.userId=users.id
	              WHERE customer_deposits.paymentMethod <> 'Bonus'
	                    AND customer_deposits.status='approved'
	                    AND customer_deposits.confirmTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
	                    AND customers.isDemo=0";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, date";
    else
        $sql .= " GROUP BY customerId, hour";
    $sql .= " UNION ALL
	              SELECT customers.id AS customerId,
	                     SUM(-amount) AS amount,
	                     DATE(withdrawals.confirmTime) AS date,
	                     CONCAT(DATE(withdrawals.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(withdrawals.confirmTime))-MOD(TIME_TO_SEC(TIME(withdrawals.confirmTime)),3600)),'%H:%i')) AS hour
	              FROM withdrawals
	              LEFT JOIN customers ON customers.id=withdrawals.customerId
	              LEFT JOIN users ON users.id=customers.employeeInChargeId
	              LEFT JOIN user_desks ON user_desks.userId=users.id
	              WHERE withdrawals.paymentMethod <> 'Bonus'
	                    AND withdrawals.status='approved'
	                    AND withdrawals.confirmTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
	                    AND customers.isDemo=0";
    if($desk!=0)
        $sql .= " AND user_desks.deskId=$desk";
    if($employee!=0)
        $sql .= " AND users.id=$employee";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, date";
    else
        $sql .= " GROUP BY customerId, hour";
    $sql .= " ) AS deposit";
    if($pStart!=$pEnd)
        $sql .= " GROUP BY customerId, date";
    else
        $sql .= " GROUP BY customerId, hour";
    $deposit = 	$TradingPlatformDB->fetchAll($sql);
    return $deposit;
}

function getRealPNLForCustomerCharts($pStart, $pEnd, $customerId, $pre_deposit, $pre_pnl, $rate){
	
	$dates = array();
    $current = strtotime($pStart);
    $last_date = strtotime($pEnd);
    while( $current <= $last_date ) {
        $current_day = date('Y-m-d', $current);
        $dates[$current_day] = array("pnl"      => 0,
                                     "deposit"  => 0,
                                     "real_pnl" => 0);                        
		for($i=0;$i<24;$i++){
		   $hour = $i<=9 ? '0'.$i.':00' : $i.':00'; 	
		   $dates[$current_day]["hours"][$current_day.' '.$hour]=array("pnl"      => 0,
												                       "deposit"  => 0,
																	   "real_pnl" => 0); 	
		}							 
        $current = strtotime('+1 day', $current);
    }	 
    
	
    $pnl_netdeposit= getPNLandNetDeposit($pStart, $pEnd, $customerId);  
    $pnl= $pnl_netdeposit["pnl"];
    $netdeposit= $pnl_netdeposit["netdeposit"];
    
	$count =0;
	
    foreach($dates as $date=>$date_value){
        		
        foreach($pnl as $pnl_key=>$pnl_value){
    	  	  	$hour = $pnl[$pnl_key]["endHour"];
    			if(date('Y-m-d',strtotime($hour))==$date){
    				$dates[$date]["pnl"]+=$pnl[$pnl_key]["pnl"]; //calculating pnl of a customer for each date
    				$dates[$date]["hours"][$hour]["pnl"]=$pnl[$pnl_key]["pnl"]; //calculating pnl of a customer for each hour	

    			}
    	}
		foreach($netdeposit as $deposit_key=>$deposit_value){
    	  	  	
    			$hour = $netdeposit[$deposit_key]["hour"];
    			if(date('Y-m-d',strtotime($hour))==$date){
    				$dates[$date]["deposit"]+=$netdeposit[$deposit_key]["netDeposit"]; //calculating net deposit of a customer for each date
    				$dates[$date]["hours"][$hour]["deposit"]=$netdeposit[$deposit_key]["netDeposit"]; //calculating net deposit of a customer for each hour	

    			}
		}
  	   	$pre_deposit = $count==0 ? $pre_deposit : $daily_deposit;
  	   	$pre_pnl = $count==0 ? $pre_pnl : $daily_pnl;
  	   	$daily_deposit = $dates[$date]["deposit"] + $pre_deposit;
  	   	$daily_pnl = $dates[$date]["pnl"] + $pre_pnl;
  	 //  	$dates[$date]["real_pnl"] = (min($daily_deposit,$daily_pnl)-min($pre_deposit,$pre_pnl));
		$daily_chart_data[] = array(x => $date, y=> (min($daily_deposit,$daily_pnl)-min($pre_deposit,$pre_pnl))/$rate);
		$hour_count = 0;
		
		foreach($dates[$date]["hours"] as $hour_key=>$hour_value){
			$hour_pre_deposit = $hour_count==0 ? $pre_deposit : $hourly_deposit;
			$hour_pre_pnl = $hour_count==0 ? $pre_pnl : $hourly_pnl;
			$hourly_deposit = $dates[$date]["hours"][$hour_key]["deposit"] + $hour_pre_deposit;
			$hourly_pnl = $dates[$date]["hours"][$hour_key]["pnl"] + $hour_pre_pnl;
		//	$dates[$date]["hours"][$hour_key]["real_pnl"] = (min($hourly_deposit,$hourly_pnl)-min($hour_pre_deposit,$hour_pre_pnl));
			$hourly_chart_data[$date][] = array(x => $hour_key, y => (min($hourly_deposit,$hourly_pnl)-min($hour_pre_deposit,$hour_pre_pnl))/$rate);
			$hour_count++;
		}
		
		
		$count++;
		
    }
    	
    $return_arr = array($daily_chart_data,$hourly_chart_data);  
    return $return_arr;                
}

function getPNLandNetDeposit($pStart, $pEnd, $customerId){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	set_time_limit(0);
    
    $sql = "SELECT trades.customerId, TRUNCATE(SUM(trades.pnl),2) AS pnl, trades.endHour
            FROM
            (SELECT onetouch_positions.customerId AS customerId,
                    SUM(onetouch_positions.amount-payout) AS pnl,
                    CONCAT(DATE(onetouch_options.endTradeTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(onetouch_options.endTradeTime))-MOD(TIME_TO_SEC(TIME(onetouch_options.endTradeTime)),3600)),'%H:%i')) AS endHour
             FROM onetouch_positions
             LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
             WHERE onetouch_positions.status IN('won','lost','tie','sold')
                   AND onetouch_options.endTradeTime BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'
                   AND onetouch_positions.customerId=$customerId
             GROUP BY endHour
             UNION ALL
             SELECT positions.customerId,
                    SUM(amount-payout) AS pnl,
                    CONCAT(DATE(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate)),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate)))-MOD(TIME_TO_SEC(TIME(IF(positions.status='sold',positions.lastUpdateDate,positions.opendDate))),3600)),'%H:%i')) AS endHour
             FROM positions
             WHERE ((positions.status IN('won','lost','tie') AND opendDate BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59') OR
                   (positions.status='sold' AND positions.lastUpdateDate BETWEEN '$pStart 00:00:00' and '$pEnd 23:59:59'))
                   AND customerId=$customerId
             GROUP BY endHour
             UNION ALL
             SELECT ldo_positions.customerId,
                    SUM(ldo_positions.investment-payout) AS pnl,
                    CONCAT(DATE(IF(ldo_positions.status='sold',exitTime,endDate)),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(IF(ldo_positions.status='sold',exitTime,endDate)))-MOD(TIME_TO_SEC(TIME(IF(ldo_positions.status='sold',exitTime,endDate))),3600)),'%H:%i')) AS endHour
             FROM ldo_positions
             WHERE ((ldo_positions.status IN('won','lost','tie') AND endDate BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59') OR
                   (ldo_positions.status='sold' AND exitTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'))
                   AND customerId=$customerId      
             GROUP BY endHour
             UNION ALL
             SELECT forex_positions.customerId,
                    SUM(investment-payout) AS pnl,
                    CONCAT(DATE(exitTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(exitTime))-MOD(TIME_TO_SEC(TIME(exitTime)),3600)),'%H:%i')) AS endHour
             FROM forex_positions
             WHERE forex_positions.status IN('won','lost','tie','sold')
                   AND exitTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
                   AND customerId=$customerId
             GROUP BY endHour
             ) AS trades
             GROUP BY trades.endHour
             ORDER BY trades.endHour";

    $pnl = $TradingPlatformDB->fetchAll($sql);
    
    $sql = " SELECT deposit.customerId,
	                TRUNCATE(SUM(deposit.amount),2) AS netDeposit,
	                deposit.hour
	         FROM(SELECT customer_deposits.customerId,
	                     SUM(amount) AS amount,
	                     CONCAT(DATE(customer_deposits.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(customer_deposits.confirmTime))-MOD(TIME_TO_SEC(TIME(customer_deposits.confirmTime)),3600)),'%H:%i')) AS hour
	              FROM customer_deposits
	              WHERE customer_deposits.paymentMethod <> 'Bonus'
	                    AND customer_deposits.status='approved'
	                    AND customer_deposits.confirmTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
	                    AND customer_deposits.customerId=$customerId
                  GROUP BY hour
                  UNION ALL
	              SELECT withdrawals.customerId,
	                     SUM(-amount) AS amount,
	                     CONCAT(DATE(withdrawals.confirmTime),' ',DATE_FORMAT(SEC_TO_TIME(TIME_TO_SEC(TIME(withdrawals.confirmTime))-MOD(TIME_TO_SEC(TIME(withdrawals.confirmTime)),3600)),'%H:%i')) AS hour
	              FROM withdrawals
	              WHERE withdrawals.paymentMethod <> 'Bonus'
	                    AND withdrawals.status='approved'
	                    AND withdrawals.confirmTime BETWEEN '$pStart 00:00:00' AND '$pEnd 23:59:59'
	                    AND withdrawals.customerId=$customerId
                 GROUP BY hour) AS deposit
             GROUP BY hour
             ORDER BY hour";
             
    $netdeposit = $TradingPlatformDB->fetchAll($sql);
    
    $pnl_netdeposit = array("pnl" => $pnl, "netdeposit" => $netdeposit);
    
    return $pnl_netdeposit;
}

function getNoTurnover($dpStart, $dpEnd, $desk, $employee, $regStatus)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = " SELECT
                customers.id,
                CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
                CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) AS employee,
                customers.currency,
                user_desks.deskId AS desk,
                TRUNCATE((IF(IFNULL((SELECT SUM(customer_deposits.amount)
                                     FROM customer_deposits
                                     WHERE customer_deposits.paymentMethod <> 'bonus'
                                     AND customer_deposits.status = 'approved'
                                     AND customer_deposits.customerId = customers.id),0)
                             -
                             IFNULL((SELECT SUM(withdrawals2.amount)
                                    FROM withdrawals AS withdrawals2
                                    WHERE withdrawals2.paymentMethod <> 'bonus'
                                    AND withdrawals2.status = 'approved'
                                    AND withdrawals2.customerId = customers.id),0)
                             -
                             customer_balance.pnl >=0,
                             IFNULL((SELECT SUM(customer_deposits.amount)
                                     FROM customer_deposits
                                     WHERE customer_deposits.paymentMethod <> 'bonus'
                                     AND customer_deposits.status = 'approved'
                                     AND customer_deposits.customerId = customers.id),0)
                              -
                              IFNULL((SELECT SUM(withdrawals2.amount)
                                      FROM withdrawals AS withdrawals2
                                      WHERE withdrawals2.paymentMethod <> 'bonus'
                                      AND withdrawals2.status = 'approved'
                                      AND withdrawals2.customerId = customers.id),0)
                              -
                              customer_balance.pnl, 0))*currencies.rateUSD,2) AS real_AB_USD,
                customers.regTime AS regTime,
                customers.firstDepositDate,
                customers.lastDepositDate,
                customers.regStatus,
                country.name AS country
             FROM customers
             LEFT JOIN customer_deposits ON customer_deposits.customerId = customers.id
             LEFT JOIN users ON customers.employeeInChargeId = users.id
             LEFT JOIN user_desks ON customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
             LEFT JOIN currencies ON customers.currency=currencies.code
             LEFT JOIN country ON country.id=customers.Country
             LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
             LEFT JOIN( SELECT turnover1.customerId AS customerId,  SUM(turnover1.amount) AS amount, SUM(turnover1.bet) AS bet,SUM(turnover1.payout) AS payout
                        FROM
                        (SELECT customerId, SUM(amount) as amount, COUNT(amount) as bet,SUM(payout) as payout
                         FROM onetouch_positions
                         WHERE status!='canceled'
                         AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                         GROUP BY customerId
                         UNION ALL
                         SELECT customerId, SUM(amount) as amount, COUNT(amount) as bet,SUM(payout) as payout
                         FROM positions
                         WHERE status!='canceled'
                         AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                         GROUP BY customerId
                         UNION ALL
                         SELECT customerId, SUM(investment) as amount, COUNT(investment) as bet,SUM(payout) as payout
                         FROM ldo_positions
                         WHERE status!='canceled'
                         AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                         GROUP BY customerId
                         UNION ALL
                         SELECT customerId, SUM(investment) as amount, COUNT(investment) as bet,SUM(payout) as payout
                         FROM forex_positions
                         WHERE status!='canceled'
                         AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                         GROUP BY customerId) AS turnover1
                         GROUP BY customerId
                       ) turnover ON customers.id = turnover.customerId
             WHERE turnover.amount IS NULL
                   AND customers.isDemo=0
                   AND  users.department='retention' ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }
    if ($desk != 0) {

        $sql .= " AND user_desks.deskId= " . $desk;
    }
    if($regStatus){
    	$sql .= " AND customers.regStatus IN ('".implode("','",$regStatus)."')";
    }
    $sql .= " GROUP BY customers.id
              HAVING real_AB_USD >= 100";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getMonthsForRetention($dpMonth, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT month.FDMonth,
	              COUNT(month.id) AS total_customers,
	              SUM(month.total_depositsUSD) AS total_depositsUSD
	     FROM
      ( SELECT customers.id,
             CONCAT(customers.firstName,' ',customers.lastName) AS customerName,
       IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affiliate,
     --  campaigns.name AS affiliate,
       CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS currentEmployee,
       DATE_FORMAT(customers.firstDepositDate,'%Y-%m') AS FDMonth,
       deposit.total_deposits AS total_depositsUSD,
       deposit.ConfirmMonth

       FROM customers
       LEFT JOIN campaigns ON campaigns.id=customers.campaignId
       LEFT JOIN users ON customers.employeeInChargeId=users.id
       LEFT JOIN user_desks ON user_desks.userId=customers.employeeInChargeId
       LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
       LEFT JOIN (SELECT customerId, SUM(amountUSD) AS total_deposits, DATE_FORMAT(confirmTime,'%Y-%m') AS ConfirmMonth
              FROM customer_deposits
              WHERE customer_deposits.status='approved'
					AND customer_deposits.paymentMethod<>'Bonus'
               GROUP BY customerId, ConfirmMonth) AS deposit ON deposit.customerId=customers.id
       WHERE users.department='retention'
           AND customers.isDemo=0
           AND deposit.ConfirmMonth='$dpMonth'";
    if (is_numeric($employee) && $employee != 0) {

        $sql .= " AND users.id=" . $employee;

    }


    if ($desk != 0) {

        $sql .= " AND user_desks.deskId= " . $desk;
    }

    $sql .= ") AS month
              GROUP BY FDMonth
              ORDER BY FDMonth DESC";

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;

}

function getCountry()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT iso , name FROM country GROUP BY name";

    $countries = $TradingPlatformDB->fetchAll($sql);
    return $countries;

}

function getCountryByName($name)
{
    $db = new spotDB_TradingPlatform();
    $sql = "SELECT * FROM hedgestonegroup_platform.country where name = '{$name}'";
    return $db->fetchRow($sql);
}

function editDeposit($deposits,$change_fields,$url)
{
    $spot_user = $_SESSION['userdata']['real_spotId'];
    $user_ip = getUserIpAddr();
   
    $db_Connect = new DB_Connect();
    
    $batch = array();
    $post_fields = array('MODULE' => 'CustomerDeposits',
                	     'COMMAND' => 'edit');
						 
	$post_fields = array_merge($post_fields,$change_fields);
						 
    foreach ($deposits as $key => $deposit) {
            
            $batch[] = array_merge($post_fields,array('depositId' => $deposit['depositId']));
            
        
    }
	
    $param = array('BATCH' => $batch);
    $spotCallBack = $db_Connect->spotAPIExec($param);
	$result = simplexml_load_string($spotCallBack);
	$non_successful = 0;
	$execute = 0;
	
	if($result->connection_status != "successful") die('{"deposit_error":"Api Connection Error: '.$result->errors->error->message.'"}');
	
	$sql = "INSERT INTO MainCoon.api_deposit_change_log (depositId,type,oldValue,newValue,spot_user,userIp,interface) VALUES ";
	
    foreach($deposits as $key => $deposit){
    	if($result->{'BATCH_'.$key}->operation_status != 'successful') 
    	   $non_successful++;
		else {
		   foreach($change_fields as $change_key => $change_value){	
		   	  if($deposit[$change_key]!=$change_value){
		   	     $sql .= " ({$deposit['depositId']},'$change_key','".$deposit[$change_key]."','$change_value','$spot_user','$user_ip','$url') ,";
			     $execute++;
			  }	  
		   }	 
		}
    }
	
	if($execute){
	  $sql = substr($sql,0,-1); 
	  $db_Connect->exec($sql);
	}
    if(!$non_successful)
	   return true;
	return $non_successful;

}

function editCustomer($customers,$change_fields,$url)
{
    $spot_user = $_SESSION['userdata']['real_spotId'];
    $user_ip = getUserIpAddr();
    
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $MainCoonDB = new MySqlDriver();
    
    $batch = array();
    $post_fields = array('MODULE' => 'Customer',
                	     'COMMAND' => 'edit');
						 
	$post_fields = array_merge($post_fields,$change_fields);
						 
    foreach ($customers as $key => $customer) {
            
            $batch[] = array_merge($post_fields,array('customerId' => $customer['customerId']));
            
        
    }
	
    $param = array('BATCH' => $batch);
    $spotCallBack = $TradingPlatformDB->spotAPIExec($param);
	$result = simplexml_load_string($spotCallBack);
	$non_successful = 0;
	$execute = 0;
	
	if($result->connection_status != "successful") die('{"error":"Api Connection Problem. Please try again"}');
	
	$sql = "INSERT INTO MainCoon.api_customer_change_log (customerId,type,oldValue,newValue,spot_user,userIp,interface) VALUES ";
	
    foreach($customers as $key => $customer){
    	if($result->{'BATCH_'.$key}->operation_status != 'successful') 
    	   $non_successful++;
		else {
		   foreach($change_fields as $change_key => $change_value){
		   	  if($customer[$change_key]!=$change_value){
		   	     $sql .= " ({$customer['customerId']},'$change_key','".$customer[$change_key]."','$change_value','$spot_user','$user_ip','$url') ,";
			     $execute++;
			  }	  
		   }	 
		}
    }
	
	if($execute){
	  $sql = substr($sql,0,-1); 
	  $MainCoonDB->exec($sql);
	}
    if(!$non_successful)
	   return true;
	return $non_successful;

}

function editCustomerForCustomersData($customers,$employee,$saleStatus){
	$customers = explode(',',$customers);
	$non_assigned = 0 ; 
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	foreach ($customers as $key => $value) {
       
            $spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                                                                  'COMMAND' => 'edit',
                                                                  'employeeInChargeId' => $employee,
                                                                  'saleStatus' => $saleStatus,
                                                                  'customerId' => $value
                                                                  ));
		    if (!strstr($spotCallBack, '<operation_status>successful</operation_status>'))
                 $non_assigned++;													  
    }
	
	if(!$non_assigned)
	   return 'success';
	return $non_assigned.' customers out of '.sizeof($customers).' could not be assigned';
	
}

function changeVIPGroupForCustomer($customerId,$group){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	$spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                                                          'COMMAND' => 'edit',
                                                          'customerId' => $customerId,
                                                          'vipGroup' => $group
                                                    ));
	if (strstr($spotCallBack, '<operation_status>successful</operation_status>'))
            return true;
    return false;											
}

function changePasswordForCustomer($customerId,$password){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	$spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                                                          'COMMAND' => 'edit',
                                                          'customerId' => $customerId,
                                                          'password' => $password
                                                    ));
	if (strstr($spotCallBack, '<operation_status>successful</operation_status>'))
            return true;
    return false;											
}

function addBonusDepositSpotApi($customerId,$amount,$leverage,$description){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $spotId= $_SESSION['userdata']['real_spotId'];
    $sql = "SELECT employeeInChargeId FROM customers WHERE id=$customerId";
    $employeeId = $TradingPlatformDB->fetchAll($sql);
    $employeeId = $employeeId[0]['employeeInChargeId'];
    $spotParams = array("MODULE" => "CustomerDeposits",
        "COMMAND" => "add",
        "customerId" => $customerId,
        "method" => "bonus",
        "amount" => $amount,
        "leverage" => $leverage,
        "receptionEmployeeId" => $employeeId,
        "processEmployeeId" => $spotId,
        "confirmEmployeeId" => $spotId,
        "description" => $description
    );

    $spotCallBack = $TradingPlatformDB->spotAPIExec($spotParams);
	
	if (!strstr($spotCallBack, '<operation_status>successful</operation_status>'))
	  return false; 
    return true;

}

function addBonusDepositByEmployee($customerId, $amount, $currency, $leverage, $description){
	
	$brandId = 2;
	
	if ($amount > 999999)
		return false;
	
	$SITEDB = new SITEDB();
	
	$TradingPlatformDB = new spotDB_TradingPlatform();
    $spotId= $_SESSION['userdata']['real_spotId'];
    $sql = "SELECT employeeInChargeId FROM customers WHERE id=$customerId";
    $employeeId = $TradingPlatformDB->fetchAll($sql);
    $employeeId = $employeeId[0]['employeeInChargeId'];
    
    $sql = "INSERT INTO " . $GLOBALS["site_name"] . "_site.customer_bonus (brandId, customerId, amount, currency, status, leverage, description, employeeId, employSpotId)
    	 VALUES ($brandId, $customerId, $amount, '$currency', 'Pending Customer', $leverage, '$description', $employeeId, $spotId);";
	
    $results = $SITEDB->exec($sql);

	if ($results)
		return true;
	else
		return false;
}

function addBonusWithdrawalSpotApi($customerId,$amount){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $spotId= $_SESSION['userdata']['real_spotId'];
    $sql = "SELECT employeeInChargeId FROM customers WHERE id=$customerId";
    $employeeId = $TradingPlatformDB->fetchAll($sql);
    $employeeId = $employeeId[0]['employeeInChargeId'];
    $spotParams = array("MODULE" => "Withdrawal",
        "COMMAND" => "add",
        "customerId" => $customerId,
        "method" => "bonus",
        "amount" => $amount,
        "receptionEmployeeId" => $employeeId,
        "processEmployeeId" => $spotId
    );

    $spotCallBack = $TradingPlatformDB->spotAPIExec($spotParams);
    
    if (!strstr($spotCallBack, '<operation_status>successful</operation_status>'))
	  return false; 
    return true;

}

function getRetentionCustomers($desk, $employee, $excEmployee, $countries, $drStart, $drEnd, $fdStart, $fdEnd, $ldStart, $ldEnd, $llStart, $llEnd, $lnStart, $lnEnd, $aStart, $aEnd, $saleStatus, $riskStatus, $closed)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
	$MainCoonDB = new MySqlDriver();
    set_time_limit(0);
	
	$pre_excludeEmployees = array();
	$sql = "SELECT exclude_employees.employeeId
	        FROM MainCoon.shuffle_exclude_employees AS exclude_employees
	        LEFT JOIN MainCoon.users ON MainCoon.users.id = exclude_employees.addUserId
	        LEFT JOIN hedgestonegroup_platform.users AS employees ON employees.id = exclude_employees.employeeId
	        LEFT JOIN hedgestonegroup_platform.user_desks AS desks ON desks.userId=employees.id";
	if($desk!=0)		 
	     $sql .= " WHERE desks.deskId=$desk";
	$result = $MainCoonDB->fetchAll($sql); 
	if(!is_string($result) && isset($result[0])){
		foreach($result as $key => $value){
			$pre_excludeEmployees[]= $result[$key]['employeeId'];
		}
	}
	
    $sql = "SELECT customers.id as customerId,
	   CONCAT(customers.FirstName,' ',customers.LastName)  as customerName ,
	   TRUNCATE(IFNULL((SELECT SUM(customer_deposits.amount)
               FROM customer_deposits
			   WHERE customer_deposits.status='approved'
			        AND customer_deposits.paymentMethod<>'Bonus'
			        AND customer_deposits.customerId=customers.id
			       )*currencies.rate,0),2) AS totalDepositUSD,
	   TRUNCATE(   ( IF(IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl, 0))*currencies.rate,2) AS realAccountBalanceUSD,
        IFNULL(communication.createDate,'0000-00-00 00:00:00') AS lastNote,
       IFNULL(communication.subject,'') AS subject,
       IFNULL(communication.body,'') AS note,
       customers.firstDepositDate,
	   IFNULL(MAX(deposit.confirmTime),'0000-00-00 00:00:00') AS lastDepositDate,
	   IFNULL(MAX(customer_login_log.dateLogin),'0000-00-00 00:00:00') AS lastLogin,
	   customers.regTime,
	   assign.date AS assignDate,
       country.name AS country,
       customers.saleStatus,
       IFNULL((SELECT rl.riskStatus
				         FROM MainCoon.customer_risk_status crs
				         LEFT JOIN MainCoon.risk_status_list rl ON rl.id = crs.riskStatusId
				         WHERE crs.spotId = customers.id
				         ORDER BY lastUpdate DESC
				         LIMIT 1
						 ),'') AS riskStatus,
       users.id AS employeeId,
       CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
       campaigns.name AS campaign
      FROM customers
      LEFT JOIN country ON country.id=customers.country
      LEFT JOIN customer_login_log ON customers.id=customer_login_log.customerId
      LEFT JOIN users ON users.id=customers.employeeInChargeId
      LEFT JOIN user_desks ON user_desks.userId=users.id
      LEFT JOIN ( SELECT * FROM customer_deposits WHERE paymentMethod<>'Bonus' AND status='approved') AS deposit ON deposit.customerId=customers.id
      LEFT JOIN currencies ON currencies.code=customers.currency
      LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
      LEFT JOIN (SELECT customerId,
                        MAX(date) as date
                        FROM customer_change_log
                        WHERE type='employeeInChargeId'
						GROUP BY customerId) AS assign ON assign.customerId=customers.id
	  LEFT JOIN (SELECT customer_communications.customerId,
	                    customer_communications.subject,
	                    customer_communications.body,
	                    customer_communications.createDate
					 FROM customer_communications
	                 RIGHT JOIN (SELECT customerId,
				              MAX(createDate) AS createDate
				                FROM customer_communications
				                LEFT JOIN users ON customer_communications.creatorId=users.id
				                WHERE users.department<>'backOffice'
								GROUP BY customer_communications.customerId
								 ) AS last ON last.customerId=customer_communications.customerId AND last.createDate=customer_communications.createDate
							  )
	         	AS communication ON communication.customerId=customers.id
	  LEFT JOIN campaigns ON campaigns.id=customers.campaignId       	
      WHERE users.department='retention'
            AND customers.isDemo=0
            AND firstDepositDate<>'0000-00-00 00:00:00'";
    if($employee==0 && $pre_excludeEmployees != array())
        $sql .= " AND users.id NOT IN (".implode(",", $pre_excludeEmployees).")"; 
    if(!($closed)){
        $sql .= " AND customers.FirstName NOT LIKE '%clos%'";
    }else{
        $sql .= " AND customers.FirstName LIKE '%clos%'";
    }
    if (sizeof($saleStatus) != 1) {
        $sql .= " AND customers.saleStatus IN (' " . implode( "' , '", $saleStatus ) . "  ') ";
    }    
    if($riskStatus)
        $sql .= " AND (SELECT crs.riskStatusId
				       FROM MainCoon.customer_risk_status crs
				       WHERE crs.spotId = customers.id
				       ORDER BY lastUpdate DESC
				       LIMIT 1
					  ) IN (".implode(",",$riskStatus).") ";
    if (sizeof($countries) != 1) {
        $sql .= " AND country.name IN (' " . implode("' , '", $countries) . "  ') ";
    }
    if (sizeof($excEmployee) != 1) {
        $sql .= " AND users.id NOT IN (' " . implode("' , '", $excEmployee) . "  ') ";
    }
    if ($desk != 0) {

        $sql .= " AND user_desks.deskId = " . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    if ($drStart) {
        $sql .= " AND customers.regTime BETWEEN '" . $drStart . " 00:00:00' AND '" . $drEnd . " 23:59:59' ";
    } else {

        $sql .= " AND customers.regTime <= '" . $drEnd . " 23:59:59' ";

    }
    if ($fdStart) {
        $sql .= " AND customers.firstDepositDate BETWEEN '" . $fdStart . " 00:00:00' AND '" . $fdEnd . " 23:59:59' ";
    } else {

        $sql .= " AND customers.firstDepositDate <= '" . $fdEnd . " 23:59:59' ";

    }

    $sql .= " GROUP BY customers.id";
    if ($ldStart) {
        $sql .= " HAVING lastDepositDate BETWEEN '" . $ldStart . " 00:00:00' AND '" . $ldEnd . " 23:59:59' ";
    } else {

        $sql .= " HAVING lastDepositDate <= '" . $ldEnd . " 23:59:59' ";

    }
    if ($lnStart) {
        $sql .= " AND lastNote BETWEEN '" . $lnStart . " 00:00:00' AND '" . $lnEnd . " 23:59:59' ";
    } else {

        $sql .= " AND lastNote <= '" . $lnEnd . " 23:59:59' ";

    }
    if ($llStart) {
        $sql .= " AND lastLogin BETWEEN '" . $llStart . " 00:00:00' AND '" . $llEnd . " 23:59:59' ";
    } else {

        $sql .= " AND lastLogin <= '" . $llEnd . " 23:59:59' ";

    }
    if ($aStart) {
        $sql .= " AND assignDate BETWEEN '" . $aStart . " 00:00:00' AND '" . $aEnd . " 23:59:59' ";
    } else {

        $sql .= " AND assignDate <= '" . $aEnd . " 23:59:59' ";

    }
    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;

}

function getDeskChangesForRetention($chStart,$chEnd,$deskFrom,$deskTo){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	$sql= "SELECT customer_change_log.id,
	              customers.id AS customerId,
	   			  CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
       			  oldDesk.name AS oldDesk,
       			  newDesk.name AS newDesk,
       			  CONCAT(oldEmployee.id,' - ',oldEmployee.firstName,' ',oldEmployee.lastName) AS oldEmployee,
       			  CONCAT(newEmployee.id,' - ',newEmployee.firstName,' ',newEmployee.lastName) AS newEmployee,
       			  customer_change_log.date
       	   FROM customer_change_log 
       	   FORCE INDEX (date)
	   	   INNER JOIN (SELECT customer_change_log.date, customerId FROM customer_change_log
                       LEFT JOIN users ON users.id=customer_change_log.newValue
                       WHERE type='employeeInChargeId' 
                             AND users.department='retention'
                             AND date<='$chEnd 23:59:59'
                       GROUP BY customerId
                       ) AS retention_customers ON retention_customers.customerId=customer_change_log.customerId  AND customer_change_log.date>retention_customers.date
       	   LEFT JOIN customers ON customers.id=customer_change_log.customerId
       	   LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
           LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
           LEFT JOIN user_desks AS olduser_desk ON olduser_desk.userId=oldEmployee.id
           LEFT JOIN user_desks AS newuser_desk ON newuser_desk.userId=newEmployee.id
           LEFT JOIN desks AS oldDesk ON oldDesk.id=olduser_desk.deskId
           LEFT JOIN desks AS newDesk ON newDesk.id=newuser_desk.deskId
           WHERE customers.isDemo=0
                 AND customer_change_log.type='employeeInChargeId'
                 AND customers.firstDepositDate<='$chEnd 23:59:59' AND customers.firstDepositDate<>'0000-00-00 00:00:00'
                 AND customer_change_log.date BETWEEN '$chStart 00:00:00' AND '$chEnd 23:59:59'
                 AND oldDesk.name<>newDesk.name
                 AND oldEmployee.department='retention'
                 AND newEmployee.department='retention'";
    if($deskFrom)
       $sql .= " AND oldDesk.id=$deskFrom";     
    if($deskTo)
       $sql .= " AND newDesk.id=$deskTo";
  
  $result = $TradingPlatformDB->fetchAll($sql);
  
  return $result;                 
}

function getFTDsByCampaign($fdStart,$fdEnd,$desk){
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $campaigns=array();
    $sql= "SELECT totals.campaignId, SUM(totals.totalDepositUSD) AS totalDepositUSD
	       FROM (SELECT  IFNULL(TRUNCATE((SELECT SUM(amount) FROM customer_deposits
                                            WHERE paymentMethod<>'Bonus'
                                                  AND status='approved'
                                                  AND customers.id=customer_deposits.customerId),2),0) AS totalDeposit,
                    IFNULL(TRUNCATE((SELECT SUM(amount) FROM customer_deposits
                                            WHERE paymentMethod<>'Bonus'
                                                  AND status='approved'
                                                  AND customers.id=customer_deposits.customerId)*currencies.rate,2),0) AS totalDepositUSD,
                    campaigns.id AS campaignId
                    FROM customers
                    LEFT JOIN users ON users.id=customers.employeeInChargeId
                    LEFT JOIN user_desks ON user_desks.userId=users.id
                    LEFT JOIN currencies ON currencies.code=customers.currency
                    LEFT JOIN campaigns ON campaigns.id=customers.campaignId
                    WHERE customers.isDemo=0
                          AND users.department='Retention'
                          AND customers.firstDepositDate BETWEEN '$fdStart' AND '$fdEnd'";
    if($desk)
        $sql .= " AND user_desks.deskId IN (".implode(',',$desk).")";
    $sql .= ") AS totals
             GROUP BY campaignId
             ORDER BY totalDepositUSD DESC";
    $result = $TradingPlatformDB->fetchAll($sql);
    foreach($result as $key=>$value){
        array_push($campaigns,$result[$key]['campaignId']);
    }
    $sql = " SELECT customers.id AS customerId,
                    CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                    country.name AS country,
                    customers.currency,
	                IFNULL(TRUNCATE((SELECT SUM(amount) FROM customer_deposits
                                            WHERE paymentMethod<>'Bonus'
                                                  AND status='approved'
                                                  AND customers.id=customer_deposits.customerId),2),0) AS totalDeposit,
                    IFNULL(TRUNCATE((SELECT SUM(amount) FROM customer_deposits
                                            WHERE paymentMethod<>'Bonus'
                                                  AND status='approved'
                                                  AND customers.id=customer_deposits.customerId)*currencies.rate,2),0) AS totalDepositUSD,
                    campaigns.id AS campaignId,
                    campaigns.name AS campaign,
                    customers.subCampaignId,
                    concat(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
                    desks.name AS desk,
                    DATE_FORMAT(customers.firstDepositDate,'%Y-%m') AS fdm
                    FROM customers
                    LEFT JOIN users ON users.id=customers.employeeInChargeId
                    LEFT JOIN user_desks ON user_desks.userId=users.id
                    LEFT JOIN desks ON desks.id=user_desks.deskId
                    LEFT JOIN currencies ON currencies.code=customers.currency
                    LEFT JOIN country ON country.id=customers.Country
                    LEFT JOIN campaigns ON campaigns.id=customers.campaignId
                    WHERE customers.isDemo=0
                          AND users.department='Retention'
                          AND customers.firstDepositDate BETWEEN '$fdStart' AND '$fdEnd'
                   ";
    if($desk)
        $sql .= " AND user_desks.deskId IN (".implode(',',$desk).")";
    if(sizeof($campaigns)!=0)
        $sql .= " ORDER BY FIELD(campaignId,".implode(',',$campaigns).")";
    $result = $TradingPlatformDB->fetchAll($sql);
    foreach($result as $key=>$value){
        $result[$key]['campaign']=preg_replace('~[\\\\/:*?"<>|() ]~', '_', $result[$key]['campaign']);
    }
    return $result;
}

function getTurnoverForRetention($dpStart, $dpEnd, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(45000);
    $sql = " SELECT  customers.id,
       CONCAT(customers.firstName,' ',customers.lastName) as customer,
       CONCAT(users.id, ' - ',users.firstName, ' ',users.lastName) as employee,
       customers.currency,
       IFNULL(sum(turnover.amount),0)*currencies.rateUSD as turnOverUSD
       FROM customers
       LEFT JOIN users on customers.employeeInChargeId=users.id
       LEFT JOIN user_desks on customers.employeeInChargeId=user_desks.userId
       LEFT JOIN currencies on customers.currency=currencies.code
       RIGHT JOIN( SELECT customerId, SUM(amount) as amount
                      FROM onetouch_positions
                      WHERE status!='canceled'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(amount) as amount
                      FROM positions
                      WHERE status!='canceled'
                      AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(investment) as amount
                      FROM ldo_positions
                      WHERE status!='canceled'
                      AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                      GROUP BY customerId
                  UNION ALL
                  SELECT customerId, SUM(investment) as amount
                      FROM forex_positions
                      WHERE status!='canceled'
                      AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                      GROUP BY customerId
                    ) turnover ON customers.id = turnover.customerId
                  WHERE
                        customers.isDemo = 0
                        AND customers.isLead = 0
                        AND  users.department='retention'
                        ";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }
    if ($employee != 0) {
        $sql .= " AND customers.employeeInChargeId = " . $employee;
    }
    $sql .= " GROUP BY customers.id";


    $customers = $TradingPlatformDB->fetchAll($sql);

    return $customers;

}

function getCurrentPricesForAssets($exEnd, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = "SELECT openAssets.assetId
	         FROM (SELECT (SELECT options.assetId FROM options
                          WHERE options.id=positions.optionId) as assetId
                   FROM positions
	               LEFT JOIN customers ON customers.id=positions.customerId
	               LEFT JOIN users ON users.id=customers.employeeInChargeId
	               LEFT JOIN user_desks ON user_desks.userId=users.id
                   WHERE positions.status='open'
                     AND customers.isDemo=0
                     and DATE(positions.opendDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
                     AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }

    $sql .= " UNION ALL
              SELECT onetouch_options.assetId
                   FROM onetouch_positions
	               LEFT JOIN customers ON customers.id=onetouch_positions.customerId
	               LEFT JOIN users ON users.id=customers.employeeInChargeId
	               LEFT JOIN user_desks ON user_desks.userId=users.id
	               LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                   WHERE onetouch_positions.status='open'
                     AND customers.isDemo=0
                     and DATE(onetouch_options.endTradeTime) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
                     AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }
    $sql .= " UNION ALL
			  SELECT ldo_positions.assetId
                   FROM ldo_positions
	               LEFT JOIN customers ON customers.id=ldo_positions.customerId
	               LEFT JOIN users ON users.id=customers.employeeInChargeId
	               LEFT JOIN user_desks ON user_desks.userId=users.id
                   WHERE ldo_positions.status='open'
                     AND customers.isDemo=0
                     and DATE(ldo_positions.endDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
                     AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }
    $sql .= "  UNION ALL
               SELECT forex_positions.assetId
                   FROM forex_positions
	               LEFT JOIN customers ON customers.id=forex_positions.customerId
	               LEFT JOIN users ON users.id=customers.employeeInChargeId
	               LEFT JOIN user_desks ON user_desks.userId=users.id
                   WHERE forex_positions.status='open'
                     AND customers.isDemo=0
                      and DATE(forex_positions.endDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
                     AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }

    $sql .= " ) AS openAssets
              GROUP BY assetId";

    $asset = $TradingPlatformDB->fetchAll($sql);
    $time = date('Y-m-d H:i:s', strtotime("-72 hours")); // time is chosen long enough that each asset has a last rate
    $batch = array();

    foreach ($asset as $key => $value) {

        array_push($batch, array('MODULE' => 'AssetsHistory',
                'COMMAND' => 'view',
                'FILTER' => array('assetId' => $asset[$key]['assetId'],
                    'date' => array('min' => $time)))
        );
    }
    $param = array('BATCH' => $batch);
    $spotCallBack = $TradingPlatformDB->spotAPIExec($param);


    return $spotCallBack;
}

function getCurrentPrice($asset)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $time = date('Y-m-d H:i:s', strtotime("-48 hours")); // time is chosen long enough that each asset has a last rate
    $spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'AssetsHistory',
        'COMMAND' => 'view',
        'FILTER[assetId]' => $asset,
        'FILTER[date][min]' => $time
    ));
    return $spotCallBack;
}

function getAssets($exStart, $exEnd, $desk)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT open_assets.assetId,
                 open_assets.assetName,
                 TRUNCATE(SUM(open_assets.amountUSD),2) AS totalUSD
                 FROM (SELECT assets.id AS assetId,
                          assets.name AS assetName,
                          TRUNCATE(positions.amount*currencies.rate,2) AS amountUSD,
                          positions.opendDate
                          FROM positions
                          LEFT JOIN customers ON customers.id=positions.customerId
                          LEFT JOIN options ON options.id=positions.optionId
                          LEFT JOIN assets ON assets.id=options.assetId
                          LEFT JOIN users ON users.id=customers.employeeInChargeId
                          LEFT JOIN user_desks ON user_desks.userId=users.id
                          LEFT JOIN currencies ON currencies.code=customers.currency
                          WHERE positions.status='open'
                                AND customers.isDemo=0
                                AND DATE(positions.opendDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
                                AND users.department='retention'";
    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }
    $sql .= " UNION ALL
             SELECT assets.id AS assetId,
                assets.name AS assetName,
                TRUNCATE(onetouch_positions.amount*currencies.rate,2) AS amountUSD,
                onetouch_options.endTradeTime AS opendDate
                FROM onetouch_positions
                LEFT JOIN customers ON customers.id=onetouch_positions.customerId
                LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
                LEFT JOIN assets ON assets.id=onetouch_options.assetId
                LEFT JOIN users ON users.id=customers.employeeInChargeId
                LEFT JOIN user_desks ON user_desks.userId=users.id
	            LEFT JOIN currencies ON currencies.code=customers.currency
                WHERE onetouch_positions.status='open'
                      AND customers.isDemo=0
                      AND DATE(onetouch_options.endTradeTime) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	                  AND users.department='retention'";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }
    $sql .= " UNION ALL
	          SELECT assets.id AS assetId,
                 assets.name AS assetName,
                 TRUNCATE(ldo_positions.investment*currencies.rate,2) AS amountUSD,
                 ldo_positions.endDate AS opendDate
                 FROM ldo_positions
                 LEFT JOIN customers ON customers.id=ldo_positions.customerId
                 LEFT JOIN assets ON assets.id=ldo_positions.assetId
                 LEFT JOIN users ON users.id=customers.employeeInChargeId
                 LEFT JOIN user_desks ON user_desks.userId=users.id
	             LEFT JOIN currencies ON currencies.code=customers.currency
                 WHERE ldo_positions.status='open'
                       AND customers.isDemo=0
                       AND DATE(ldo_positions.endDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	                   AND users.department='retention'";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }

    $sql .= " UNION ALL
              SELECT assets.id AS assetId,
                  assets.name AS assetName,
                  TRUNCATE(forex_positions.investment*currencies.rate,2) AS amountUSD,
                  forex_positions.endDate AS opendDate
                  FROM forex_positions
                  LEFT JOIN customers ON customers.id=forex_positions.customerId
                  LEFT JOIN assets ON assets.id=forex_positions.assetId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
                  LEFT JOIN user_desks ON user_desks.userId=users.id
	              LEFT JOIN currencies ON currencies.code=customers.currency
                  WHERE forex_positions.status='open'
                        AND customers.isDemo=0
                        AND DATE(forex_positions.endDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
		                AND users.department='retention'";


    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }

    $sql .= ") AS open_assets
               GROUP BY assetId
               ORDER BY totalUSD DESC ";

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;

}

function getOpenPositionsForChart($exStart, $exEnd, $desk, $assetId)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = " SELECT open_positions.*,
	                   TRUNCATE(((SELECT SUM(customer_deposits.amount)
                             FROM customer_deposits
							 WHERE customer_deposits.paymentMethod<>'Bonus'
							   AND customer_deposits.status='approved'
							   AND customer_deposits.customerId=open_positions.customerId)-
							   IFNULL((SELECT SUM(withdrawals.amount)
                             FROM withdrawals
							 WHERE withdrawals.paymentMethod<>'Bonus'
							   AND withdrawals.status='approved'
							   AND withdrawals.customerId=open_positions.customerId),0))*currencies.rate,2) AS totalDepositUSD,
					  TRUNCATE(customer_balance.pnl*currencies.rate,2) AS pnl
	           FROM (SELECT positions.id,
	                 customers.id AS customerId,
                     CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
                     customers.currency,
                     assets.id AS assetId,
                     assets.name AS assetName,
                     IF(positions.position='call','up','down') AS position,
                     positions.rate,
                     TRUNCATE(positions.amount*currencies.rate,2) AS amountUSD,
                     TRUNCATE((positions.amount*currencies.rate*(1+positions.opprofit/100)),2) AS potentialWinPayout,
                     positions.date,
                     positions.opendDate,
                     positions.status,
                     'positions' AS type,
                     CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                     FROM positions
                     LEFT JOIN customers ON customers.id=positions.customerId
                     LEFT JOIN options ON options.id=positions.optionId
                     LEFT JOIN assets ON assets.id=options.assetId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     LEFT JOIN currencies ON currencies.code=customers.currency
                     WHERE positions.status='open'
                          AND customers.isDemo=0
                          AND DATE(positions.opendDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	                      AND users.department='retention'
	                      AND assets.id=$assetId";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }

    $sql .= " UNION ALL
       SELECT onetouch_positions.id,
	          customers.id AS customerId,
              CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
              customers.currency,
              assets.id AS assetId,
              assets.name AS assetName,
              IF(onetouch_options.direction='above','up','down') AS position,
              TRUNCATE(onetouch_options.goalRate,6) AS rate,
              TRUNCATE(onetouch_positions.amount*currencies.rate,2) AS amountUSD,
              TRUNCATE((onetouch_positions.amount*currencies.rate*(1+onetouch_options.profit/100)),2) as potentialWinPayout,
              onetouch_positions.date,
              onetouch_options.endTradeTime AS opendDate,
              onetouch_positions.status,
              'onetouch_positions' AS type,
              CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
              FROM onetouch_positions
              LEFT JOIN customers ON customers.id=onetouch_positions.customerId
              LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
              LEFT JOIN assets ON assets.id=onetouch_options.assetId
              LEFT JOIN users ON users.id=customers.employeeInChargeId
              LEFT JOIN user_desks ON user_desks.userId=users.id
	          LEFT JOIN currencies ON currencies.code=customers.currency
              WHERE onetouch_positions.status='open'
                 AND customers.isDemo=0
                 AND DATE(onetouch_options.endTradeTime) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	             AND users.department='retention'
	             AND assets.id=$assetId";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }

    $sql .= "
	   UNION ALL
       SELECT ldo_positions.id,
	          customers.id AS customerId,
              CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
              customers.currency,
              assets.id AS assetId,
              assets.name AS assetName,
              IF(ldo_positions.direction='call','up','down') AS position,
              TRUNCATE(ldo_positions.startRate,6) AS rate,
              TRUNCATE(ldo_positions.investment*currencies.rate,2) AS amountUSD,
              TRUNCATE(ldo_positions.potentialWinPayout*currencies.rate,2) AS potentialWinPayout,
              ldo_positions.entryTime AS date,
              ldo_positions.endDate AS opendDate,
              ldo_positions.status,
              'ldo_positions' AS type,
              CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
              FROM ldo_positions
              LEFT JOIN customers ON customers.id=ldo_positions.customerId
              LEFT JOIN assets ON assets.id=ldo_positions.assetId
              LEFT JOIN users ON users.id=customers.employeeInChargeId
              LEFT JOIN user_desks ON user_desks.userId=users.id
	          LEFT JOIN currencies ON currencies.code=customers.currency
              WHERE ldo_positions.status='open'
                    AND customers.isDemo=0
                    AND DATE(ldo_positions.endDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	                AND users.department='retention'
	                AND assets.id=$assetId";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }

    $sql .= " UNION ALL
           SELECT forex_positions.id,
	              customers.id AS customerId,
                  CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
                  customers.currency,
                  assets.id AS assetId,
                  assets.name AS assetName,
                  IF(forex_positions.direction='call','up','down') AS position,
                  TRUNCATE(forex_positions.rate,6) AS rate,
                  TRUNCATE(forex_positions.investment*currencies.rate,2) AS amountUSD,
                  TRUNCATE((forex_positions.investment+forex_positions.takeProfit)*currencies.rate,2) AS potentialWinPayout,
                  forex_positions.entryTime AS date,
                  forex_positions.endDate AS opendDate,
                  forex_positions.status,
                  'forex_positions' AS type,
                  CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                  FROM forex_positions
                  LEFT JOIN customers ON customers.id=forex_positions.customerId
                  LEFT JOIN assets ON assets.id=forex_positions.assetId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
                  LEFT JOIN user_desks ON user_desks.userId=users.id
	              LEFT JOIN currencies ON currencies.code=customers.currency
                  WHERE forex_positions.status='open'
                     AND customers.isDemo=0
                     AND DATE(forex_positions.endDate) BETWEEN '" . $exStart . "' AND '" . $exEnd . "'
	                 AND users.department='retention'
	                 AND assets.id=$assetId";

    if ($desk != 0) {
        $sql .= " AND user_desks.deskId=$desk";
    }
    $sql .= " ) AS open_positions
                 LEFT JOIN currencies ON currencies.code=open_positions.currency
                 LEFT JOIN customer_balance ON customer_balance.customerId=open_positions.customerId";
    $sql .= " ORDER BY rate ASC";
    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;

}

function getOpenPositionsForRealPNL($exEnd, $desk, $employee)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = " SELECT open_positions.*,
	                   TRUNCATE(((SELECT SUM(customer_deposits.amount)
                             FROM customer_deposits
							 WHERE customer_deposits.paymentMethod<>'Bonus'
							   AND customer_deposits.status='approved'
							   AND customer_deposits.customerId=open_positions.customerId)-
							   IFNULL((SELECT SUM(withdrawals.amount)
                             FROM withdrawals
							 WHERE withdrawals.paymentMethod<>'Bonus'
							   AND withdrawals.status='approved'
							   AND withdrawals.customerId=open_positions.customerId),0))*currencies.rate,2) AS totalDepositUSD,
					  TRUNCATE(customer_balance.pnl*currencies.rate,2) AS pnl
	           FROM (SELECT positions.id,
	                 customers.id AS customerId,
                     CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
                     customers.currency,
                     assets.id AS assetId,
                     assets.name AS assetName,
                     IF(positions.position='call','up','down') AS position,
                     positions.rate,
                     TRUNCATE(positions.amount*currencies.rate,2) AS amountUSD,
                     TRUNCATE((positions.amount*currencies.rate*(1+positions.opprofit/100)),2) AS potentialWinPayout,
                     positions.date,
                     positions.opendDate,
                     positions.status,
                     'positions' AS type,
                     CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                     FROM positions
                     LEFT JOIN customers ON customers.id=positions.customerId
                     LEFT JOIN options ON options.id=positions.optionId
                     LEFT JOIN assets ON assets.id=options.assetId
                     LEFT JOIN users ON users.id=customers.employeeInChargeId
                     LEFT JOIN user_desks ON user_desks.userId=users.id
                     LEFT JOIN currencies ON currencies.code=customers.currency
                     WHERE positions.status='open'
                          AND customers.isDemo=0
                          AND DATE(positions.opendDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
	                      AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }

    $sql .= " UNION ALL
       SELECT onetouch_positions.id,
	          customers.id AS customerId,
              CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
              customers.currency,
              assets.id AS assetId,
              assets.name AS assetName,
              IF(onetouch_options.direction='above','up','down') AS position,
              TRUNCATE(onetouch_options.goalRate,6) AS rate,
              TRUNCATE(onetouch_positions.amount*currencies.rate,2) AS amountUSD,
              TRUNCATE((onetouch_positions.amount*currencies.rate*(1+onetouch_options.profit/100)),2) as potentialWinPayout,
              onetouch_positions.date,
              onetouch_options.endTradeTime AS opendDate,
              onetouch_positions.status,
              'onetouch_positions' AS type,
              CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
              FROM onetouch_positions
              LEFT JOIN customers ON customers.id=onetouch_positions.customerId
              LEFT JOIN onetouch_options ON onetouch_options.id=onetouch_positions.optionId
              LEFT JOIN assets ON assets.id=onetouch_options.assetId
              LEFT JOIN users ON users.id=customers.employeeInChargeId
              LEFT JOIN user_desks ON user_desks.userId=users.id
	          LEFT JOIN currencies ON currencies.code=customers.currency
              WHERE onetouch_positions.status='open'
                 AND customers.isDemo=0
                 AND DATE(onetouch_options.endTradeTime) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
	             AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }

    $sql .= "
	   UNION ALL
       SELECT ldo_positions.id,
	          customers.id AS customerId,
              CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
              customers.currency,
              assets.id AS assetId,
              assets.name AS assetName,
              IF(ldo_positions.direction='call','up','down') AS position,
              TRUNCATE(ldo_positions.startRate,6) AS rate,
              TRUNCATE(ldo_positions.investment*currencies.rate,2) AS amountUSD,
              TRUNCATE(ldo_positions.potentialWinPayout*currencies.rate,2) AS potentialWinPayout,
              ldo_positions.entryTime AS date,
              ldo_positions.endDate AS opendDate,
              ldo_positions.status,
              'ldo_positions' AS type,
              CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
              FROM ldo_positions
              LEFT JOIN customers ON customers.id=ldo_positions.customerId
              LEFT JOIN assets ON assets.id=ldo_positions.assetId
              LEFT JOIN users ON users.id=customers.employeeInChargeId
              LEFT JOIN user_desks ON user_desks.userId=users.id
	          LEFT JOIN currencies ON currencies.code=customers.currency
              WHERE ldo_positions.status='open'
                    AND customers.isDemo=0
                    AND DATE(ldo_positions.endDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
	                AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }

    $sql .= " UNION ALL
           SELECT forex_positions.id,
	              customers.id AS customerId,
                  CONCAT(customers.FirstName,' ',customers.LastName ) AS customerName,
       customers.currency,
                  assets.id AS assetId,
                  assets.name AS assetName,
                  IF(forex_positions.direction='call','up','down') AS position,
                  TRUNCATE(forex_positions.rate,6) AS rate,
                  TRUNCATE(forex_positions.investment*currencies.rate,2) AS amountUSD,
                  TRUNCATE((forex_positions.investment+forex_positions.takeProfit)*currencies.rate,2) AS potentialWinPayout,
                  forex_positions.entryTime AS date,
                  forex_positions.endDate AS opendDate,
                  forex_positions.status,
                  'forex_positions' AS type,
                  CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee
                      FROM forex_positions
                  LEFT JOIN customers ON customers.id=forex_positions.customerId
                  LEFT JOIN assets ON assets.id=forex_positions.assetId
                  LEFT JOIN users ON users.id=customers.employeeInChargeId
                  LEFT JOIN user_desks ON user_desks.userId=users.id
	              LEFT JOIN currencies ON currencies.code=customers.currency
                  WHERE forex_positions.status='open'
                     AND customers.isDemo=0
                     AND DATE(forex_positions.endDate) BETWEEN CURRENT_DATE() AND '" . $exEnd . "'
	                 AND users.department='retention'";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId=" . $desk;
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;
    }
    $sql .= " ) AS open_positions
                 LEFT JOIN currencies ON currencies.code=open_positions.currency
                 LEFT JOIN customer_balance ON customer_balance.customerId=open_positions.customerId";
    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;

}

function getFTDsForRetention($dpStart, $dpEnd, $desk, $employee,$campaign,$closed)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();
    set_time_limit(0);
    $sql = "SELECT ftds.customerId,
       CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
       country.name AS country,
       users.id AS employeeId,
       CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
       ftds.date,
       campaigns.name AS campaign,
       customers.subCampaignId,
       (SELECT COUNT(id) FROM customer_communications
            WHERE customer_communications.customerId=ftds.customerId
                 AND customer_communications.creatorId=users.id) AS notes,
      IFNULL((SELECT SUM(amountUSD) FROM customer_deposits
               WHERE customer_deposits.paymentMethod<>'Bonus'
                     AND customer_deposits.status='approved'
                     AND ftds.customerId=customer_deposits.customerId
                     AND users.id=customer_deposits.receptionEmployeeId
                     AND DATE(customer_deposits.confirmTime)=DATE(ftds.date)),0) AS dailyDepositUSD,
      IFNULL((SELECT SUM(amountUSD) FROM customer_deposits
               WHERE customer_deposits.paymentMethod<>'Bonus'
                     AND customer_deposits.status='approved'
                     AND ftds.customerId=customer_deposits.customerId
                     AND users.id=customer_deposits.receptionEmployeeId
                     AND DATE(customer_deposits.confirmTime) BETWEEN DATE(ftds.date) AND DATE(ftds.date)+7 ),0) AS weeklyDepositUSD,
      IFNULL((SELECT SUM(amountUSD) FROM customer_deposits
               WHERE customer_deposits.paymentMethod<>'Bonus'
                     AND customer_deposits.status='approved'
                     AND ftds.customerId=customer_deposits.customerId
                     AND users.id=customer_deposits.receptionEmployeeId),0) AS totalDepositUSD,
      IFNULL((SELECT SUM(amountUSD) FROM customer_deposits
               LEFT JOIN users ON users.id=customer_deposits.receptionEmployeeId
               WHERE customer_deposits.paymentMethod<>'Bonus'
                     AND customer_deposits.status='approved'
                     AND ftds.customerId=customer_deposits.customerId
					 AND users.department='retention'),0) AS retentionDepositUSD,
	  (SELECT COUNT(amountUSD) FROM customer_deposits
               LEFT JOIN users ON users.id=customer_deposits.receptionEmployeeId
               WHERE customer_deposits.paymentMethod<>'Bonus'
                     AND customer_deposits.status='approved'
                     AND ftds.customerId=customer_deposits.customerId
					 AND users.department='retention') AS numberDeposits,
      IF(customers.FirstName LIKE '%clos%','YES','NO') AS closed
    FROM ";
    if($desk==4){
	$sql .= " (SELECT new.customerId, customer_change_log.oldValue,customer_change_log.newValue, new.date
   		FROM customer_change_log
   		LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
   		LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
   		LEFT JOIN user_desks AS oldDesk on oldDesk.userId=customer_change_log.oldValue
   		LEFT JOIN user_desks AS newDesk on newDesk.userId=customer_change_log.newValue
   		RIGHT JOIN
   		(   SELECT customer_change_log.customerId, max(customer_change_log.date) AS date
            	FROM customer_change_log FORCE INDEX (date)
             	 	LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
              		LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
			  		LEFT JOIN user_desks ON user_desks.userId=customer_change_log.oldValue
              		LEFT JOIN
                 (SELECT customerId, date AS change_date FROM customer_change_log
                         WHERE type='employeeInChargeId'
						       AND oldValue='2290') AS assign ON assign.customerId=customer_change_log.customerId
			  WHERE DATE(customer_change_log.date)=DATE(assign.change_date)
					AND type='employeeInChargeId'
					AND customer_change_log.date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
					AND assign.customerId IS NOT NULL
				    AND newEmployee.id<>2357
					GROUP BY customerId

                    ) AS new ON new.customerId=customer_change_log.customerId AND new.date=customer_change_log.date
	     WHERE customer_change_log.type='employeeInChargeId'
           AND newEmployee.id<>2290
          ) AS ftds ";
    }else {
    $sql .= " (SELECT new.customerId, customer_change_log.oldValue,customer_change_log.newValue, new.date
   		FROM customer_change_log
   		RIGHT JOIN
   		(   SELECT customer_change_log.customerId, max(customer_change_log.date) AS date
            	FROM customer_change_log
             	 	LEFT JOIN users AS oldEmployee ON oldEmployee.id=customer_change_log.oldValue
              		LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
			  		LEFT JOIN user_desks ON user_desks.userId=customer_change_log.oldValue
              		INNER JOIN
                 (SELECT customer_change_log.customerId, customer_change_log.date AS change_date
                   FROM customer_change_log
                   RIGHT JOIN ( SELECT id, firstDepositDate FROM customers 
			                    WHERE customers.firstDepositDate<>'0000-00-00 00:00:00'
                                AND customers.isDemo=0) AS ftd_customers ON ftd_customers.id=customer_change_log.customerId AND ftd_customers.firstDepositDate<=customer_change_log.date
                   LEFT JOIN users AS newEmployee ON newEmployee.id=customer_change_log.newValue
                   WHERE oldValue=63
                   AND customer_change_log.type='employeeInChargeId'
                   AND newEmployee.department<>'Sales'
				   GROUP BY customerId) AS assign ON assign.customerId=customer_change_log.customerId
			  WHERE DATE(customer_change_log.date)=DATE(assign.change_date)
					AND type='employeeInChargeId'
					AND DATE(customer_change_log.date) BETWEEN '" . $dpStart . "' AND '" . $dpEnd . "'
					GROUP BY customerId
                    ) AS new ON new.customerId=customer_change_log.customerId AND new.date=customer_change_log.date
	     WHERE customer_change_log.type='employeeInChargeId'
          ) AS ftds "; 	
    }
    $sql .= " 
  	LEFT JOIN users ON users.id=ftds.newValue
  	LEFT JOIN user_desks ON user_desks.userId=ftds.newValue
  	LEFT JOIN customers ON customers.id=ftds.customerId
  	LEFT JOIN country ON country.id=customers.country
  	LEFT JOIN campaigns ON campaigns.id=customers.campaignId

  	WHERE customers.isDemo=0
     	AND users.department='retention'
    	AND user_desks.deskId=$desk";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND users.id=" . $employee;

    }
    if($campaign)
        $sql .= " AND campaigns.id IN (".implode(",",$campaign).")";
    if($closed)
        $sql .= " AND customers.FirstName NOT LIKE '%CLOS%'";

    $sql .= " GROUP BY customerId";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;
}


function getDepositsDocumentStatus($dpStart, $dpEnd, $desk, $affiliate, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT
                customers.id,
                CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
                customers.verification,
                country.name as countryName,
                CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) AS employee,
                count(customer_deposits.amountUSD) as numberDeposits,
                SUM(customer_deposits.amountUSD) AS amountUSD,
                MIN(customer_deposits.confirmTime) AS firstDepositDate,
                (SELECT count(cardNum) FROM creditcard_users WHERE creditcard_users.customerId=customers.id) as ccTotal,
                COALESCE(user_desks.deskId,1) as desk,
                IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
           		IF(IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = customers.id),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = customers.id),0)
                    -
                    customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = customers.id),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = customers.id),0)
                    -
                    customer_balance.pnl, 0) AS real_account_balance

            FROM customer_deposits
            RIGHT JOIN customers ON customer_deposits.customerId = customers.id
            LEFT JOIN users ON customers.employeeInChargeId = users.id
            LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
            LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
            LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
			LEFT JOIN country ON (customers.Country = country.id)
            WHERE customer_deposits.paymentMethod != 'Bonus'
            AND customers.isDemo=0
            AND customers.regTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' ";

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    $sql .= " GROUP BY customers.id ";
    $sql .= " HAVING firstDepositDate IS NOT NULL ";
    if ($desk != 0) {
        $sql .= " AND desk = " . $desk;
    }

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getSpeedVerification($dpStart, $dpEnd, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT customers.id, CONCAT(customers.FirstName,' ', customers.LastName) AS customerName, country.name as countryName, firstDepositDate,
			@PartialVerificationStatus := CASE
			WHEN c_c_l1.oldValue='None' and c_c_l1.newValue='Full' THEN c_c_l1.date
			WHEN c_c_l1.oldValue='None' and c_c_l1.newValue='Partial' THEN c_c_l1.date
			END as PartialVerificationStatus,
			@FullVerificationStatus := CASE
			WHEN c_c_l2.oldValue='None' and c_c_l2.newValue='Full' THEN c_c_l2.date
			WHEN c_c_l2.oldValue='Partial' and c_c_l2.newValue='Full' THEN c_c_l2.date
			END as FullVerificationStatus,
			TIMESTAMPDIFF(HOUR, regTime, @PartialVerificationStatus) as DeltaNonetoPartialOrFull,
			TIMESTAMPDIFF(HOUR, @PartialVerificationStatus, @FullVerificationStatus) as DeltaPartialtoFull,
			COALESCE(user_desks.deskId,1) as desk
			FROM " . $GLOBALS["site_name"] . "_platform.customers
			LEFT JOIN country ON (customers.Country = country.id)
			LEFT JOIN customer_change_log as c_c_l1 ON (customers.id = c_c_l1.customerId and c_c_l1.oldValue='None')
			LEFT JOIN customer_change_log as c_c_l2 ON (customers.id = c_c_l2.customerId and c_c_l2.newValue='Full')
			LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
			where c_c_l1.newValue != '' and c_c_l2.newValue != '' AND customers.isDemo=0

            AND customers.regTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    $sql .= " GROUP BY customers.id ";
    $sql .= " HAVING firstDepositDate IS NOT NULL ";
    if ($desk != 0) {
        $sql .= " AND desk = " . $desk;
    }

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getWithdrawals($dpStart, $dpEnd, $desk, $employee)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT
                customers.id,
                CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
                customers.verification,
                CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) AS employee,
                count(withdrawals.amountUSD) as numberWithdrawals,
                SUM(withdrawals.amountUSD) AS amountUSD,
                customers.firstDepositDate AS firstDepositDate,
                COALESCE(user_desks.deskId,1) as desk,
                SUM(IF(withdrawals.status = 'approved', 1, 0)) AS apWithdrawals,
                SUM(IF(withdrawals.status = 'rejected', 1, 0)) + SUM(IF(withdrawals.status = 'canceled', 1, 0)) AS dcWithdrawals,
                SUM(IF(withdrawals.status = 'pending', 1, 0)) AS pnWithdrawals

            FROM withdrawals
            RIGHT JOIN customers ON withdrawals.customerId = customers.id
            LEFT JOIN users ON customers.employeeInChargeId = users.id
            LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
            WHERE withdrawals.paymentMethod != 'Bonus'
            AND withdrawals.paymentMethod != 'chargeBack'
            AND customers.isDemo=0
            AND customers.regTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    $sql .= " GROUP BY customers.id ";
    if ($desk != 0) {
        $sql .= " HAVING desk = " . $desk;
    }

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getChargebacks($dpStart, $dpEnd, $desk, $affiliate, $employee)
{

    $rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}', true);

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT  withdrawals.id,
              withdrawals.customerId,
              withdrawals.paymentMethod,
              CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
              withdrawals.amountUSD,
              withdrawals.confirmTime,
              withdrawals.amount,
              withdrawals.currency,
              COALESCE(user_desks.deskId,1) as desk,
              customers.verification,
			  IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
			  CONCAT(users.id, ' - ', users.firstName,' ',users.lastName) as employeeInChargeName,

			  IF(IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl, 0) AS real_account_balance

              FROM " . $GLOBALS["site_name"] . "_platform.withdrawals
              LEFT JOIN " . $GLOBALS["site_name"] . "_platform.customers on withdrawals.customerId = customers.id
              LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
              LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks on customers.employeeInChargeId = user_desks.userId
              LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
              LEFT JOIN users on (customers.employeeInChargeId = users.id)
              WHERE " . $GLOBALS["site_name"] . "_platform.withdrawals.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
              AND " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
              AND " . $GLOBALS["site_name"] . "_platform.withdrawals.status = 'approved'
              AND withdrawals.paymentMethod = 'chargeBack'";

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    if ($desk != 0) {
        $sql .= " having desk = " . $desk;
    }

    $sql .= ";";


    $results = $TradingPlatformDB->fetchAll($sql);

    foreach ($results as $key => $data) {

        if ($results[$key]['amountUSD'] == 0) {
            $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
            $USDrate = $rates[$dkey][$results[$key]['currency']];
            if (isset($USDrate))
                $results[$key]['amountUSD'] = number_format($results[$key]['amount'] * $USDrate, 2, ".", "");
        }

    }

    return $results;

}

function getWithdrawalRequests($dpStart, $dpEnd, $desk, $affiliate, $employee)
{
    $rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}', true);

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT  withdrawals.id,
              withdrawals.customerId,
              withdrawals.paymentMethod,
              CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
              country.name as country,
              withdrawals.amountUSD,
              withdrawals.requestTime,
              withdrawals.confirmTime,
              withdrawals.amount,
              withdrawals.currency,
              IF(IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                   FROM customer_deposits
                   WHERE customer_deposits.paymentMethod <> 'bonus'
                   AND customer_deposits.status = 'approved'
               AND customer_deposits.customerId = withdrawals.customerId),0)
              -
              IFNULL((SELECT SUM(withdrawals2.amount)
                     FROM withdrawals AS withdrawals2
                     WHERE withdrawals2.paymentMethod <> 'bonus'
                     AND withdrawals2.status = 'approved'
                     AND withdrawals2.customerId = withdrawals.customerId),0)
                    -
                    customer_balance.pnl, 0) AS real_account_balance,
              COALESCE(user_desks.deskId,1) as desk,
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
              CONCAT(users.id, ' - ', users.firstName,' ',users.lastName) as employeeInChargeName

              FROM withdrawals
              LEFT JOIN customers ON withdrawals.customerId = customers.id
              LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
              LEFT JOIN user_desks ON customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
              LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
              LEFT JOIN users ON (customers.employeeInChargeId = users.id)
              LEFT JOIN country ON (customers.country = country.id)
              WHERE withdrawals.requestTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
              AND withdrawals.status = 'pending'
              AND customers.isDemo=0";

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    #$sql .= " GROUP BY withdrawals.id ";

    if ($desk != 0) {
        $sql .= " HAVING desk = " . $desk;
    }

    $sql .= ";";
    $results = $TradingPlatformDB->fetchAll($sql);
    if (!$results) {
        return false;
    } else {
        $arrIds = array();
        foreach ($results as $key => $data) {
            if ($results[$key]['amountUSD'] == 0) {
                $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
                $USDrate = $rates[$dkey][$results[$key]['currency']];
                if (isset($USDrate))
                    $results[$key]['amountUSD'] = number_format($results[$key]['amount'] * $USDrate, 2, ".", "");
            }
            $arrIds[$data['customerId']] = $data['customerId'];

        }

        $subSQL = "SELECT customerId, paymentMethod, clearedBy
	                  FROM customer_deposits
	                  WHERE paymentMethod != 'Bonus' ";
        $subSQL .= " AND customerId IN (" . implode(',', $arrIds) . ")";
        $subSQL .= " GROUP BY customerId, paymentMethod, clearedBy
	                   ORDER BY confirmTime DESC";
        $subResults = $TradingPlatformDB->fetchAll($subSQL);
        foreach ($results as $key => $data) {
            $results[$key]['deposits'] = '';
            $results[$key]['clearings'] = '';
            $arr_deposits = array();
            $arr_clearings = array();
            foreach ($subResults as $subKey => $subData) {
                if ($data['customerId'] == $subData['customerId']) {
                    if (strlen($subData['paymentMethod'])) {
                        $arr_deposits[$subData['paymentMethod']] = $subData['paymentMethod'];
                    }
                    if (strlen($subData['clearedBy'])) {
                        $arr_clearings[$subData['clearedBy']] = $subData['clearedBy'];
                    }
                }
            }
            $results[$key]['deposits'] = implode(', ', $arr_deposits);
            $results[$key]['clearings'] = implode(', ', $arr_clearings);
        }
        return $results;
    }
}

function getRetentionWithdrawals($wStart,$wEnd,$desk,$customerId){
    $config = new config();
    $data = array();
    set_time_limit(0);
    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'),true) or die('{"error":"Missing arguments"}');
    mysql_set_charset("utf8", $_Link);
    $month=date('Y-m-01',strtotime($wEnd));
    $sql= "SELECT hedgestonegroup_platform.withdrawals.id,
	              hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
	              hedgestonegroup_platform.customers.currency,
	              hedgestonegroup_platform.withdrawals.paymentMethod,
	              hedgestonegroup_platform.withdrawals.clearedBy,
	              hedgestonegroup_platform.withdrawals.confirmTime,
	              hedgestonegroup_platform.withdrawals.amount,
	              hedgestonegroup_platform.withdrawals.amountUSD,
	              IFNULL((SELECT CAST(MainCoon.monthly_withdrawals.amount AS DECIMAL(10,2))
	                      FROM MainCoon.monthly_withdrawals
	                      WHERE  MainCoon.monthly_withdrawals.month='$month'
	                           AND hedgestonegroup_platform.customers.id=MainCoon.monthly_withdrawals.customerId
	                      ),0) AS addedAmount
	              FROM hedgestonegroup_platform.withdrawals
	              LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.withdrawals.customerId
	              LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=hedgestonegroup_platform.customers.employeeInChargeId
	              LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.users.id
	              WHERE hedgestonegroup_platform.withdrawals.status='approved'
        	            AND hedgestonegroup_platform.withdrawals.paymentMethod<>'Bonus'
	                    AND hedgestonegroup_platform.customers.isDemo=0
	                    AND DATE(hedgestonegroup_platform.withdrawals.confirmTime) BETWEEN '$wStart' AND '$wEnd'";
    if($customerId)
        $sql .= " AND hedgestonegroup_platform.customers.id=".$customerId;
    if($desk !=0)
        $sql .= " AND hedgestonegroup_platform.user_desks.deskId=".$desk;

    $result =mysql_query($sql);
    if ($result)
    {
        while($row = mysql_fetch_assoc($result))
        {
            $data[] = $row;
        }
    }
    if(!$data) {
        return false;}
    mysql_close( $_Link );
    return $data;
}

function getAgentWithdrawalsForCustomer($month,$customerId,$desk){
    $MainCoonDB = new MySqlDriver();
    $sql = "SELECT MainCoon.retention_withdrawals.id,
	               hedgestonegroup_platform.users.id AS employeeId,
	               CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
	               MainCoon.retention_withdrawals.date,
	               MainCoon.monthly_withdrawals.currency,
	               MainCoon.retention_withdrawals.amount,
	               MainCoon.retention_withdrawals.type,
	               MainCoon.retention_withdrawals.userName,
	               MainCoon.retention_withdrawals.lastUpdate,
	               customers.id AS customerId,
	               CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
	               MainCoon.retention_withdrawals.isAdded
	               FROM MainCoon.retention_withdrawals
	               LEFT JOIN MainCoon.monthly_withdrawals ON MainCoon.monthly_withdrawals.id=MainCoon.retention_withdrawals.monthlyWithdrawalId
	               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=MainCoon.monthly_withdrawals.customerId
	               LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.users.id=MainCoon.retention_withdrawals.employeeId
	               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.users.id
	               WHERE MainCoon.monthly_withdrawals.month='{$month}-01'";
    if($customerId)
        $sql .= " AND MainCoon.monthly_withdrawals.customerId=$customerId ";
    if(!empty($desk))
        $sql .= " AND hedgestonegroup_platform.user_desks.deskId=$desk";
    $result= $MainCoonDB->fetchAll($sql);
    return $result;
}

function getRealTransactionsForWithdrawals($customerId){

    $config = new config();
    $data = array();
    set_time_limit(0);
    $_Link = mysql_connect($config::get_host_name('amazon'), $config::get_user_name('amazon'), $config::get_pass('amazon'),true) or die('{"error":"Missing arguments"}');
    mysql_set_charset("utf8", $_Link);
    $sql = "SELECT  MainCoon.commission.depositId AS id,
		           hedgestonegroup_platform.customers.id AS customerId,
                   CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                   real_deposit.paymentMethod AS paymentMethod,
                   real_deposit.currency AS currency,
                   TRUNCATE(real_deposit.amount*(MainCoon.commission.percent/100),2) AS amount,
		           TRUNCATE(real_deposit.amountUSD*(MainCoon.commission.percent/100),2) AS amountUSD,
                   real_deposit.confirmTime AS confirmTime,
                   date(real_deposit.confirmTime) AS confirmDate,
                   real_deposit.status AS status,
                   real_deposit.clearedBy AS clearedBy,
		           real_deposit.verification AS verification,
		           hedgestonegroup_platform.users.id AS employeeId,
                   CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                   hedgestonegroup_platform.user_desks.deskId AS desk,
                   CONCAT('%',MainCoon.commission.percent) AS percentage
             FROM
             (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.status='approved'
                     AND hedgestonegroup_platform.customers.isDemo=0
                     AND hedgestonegroup_platform.users.department='retention'
                     AND hedgestonegroup_platform.customers.id=$customerId
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                  AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
				  AND hedgestonegroup_platform.customers.id=$customerId) AS real_deposit
        RIGHT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
		LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
		LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission.receptionEmployeeId=hedgestonegroup_platform.users.id
		LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission.receptionEmployeeId
        WHERE real_deposit.customerId IS NOT NULL

        UNION ALL

        SELECT real_deposit.id AS id,
		       hedgestonegroup_platform.customers.id AS customerId,
               CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
               real_deposit.paymentMethod AS paymentMethod,
               real_deposit.currency AS currency,
               TRUNCATE(real_deposit.amount*((100-MainCoon.commission.percent)/100),2) AS amount,
		       TRUNCATE(real_deposit.amountUSD*((100-MainCoon.commission.percent)/100),2) AS amountUSD,
               real_deposit.confirmTime AS confirmTime,
               date(real_deposit.confirmTime) AS confirmDate,
               real_deposit.status AS status,
               real_deposit.clearedBy AS clearedBy,
		       real_deposit.verification AS verification,
		       hedgestonegroup_platform.users.id AS employeeId,
               CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
               hedgestonegroup_platform.user_desks.deskId AS desk,
               CONCAT('%',(100-MainCoon.commission.percent)) AS percentage
               FROM
                    (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.status='approved'
                     AND hedgestonegroup_platform.customers.isDemo=0
                     AND hedgestonegroup_platform.users.department='retention'
                     AND hedgestonegroup_platform.customers.id=$customerId
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                  DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                  AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
				  AND hedgestonegroup_platform.customers.id=$customerId) AS real_deposit
             INNER JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
             LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
		     WHERE hedgestonegroup_platform.customers.isDemo=0

             UNION ALL

             SELECT   real_deposit.id AS id,
		              hedgestonegroup_platform.customers.id AS customerId,
                      CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                      real_deposit.paymentMethod AS paymentMethod,
                      real_deposit.currency AS currency,
                      TRUNCATE(real_deposit.amount,2) AS amount,
		              TRUNCATE(real_deposit.amountUSD,2) AS amountUSD,
                      real_deposit.confirmTime AS confirmTime,
                      date(real_deposit.confirmTime) AS confirmDate,
                      real_deposit.status AS status,
                      real_deposit.clearedBy AS clearedBy,
		              real_deposit.verification AS verification,
		              hedgestonegroup_platform.users.id AS employeeId,
                      CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                      hedgestonegroup_platform.user_desks.deskId AS desk,
                      '%100' AS percentage
             FROM
                 (SELECT MainCoon.commission_full_deposit.depositId AS id,
                     hedgestonegroup_platform.customers.id AS customerId,
	                 CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                     hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                     hedgestonegroup_platform.customer_deposits.currency AS currency,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                     TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                     hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                     DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                     hedgestonegroup_platform.customer_deposits.status AS status,
                     hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                     hedgestonegroup_platform.customers.verification AS verification,
                     CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                     hedgestonegroup_platform.user_desks.deskId AS desk,
                     '%100' AS percentage
               FROM hedgestonegroup_platform.customer_deposits
	           RIGHT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
               LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customer_deposits.customerId=hedgestonegroup_platform.customers.id
               LEFT JOIN hedgestonegroup_platform.users ON MainCoon.commission_full_deposit.receptionEmployeeId=hedgestonegroup_platform.users.id
               LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=MainCoon.commission_full_deposit.receptionEmployeeId
               WHERE hedgestonegroup_platform.customer_deposits.status='approved'
                    AND hedgestonegroup_platform.customers.isDemo=0
                    AND  hedgestonegroup_platform.users.department='retention'
                    AND hedgestonegroup_platform.customers.id=$customerId
            UNION ALL

            SELECT hedgestonegroup_platform.customer_deposits.id AS id,
		          hedgestonegroup_platform.customers.id AS customerId,
	              CONCAT(hedgestonegroup_platform.customers.FirstName,' ',hedgestonegroup_platform.customers.LastName) AS customerName,
                  hedgestonegroup_platform.customer_deposits.paymentMethod AS paymentMethod,
                  hedgestonegroup_platform.customer_deposits.currency,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amount,2) AS amount,
                  TRUNCATE(hedgestonegroup_platform.customer_deposits.amountUSD,2) AS amountUSD,
                  hedgestonegroup_platform.customer_deposits.confirmTime AS confirmTime,
                   DATE(hedgestonegroup_platform.customer_deposits.confirmTime) AS date,
                  hedgestonegroup_platform.customer_deposits.status AS status,
                  hedgestonegroup_platform.customer_deposits.clearedBy AS clearedBy,
                  hedgestonegroup_platform.customers.verification AS verification,
                  CONCAT(hedgestonegroup_platform.users.id,' - ',hedgestonegroup_platform.users.firstName,' ',hedgestonegroup_platform.users.lastName) AS employee,
                  hedgestonegroup_platform.user_desks.deskId AS desk,
                  '%100' AS percentage
             FROM hedgestonegroup_platform.customer_deposits
             LEFT JOIN MainCoon.commission_full_deposit ON hedgestonegroup_platform.customer_deposits.id=MainCoon.commission_full_deposit.depositId
             LEFT JOIN hedgestonegroup_platform.customers ON hedgestonegroup_platform.customers.id=hedgestonegroup_platform.customer_deposits.customerId
             LEFT JOIN hedgestonegroup_platform.users ON hedgestonegroup_platform.customer_deposits.receptionEmployeeId=hedgestonegroup_platform.users.id
             LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=hedgestonegroup_platform.customer_deposits.receptionEmployeeId
             WHERE  MainCoon.commission_full_deposit.depositId IS NULL
                  AND hedgestonegroup_platform.customer_deposits.paymentMethod<>'Bonus'
                  AND hedgestonegroup_platform.customer_deposits.status='approved'
                  AND hedgestonegroup_platform.users.department='retention'
                  AND hedgestonegroup_platform.customers.isDemo=0
				  AND hedgestonegroup_platform.customers.id=$customerId) AS real_deposit
        LEFT JOIN MainCoon.commission ON real_deposit.id=MainCoon.commission.depositId
        LEFT JOIN hedgestonegroup_platform.customers ON real_deposit.customerId=hedgestonegroup_platform.customers.id
        LEFT JOIN hedgestonegroup_platform.users ON real_deposit.employee=hedgestonegroup_platform.users.id
        LEFT JOIN hedgestonegroup_platform.user_desks ON hedgestonegroup_platform.user_desks.userId=real_deposit.employee
        WHERE MainCoon.commission.depositId IS NULL";
    $result =mysql_query($sql);
    if ($result)
    {
        while($row = mysql_fetch_assoc($result))
        {
            $data[] = $row;
        }
    }
    if(!$data) {
        return false;}
    mysql_close( $_Link );
    return $data;
}

function getProfitLoss($dpStart, $dpEnd, $desk, $affiliate)
{

    $rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}', true);

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();


    $sql = "SELECT
                customers.id,
                customer_deposits.amount amount,
                customer_deposits.currency,
                IF(customer_deposits.paymentMethod='Bonus','-',IF(customers.firstDepositDate = customer_deposits.confirmTime, 1, 0)) as FTD,
                'Deposit' as ttype ,
                COALESCE(user_desks.deskId,1) as desk,
                #IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) as aff_id,
                IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
                IF(
                    (
                      SELECT
                        MIN(calls.date)
                      FROM
                        " . $GLOBALS["site_name"] . "_platform.calls
                      WHERE
                        customer_deposits.customerId = calls.clientId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(calls.date)
                    FROM
                      " . $GLOBALS["site_name"] . "_platform.calls
                    WHERE
                      customer_deposits.customerId = calls.clientId
                  ),1,0) as self_deposit
                FROM customers
                LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                LEFT JOIN customer_deposits on customer_deposits.customerId = customers.id
                LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
                WHERE customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                AND customer_deposits.status = 'approved'
                AND customers.isDemo=0
                and customer_deposits.paymentMethod != 'bonus'
              ";


    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $aff_id['aff_id'] . "'";
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $affiliate . "'";
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if ($desk != 0) {
        $sql .= " having desk = " . $desk;
    }

    $sql .= ";";

    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $key => $data) {

        if ($results[$key]['amountUSD'] == 0) {
            $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
            $USDrate = $rates[$dkey][$results[$key]['currency']];
            if (isset($USDrate))
                $results[$key]['amountUSD'] = number_format($results[$key]['amount'] * $USDrate, 2, ".", "");
        }

    }


    // print_r($results); die;
    return $results;

}

function getGamingTax($dpStart, $dpEnd, $desk)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT
                CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                  customers.id,
                  COALESCE(user_desks.deskId,1) as desk,
                  sum(COALESCE(turnover.amount, 0)) as turnover,
                  (SELECT
                          IFNULL(SUM(customer_deposits.amountUSD), 0)
                      FROM
                          customer_deposits
                      WHERE
                          customers.id = customer_deposits.customerId
                              AND customer_deposits.status = 'approved'
                              AND customer_deposits.paymentMethod != 'Bonus'
                              #AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                              ) AS 'totalDeposits',
                  (SELECT
                          IFNULL(SUM(customer_deposits.amountUSD), 0)
                      FROM
                          customer_deposits
                      WHERE
                          customers.id = customer_deposits.customerId
                              AND customer_deposits.status = 'approved'
                              AND customer_deposits.paymentMethod = 'Bonus'
                              #AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                              ) AS 'totalDepositsBonuses'
              from
                  customers
                      LEFT JOIN
                        user_desks ON customers.employeeInChargeId = user_desks.userId
                      LEFT JOIN
                  (
                    SELECT
                        customerId, SUM(amountUSD) as amount, COUNT(customerId) as bets
                    FROM
                        onetouch_positions
                    WHERE
                        status != 'canceled'
                            AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId 
                    UNION ALL 
                    SELECT
                        customerId, SUM(amountUSD) as amount, COUNT(customerId) as bets
                    FROM
                        positions
                    WHERE
                        status != 'canceled'
                            AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                    GROUP BY customerId 
                    UNION ALL 
                    SELECT
                        customerId,
                            SUM(investmentUSD) as amount,
                            COUNT(customerId) as bets
                    FROM
                        ldo_positions
                    WHERE
                        status != 'canceled'
                            AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                       GROUP BY customerId
					UNION ALL 
                    SELECT
                        customerId,
                            SUM(investmentUSD) as amount,
                            COUNT(customerId) as bets
                    FROM
                        forex_positions
                    WHERE
                        status != 'canceled'
                            AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                       GROUP BY customerId) as turnover ON customers.id = turnover.customerId
                where
                    customers.isDemo = 0
                group by customers.id
                having turnover > 0
              ";

    if ($desk != 0) {
        $sql .= " and desk = " . $desk;
    }

    $sql .= " order by id desc;";

    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $key => $data) {
        $results[$key]['turnover'] = number_format($results[$key]['turnover'], 2, ".", "");
        $results[$key]['cashTurnOver'] = number_format($results[$key]['turnover'] * ($results[$key]['totalDeposits'] / ($results[$key]['totalDeposits'] + $results[$key]['totalDepositsBonuses'])), 2, ".", "");
        $results[$key]['bonusTurnOver'] = number_format($results[$key]['turnover'] * ($results[$key]['totalDepositsBonuses'] / ($results[$key]['totalDeposits'] + $results[$key]['totalDepositsBonuses'])), 2, ".", "");
    }


    // print_r($results); die;
    return $results;

}

function getProfitLossByAffiliate($dpStart, $dpEnd, $desk, $affiliate)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();


    $sql = "SELECT
                #IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) as aff_id,
                IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
                sum(customer_deposits.amountUSD) amount,
                sum(IF(customer_deposits.paymentMethod='Bonus','-',IF(customers.firstDepositDate = customer_deposits.confirmTime, 1, 0))) as FTD,
                sum(IF(
                    (
                      SELECT
                        MIN(calls.date)
                      FROM
                        " . $GLOBALS["site_name"] . "_platform.calls
                      WHERE
                        customer_deposits.customerId = calls.clientId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(calls.date)
                    FROM
                      " . $GLOBALS["site_name"] . "_platform.calls
                    WHERE
                      customer_deposits.customerId = calls.clientId
                  ),1,0)) as self_deposit,
                null aff_cost,
                null aff_payment,
                null aff_customers,
                count(customers.id) deposits
                FROM customers
                LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                LEFT JOIN customer_deposits on customer_deposits.customerId = customers.id
                LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId

                WHERE customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                AND customer_deposits.status = 'approved'
                AND customers.isDemo=0
                and customer_deposits.paymentMethod != 'bonus'
            ";


    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $aff_id['aff_id'] . "'";
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        //$sql = $sql . " AND IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) = '" . $affiliate . "'";
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }
    $sql .= " group by aff_id";
    if ($desk != 0) {
        $sql .= " having desk = " . $desk;
    }

    $sql .= ";";

    $results = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT aff_id,
                  aff_cost,
                  aff_payment
              FROM
                  " . $GLOBALS["system"] . ".aff_flagging";

    $cost = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT

              #IF((customers.campaignId=339 OR customers.campaignId=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) ,
              # IF(customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) as aff_id,
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
              SUM(IF(customers.isLead,0,1)) as customers

            FROM customers, sub_campaigns
              WHERE sub_campaigns.id = customers.subCampaignId
              AND customers.isDemo=0
              AND ((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324,339,340))
              #AND (customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns))
              AND customers.regTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
            GROUP BY aff_id";

    $leads = $TradingPlatformDB->fetchAll($sql);

    foreach ($results as $k => $data) {

        //attach costs
        foreach ($cost as $x => $y) {
            if ($results[$k]['aff_id'] == $cost[$x]['aff_id']) {
                $results[$k]['aff_cost'] = $cost[$x]['aff_cost'];
                $results[$k]['aff_payment'] = $cost[$x]['aff_payment'];
            }
        }

        //attach customers
        foreach ($leads as $x => $y) {
            if ($results[$k]['aff_id'] == $leads[$x]['aff_id']) {
                $results[$k]['aff_customers'] = $leads[$x]['customers'];
            }
        }

        //calculate CPA & CPL
        if ($results[$k]['aff_cost'] == "CPA" && $results[$k]['aff_payment']) {
            $results[$k]['aff_gross'] = $results[$k]['amount'] - $results[$k]['aff_payment'] * $results[$k]['FTD'];
        } elseif ($results[$k]['aff_cost'] == "CPL" && $results[$k]['aff_payment']) {
            $results[$k]['aff_gross'] = $results[$k]['amount'] - $results[$k]['aff_payment'] * $results[$k]['aff_customers'];
        } else {
            $results[$k]['aff_gross'] = $results[$k]['amount'];
        }
    }

    return $results;

}

function getAcademyEmployees(){
	$dbConnection = new DB_Connect();
	
	$sql = "SELECT mcUsers.id AS mcUserId,
	               spotUsers.id AS spotEmployeeId,
	               CONCAT(spotUsers.firstName,' ',spotUsers.lastName) AS spotEmployeeName
	        FROM MainCoon.users AS mcUsers
	        LEFT JOIN hedgestonegroup_platform.users AS spotUsers ON spotUsers.id=mcUsers.real_spotId
	        WHERE mcUsers.academy_employee=1";
			
	return $dbConnection->fetchAll($sql);		
}

function getTradeEmployees(){
	$dbConnection = new DB_Connect();
	
	$sql = "SELECT mcUsers.id AS mcUserId,
	               spotUsers.id AS spotEmployeeId,
	               CONCAT(spotUsers.firstName,' ',spotUsers.lastName) AS spotEmployeeName
	        FROM MainCoon.users AS mcUsers
	        LEFT JOIN hedgestonegroup_platform.users AS spotUsers ON spotUsers.id=mcUsers.real_spotId
	        WHERE mcUsers.trade_employee=1";
			
	return $dbConnection->fetchAll($sql);		
}

function getEmployees($desk, $short = false)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT users.id as userId, CONCAT(users.firstName,' ', users.lastName) as employeeName
        FROM users
        LEFT JOIN user_desks on (users.id=user_desks.userId)
        WHERE users.firstName <>'' AND users.lastName<>'' AND users.id<>0 ";

    if ($short) {
        $sql .= " AND users.firstName NOT LIKE '%CLOSED%' ";
        $sql .= " AND users.lastName NOT LIKE '%CLOSED%' ";
    }

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    } else {
        $sql .= " GROUP BY users.id ";
    }

    $sql .= " ORDER BY employeeName ";

    $employees = $TradingPlatformDB->fetchAll($sql);
    return $employees;
}

function getEmployeesForRetention($desk, $short = false)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();


    $sql = "SELECT users.id AS userId, 
                   CONCAT(users.firstName,' ', users.lastName) AS employeeName,
                   IFNULL(user_desks.deskId,1) AS desk # if desk is null , it takes default desk
        FROM users
        LEFT JOIN user_desks on (users.id=user_desks.userId)
        WHERE users.firstName <>'' AND users.lastName<>'' AND users.id<>0
         AND  users.department='retention'
       --   AND  users.status='activated'
        ";

    if ($short) {
        $sql .= " AND users.firstName NOT LIKE '%CLOSED%' ";
        $sql .= " AND users.lastName NOT LIKE '%CLOSED%' ";
    }

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    } else {
        $sql .= " GROUP BY users.id ";
    }

    $sql .= " ORDER BY employeeName ";

    $employees = $TradingPlatformDB->fetchAll($sql);
    return $employees;
}

function getVinciEmployeesForRetention($desk){
	$vinciDB = new leverateDB_Connection();
	
	$sql = "SELECT SystemUserId AS userId,
	               FullName AS employeeName
	        FROM dbo.SystemUserBase
	        WHERE Lv_IsRetentionOwner = 1";
	if($desk){
		$sql .= " AND BusinessUnitId = '$desk'";
	}
	$sql .= " ORDER BY employeeName ASC";
	return $vinciDB->fetchAll($sql,array('userId'));        
}

function getEmployeesForConversion($desk)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();


    $sql = "SELECT users.id as userId, CONCAT(users.firstName,' ', users.lastName) as employeeName
                    FROM users
                    LEFT JOIN user_desks on (users.id=user_desks.userId)
                    WHERE users.firstName <>'' AND users.lastName<>'' AND users.id<>0
                       AND  (users.department='Sales' OR users.id=186)";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }
    $sql .= " GROUP BY users.id
                  ORDER BY TRIM(employeeName) ";

    $employees = $TradingPlatformDB->fetchAll($sql);
    return $employees;
}

function getEmployeesForConversionWithSADesk($desk)
{


    $TradingPlatformDB = new spotDB_TradingPlatform();


    $sql = "SELECT users.id as userId, CONCAT(users.firstName,' ', users.lastName) as employeeName
                    FROM users
                    LEFT JOIN user_desks on (users.id=user_desks.userId)
                    WHERE users.firstName <>'' AND users.lastName<>'' AND users.id<>0
                       AND  (users.department='Sales' OR users.id=186 OR users.id=63)";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }
    $sql .= " GROUP BY users.id
                  ORDER BY TRIM(employeeName) ";

    $employees = $TradingPlatformDB->fetchAll($sql);
    return $employees;
}

function getSaleStatusValues(){
	 $TradingPlatformDB = new spotDB_TradingPlatform();
	 
	 $sql = "SHOW COLUMNS FROM customers WHERE Field='saleStatus'";
	 $result = $TradingPlatformDB->fetchAll($sql);
	 
	 $type = $result[0]['Type'];
	 preg_match('/enum\((.*)\)$/', $type, $matches);
	 $matches = str_replace("'", "", $matches[1]);
     $saleStatus = explode(',', $matches);
	 return $saleStatus;
}

function getRegStatusValues(){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	 
	 $sql = "SHOW COLUMNS FROM customers WHERE Field='regStatus'";
	 $result = $TradingPlatformDB->fetchAll($sql);
	 
	 $type = $result[0]['Type'];
	 preg_match('/enum\((.*)\)$/', $type, $matches);
	 $matches = str_replace("'", "", $matches[1]);
     $regStatus = explode(',', $matches);
	 return $regStatus;
}

function getAccountTypes(){
	$spotDB = new spotDB_TradingPlatform();
	
	$sql = "SELECT id, 
	               CONCAT(UCASE(LEFT(section, 1)),LCASE(SUBSTRING(section, 2))) AS section
			FROM sections
			WHERE id<=3";
			
	$result = $spotDB->fetchAll($sql);
	return $result;		
}

function getCustomersNoAddress($desk)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT if,
      CONCAT(firstName,' ', lastName) as customerName
      FROM customers WHERE street='' AND City='' AND firstDepositDate!='0000-00-00 00:00:00.000000';";


    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}

function getUnactiveCustomers($dpStart, $dpEnd, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT  customers.id cid,
        CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
        CONCAT(users.firstName,' ', users.lastName) as employeeName,
        balance.balance balance,
        customers.currency,
        customers.lastTimeActive lastActive


        FROM customers,
        users join user_desks,
        customer_balance,
        (
            SELECT customerId, SUM(lastBalance) balance
            FROM customer_balance
            WHERE customer_balance.isDemo != '1'
            AND customer_balance.lastUpdate BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
            AND customer_balance.lastBalance >0
            GROUP BY customerId
        ) balance

        WHERE (customers.id) NOT IN
        (SELECT tmp.customerId FROM (
            SELECT customerId, SUM(amount) as amount,
                COUNT(customerId) as bets
                FROM onetouch_positions
                WHERE status!='canceled'
                AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                GROUP BY customerId
            UNION ALL SELECT customerId, SUM(amount) as amount,
                COUNT(customerId) as bets
                FROM positions
                WHERE status!='canceled'
                AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                GROUP BY customerId
            UNION ALL SELECT customerId, SUM(investment) as amount,
                COUNT(customerId) as bets
                FROM ldo_positions
                WHERE status!='canceled'
                AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                GROUP BY customerId
            UNION ALL SELECT customerId, SUM(investment) as amount,
                COUNT(customerId) as bets
                FROM forex_positions
                WHERE status!='canceled'
                AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                GROUP BY customerId    
        ) tmp)
        AND customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
        AND customers.id = customer_balance.customerId
        AND customers.id = balance.customerId
        AND customers.isDemo=0
        AND customers.isLead=0
        AND users.id=user_desks.userId " . ($employee == 0 ? '' : 'AND users.id=' . $employee) . "
        AND user_desks.deskId = " . $desk . "
        GROUP BY customers.id";

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}

function getTurnover($dpStart, $dpEnd, $desk, $employee, $openaccounts)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $employee = $employee == 0 ? '' : ' AND users.id=' . $employee;

    if ($openaccounts) {
        $openaccounts = "('canceled','open')";
    } else {
        $openaccounts = "('canceled')";
    }

    $sql = "SELECT
                tmp.customerId,
                (tmp.amount) as amount,
                (tmp.bets) as bets,
                TRUNCATE((tmp.amount) / (tmp.bets),2) as avarage,
                CONCAT(customers.FirstName,
                        ' ',
                        customers.LastName) as customerName,
                customers.saleStatus,
                ifnull(Concat(trim(" . $GLOBALS["site_name"] . "_platform.users.FirstName),
                                ' ',
                                trim(" . $GLOBALS["site_name"] . "_platform.users.LastName)),
                        '') AS employeeName,
                customers.currency as currency,
                COALESCE(user_desks.deskId, 1) AS desk,
                IF(Ifnull((SELECT
                                    Sum(customer_deposits.amount)
                                FROM
                                    customer_deposits
                                WHERE
                                    customer_deposits.paymentmethod <> 'bonus'
                                        AND customer_deposits.status = 'approved'
                                        AND customer_deposits.customerid = tmp.customerid),
                            0) - ifnull((SELECT
                                    sum(withdrawals2.amount)
                                FROM
                                    withdrawals AS withdrawals2
                                WHERE
                                    withdrawals2.paymentmethod <> 'bonus'
                                        AND withdrawals2.status = 'approved'
                                        AND withdrawals2.customerid = tmp.customerid),
                            0) - customer_balance.pnl >= 0,
                    ifnull((SELECT
                                    sum(customer_deposits.amount)
                                FROM
                                    customer_deposits
                                WHERE
                                    customer_deposits.paymentmethod <> 'bonus'
                                        AND customer_deposits.status = 'approved'
                                        AND customer_deposits.customerid = tmp.customerid),
                            0) - ifnull((SELECT
                                    sum(withdrawals2.amount)
                                FROM
                                    withdrawals AS withdrawals2
                                WHERE
                                    withdrawals2.paymentmethod <> 'bonus'
                                        AND withdrawals2.status = 'approved'
                                        AND withdrawals2.customerid = tmp.customerid),
                            0) - customer_balance.pnl,
                    0) AS real_account_balance
            FROM
                customers
                    LEFT JOIN
                user_desks ON customers.employeeInChargeId = user_desks.userId
                    LEFT JOIN
                users ON customers.employeeInChargeId = users.id
                    and users.id is not null
                    right join
                    (
                        select customerId, sum(amount) as amount, sum(bets) as bets from (

                          SELECT customerId, SUM(amount) as amount,
                          COUNT(customerId) as bets
                          FROM onetouch_positions
                          WHERE status!='canceled'
                          AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                          GROUP BY customerId
                      UNION ALL
                      SELECT customerId, SUM(amount) as amount,
                          COUNT(customerId) as bets
                          FROM positions
                          WHERE status!='canceled'
                          AND date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                          GROUP BY customerId
                      UNION ALL
                      SELECT customerId, SUM(investment) as amount,
                          COUNT(customerId) as bets
                          FROM ldo_positions
                          WHERE status!='canceled'
                          AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                          GROUP BY customerId
                      UNION ALL
                      SELECT customerId, SUM(investment) as amount,
                          COUNT(customerId) as bets
                          FROM forex_positions
                          WHERE status!='canceled'
                          AND entryTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
                          GROUP BY customerId) as TurnOver
              group by customerId
                        ) tmp ON customers.id = tmp.customerId
                    LEFT JOIN
                customer_balance ON customer_balance.customerid = tmp.customerId
            WHERE
                customers.isDemo = 0
                    AND customers.isLead = 0
                    $employee";


    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }

    $sql .= " GROUP BY tmp.customerId
             ORDER BY employeeName ";
    //echo $sql; die;
    $customers = $TradingPlatformDB->fetchAll($sql);

    return $customers;

}

function getDepositors($dpStart, $dpEnd, $desk, $openaccounts,$deactivatedaccounts,$closedaccounts)
{
    $robot_employees = array(2357, 2360);
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT  customer_deposits.customerId,
                   CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
                  country.name AS countryName,
                  MAX(createDate) AS lastNoteDate,
                  desks.name AS deskName,
                  Concat(users.FirstName,' ',users.LastName) AS employee,
                  customers.currency,
                  customers.regStatus,
                  TRUNCATE((IF(IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl >=0, IFNULL((SELECT SUM(customer_deposits.amount)
                       FROM customer_deposits
                       WHERE customer_deposits.paymentMethod <> 'bonus'
                       AND customer_deposits.status = 'approved'
                   AND customer_deposits.customerId = customers.id),0)
                  -
                  IFNULL((SELECT SUM(withdrawals2.amount)
                         FROM withdrawals AS withdrawals2
                         WHERE withdrawals2.paymentMethod <> 'bonus'
                         AND withdrawals2.status = 'approved'
                         AND withdrawals2.customerId = customers.id),0)
                        -
                        customer_balance.pnl, 0))*currencies.rate,2) AS realAccountBalanceUSD
          FROM customer_deposits
          LEFT JOIN customers ON (customer_deposits.customerId = customers.id)
          LEFT JOIN country ON (customers.Country = country.id)
          LEFT JOIN customer_communications ON (customer_deposits.customerId = customer_communications.customerId)
          LEFT JOIN customer_balance ON (customer_deposits.customerId = customer_balance.customerId)
		  LEFT JOIN currencies ON currencies.code=customers.currency
          LEFT JOIN users ON (customers.employeeinchargeid=users.id)
          LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
          LEFT JOIN desks ON (user_desks.deskId = desks.id)
          WHERE customers.isDemo=0
          AND customers.isLead=0
          ";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }

    if ($openaccounts) {
        $sql .= " AND customers.employeeInChargeId NOT IN (" . implode(', ', $robot_employees) . ") ";
    }
    if ($deactivatedaccounts) {
        $sql .= " AND customers.regStatus<>'deactivated'";
    }
    if ($closedaccounts) {
        $sql .= " AND (customers.FirstName NOT LIKE '%clos%' AND customers.FirstName NOT LIKE '%forbid%')";
    }
    

    $sql .= " GROUP BY customer_deposits.customerId
  		  HAVING  MAX(createDate) BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}

function getPayouts($dpStart, $dpEnd, $desk)
{
    //$sql = "SELECT rateUSD FROM currencies,customers WHERE customers.currency = currencies.code AND customers.id = ".$userid;

    $TradingPlatformDB = new spotDB_TradingPlatform();

    /*$sql = "SELECT customers.id,
            SUM(tmp.payout) as payout,
            ROUND(SUM(tmp.payout)*currencies.rateUSD, 2) AS payoutUSD,
            CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
            customers.currency
          FROM customers
          LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
          LEFT JOIN currencies ON (customers.currency = currencies.code)
          INNER JOIN (SELECT customerId, sum(payout) AS payout FROM
            (SELECT customerId, SUM(payout) AS payout
                          FROM onetouch_positions
                          WHERE STATUS!='canceled'
                          AND DATE BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 23:59:59'
                          GROUP BY customerId

                      UNION

                      SELECT customerId, SUM(payout) AS payout
                          FROM positions
                          WHERE STATUS!='canceled'
                          AND DATE BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 23:59:59'
                          GROUP BY  customerId

                      UNION

                      SELECT customerId, SUM(payout) AS payout
                          FROM ldo_positions
                          WHERE STATUS!='canceled'
                          AND entryTime BETWEEN '2014-01-01 00:00:00' AND '2014-01-31 23:59:59'
                          GROUP BY customerId) AS all_positions
              GROUP BY customerId) as tmp ON (customers.id = tmp.customerId)
          WHERE customers.isDemo=0
          AND customers.isLead=0 ";*/

    $sql = "SELECT
              customerId,
              payout,
              REPLACE(FORMAT(payoutUSD, 2), ',', '') AS payoutUSD,
              /*FORMAT(payoutUSD, 2) AS payoutUSD,*/
              ROUND(payout*currencies.rateUSD, 2) AS payoutUSD1,
              CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
              customers.currency
          FROM (
              select payOuts.customerId, SUM(payOuts.payout) AS payout, SUM(payOuts.payoutUSD) as payoutUSD from (
                SELECT customerId, SUM(payout) AS payout, SUM(payout*rateUSD) as payoutUSD
                  FROM onetouch_positions
                  WHERE STATUS!='canceled'
                  AND DATE BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId
                UNION
                SELECT customerId, SUM(payout) AS payout, SUM(payout*rateUSD) as payoutUSD
                  FROM positions
                  WHERE STATUS!='canceled'
                  AND DATE BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY  customerId
                UNION
                  SELECT customerId, SUM(payout) AS payout, SUM(payout*rateUSD) as payoutUSD
                  FROM ldo_positions
                  WHERE STATUS!='canceled'
                  AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                GROUP BY customerId
                UNION
                  SELECT customerId, SUM(payout) AS payout, SUM(payout*rateUSD) as payoutUSD
                  FROM forex_positions
                  WHERE STATUS!='canceled'
                  AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                GROUP BY customerId
              ) as payOuts
              group by payOuts.customerId
            ) AS all_positions
          LEFT JOIN customers ON customerId = customers.id
          LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
          LEFT JOIN currencies ON (customers.currency = currencies.code)
          WHERE customers.isDemo=0 /*and customers.id=257873*/
          AND customers.isLead=0 ";

    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }

    $sql .= " GROUP BY customerId ";
    //var_dump($sql);
    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}

function getSelfDeposits($dpStart, $dpEnd, $desk)
{

    $rates = json_decode('{"28-05-13":{"GBP":"1.5061","EUR":"1.287","USD":1},"29-05-13":{"GBP":"1.5121","EUR":"1.2944","USD":1},"30-05-13":{"GBP":"1.5207","EUR":"1.3042","USD":1},"31-05-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"03-06-13":{"GBP":"1.5349","EUR":"1.3098","USD":1},"04-06-13":{"GBP":"1.5304","EUR":"1.3075","USD":1},"05-06-13":{"GBP":"1.5392","EUR":"1.3088","USD":1},"06-06-13":{"GBP":"1.5601","EUR":"1.3248","USD":1},"07-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"10-06-13":{"GBP":"1.5556","EUR":"1.3234","USD":1},"11-06-13":{"GBP":"1.5587","EUR":"1.3278","USD":1},"12-06-13":{"GBP":"1.5697","EUR":"1.3354","USD":1},"13-06-13":{"GBP":"1.5698","EUR":"1.3314","USD":1},"14-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"17-06-13":{"GBP":"1.5709","EUR":"1.3341","USD":1},"18-06-13":{"GBP":"1.5625","EUR":"1.3407","USD":1},"19-06-13":{"GBP":"1.5657","EUR":"1.3404","USD":1},"20-06-13":{"GBP":"1.5469","EUR":"1.3214","USD":1},"21-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"24-06-13":{"GBP":"1.5404","EUR":"1.3091","USD":1},"25-06-13":{"GBP":"1.5418","EUR":"1.308","USD":1},"26-06-13":{"GBP":"1.5332","EUR":"1.3006","USD":1},"27-06-13":{"GBP":"1.5235","EUR":"1.3016","USD":1},"28-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"01-07-13":{"GBP":"1.5247","EUR":"1.306","USD":1},"02-07-13":{"GBP":"1.5171","EUR":"1.3017","USD":1},"03-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"04-07-13":{"GBP":"1.5264","EUR":"1.3005","USD":1},"05-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"08-07-13":{"GBP":"1.4932","EUR":"1.2863","USD":1},"09-07-13":{"GBP":"1.4837","EUR":"1.2774","USD":1},"10-07-13":{"GBP":"1.4935","EUR":"1.2846","USD":1},"11-07-13":{"GBP":"1.5127","EUR":"1.3046","USD":1},"12-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"15-07-13":{"GBP":"1.5088","EUR":"1.3039","USD":1},"16-07-13":{"GBP":"1.5122","EUR":"1.3144","USD":1},"17-07-13":{"GBP":"1.5184","EUR":"1.3094","USD":1},"18-07-13":{"GBP":"1.5193","EUR":"1.3078","USD":1},"19-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"22-07-13":{"GBP":"1.5366","EUR":"1.3193","USD":1},"23-07-13":{"GBP":"1.5354","EUR":"1.3212","USD":1},"24-07-13":{"GBP":"1.5367","EUR":"1.3228","USD":1},"25-07-13":{"GBP":"1.5333","EUR":"1.3234","USD":1},"26-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"29-07-13":{"GBP":"1.5355","EUR":"1.3262","USD":1},"30-07-13":{"GBP":"1.5244","EUR":"1.3266","USD":1},"31-07-13":{"GBP":"1.5177","EUR":"1.3282","USD":1},"01-08-13":{"GBP":"1.5145","EUR":"1.3217","USD":1},"02-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"05-08-13":{"GBP":"1.5347","EUR":"1.3257","USD":1},"06-08-13":{"GBP":"1.5367","EUR":"1.3296","USD":1},"07-08-13":{"GBP":"1.5514","EUR":"1.3329","USD":1},"08-08-13":{"GBP":"1.5555","EUR":"1.3392","USD":1},"09-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"12-08-13":{"GBP":"1.5475","EUR":"1.3312","USD":1},"13-08-13":{"GBP":"1.5451","EUR":"1.3247","USD":1},"14-08-13":{"GBP":"1.5531","EUR":"1.3256","USD":1},"15-08-13":{"GBP":"1.5573","EUR":"1.3263","USD":1},"16-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"19-08-13":{"GBP":"1.5665","EUR":"1.3348","USD":1},"20-08-13":{"GBP":"1.5678","EUR":"1.3426","USD":1},"21-08-13":{"GBP":"1.5678","EUR":"1.3368","USD":1},"22-08-13":{"GBP":"1.558","EUR":"1.3362","USD":1},"23-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"26-08-13":{"GBP":"1.5568","EUR":"1.3369","USD":1},"27-08-13":{"GBP":"1.5528","EUR":"1.3387","USD":1},"28-08-13":{"GBP":"1.552","EUR":"1.3326","USD":1},"29-08-13":{"GBP":"1.5488","EUR":"1.3228","USD":1},"30-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"02-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"03-09-13":{"GBP":"1.5544","EUR":"1.3164","USD":1},"04-09-13":{"GBP":"1.5643","EUR":"1.3212","USD":1},"05-09-13":{"GBP":"1.5593","EUR":"1.312","USD":1},"06-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"09-09-13":{"GBP":"1.5724","EUR":"1.326","USD":1},"10-09-13":{"GBP":"1.5731","EUR":"1.326","USD":1},"11-09-13":{"GBP":"1.5807","EUR":"1.3301","USD":1},"12-09-13":{"GBP":"1.5819","EUR":"1.3315","USD":1},"13-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"16-09-13":{"GBP":"1.5927","EUR":"1.335","USD":1},"17-09-13":{"GBP":"1.5901","EUR":"1.3357","USD":1},"18-09-13":{"GBP":"1.5965","EUR":"1.3351","USD":1},"19-09-13":{"GBP":"1.6043","EUR":"1.3527","USD":1},"20-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"23-09-13":{"GBP":"1.6066","EUR":"1.352","USD":1},"24-09-13":{"GBP":"1.6006","EUR":"1.349","USD":1},"25-09-13":{"GBP":"1.608","EUR":"1.3536","USD":1},"26-09-13":{"GBP":"1.6012","EUR":"1.3484","USD":1},"27-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"30-09-13":{"GBP":"1.6179","EUR":"1.3535","USD":1},"01-10-13":{"GBP":"1.6208","EUR":"1.3534","USD":1},"02-10-13":{"GBP":"1.6224","EUR":"1.3592","USD":1},"03-10-13":{"GBP":"1.6169","EUR":"1.3642","USD":1},"04-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"07-10-13":{"GBP":"1.6082","EUR":"1.3569","USD":1},"08-10-13":{"GBP":"1.6089","EUR":"1.3582","USD":1},"09-10-13":{"GBP":"1.5943","EUR":"1.3513","USD":1},"10-10-13":{"GBP":"1.5975","EUR":"1.3535","USD":1},"11-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"14-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"15-10-13":{"GBP":"1.5974","EUR":"1.3494","USD":1},"16-10-13":{"GBP":"1.5904","EUR":"1.349","USD":1},"17-10-13":{"GBP":"1.6166","EUR":"1.3664","USD":1},"18-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"21-10-13":{"GBP":"1.6149","EUR":"1.3672","USD":1},"22-10-13":{"GBP":"1.6221","EUR":"1.3778","USD":1},"23-10-13":{"GBP":"1.6171","EUR":"1.3786","USD":1},"24-10-13":{"GBP":"1.6186","EUR":"1.381","USD":1},"25-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"28-10-13":{"GBP":"1.6131","EUR":"1.3786","USD":1},"29-10-13":{"GBP":"1.6059","EUR":"1.377","USD":1},"30-10-13":{"GBP":"1.6078","EUR":"1.3771","USD":1},"31-10-13":{"GBP":"1.6068","EUR":"1.3594","USD":1},"01-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"02-06-13":{"GBP":"1.5185","EUR":"1.2988","USD":1},"08-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"09-06-13":{"GBP":"1.5558","EUR":"1.3242","USD":1},"15-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"16-06-13":{"GBP":"1.5686","EUR":"1.333","USD":1},"22-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"23-06-13":{"GBP":"1.5373","EUR":"1.3113","USD":1},"29-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"30-06-13":{"GBP":"1.521","EUR":"1.301","USD":1},"06-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"07-07-13":{"GBP":"1.491","EUR":"1.2831","USD":1},"13-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"14-07-13":{"GBP":"1.5108","EUR":"1.3048","USD":1},"20-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"21-07-13":{"GBP":"1.526","EUR":"1.3142","USD":1},"27-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"28-07-13":{"GBP":"1.5368","EUR":"1.3269","USD":1},"03-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"04-08-13":{"GBP":"1.5277","EUR":"1.3268","USD":1},"10-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"11-08-13":{"GBP":"1.5507","EUR":"1.3338","USD":1},"17-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"18-08-13":{"GBP":"1.5621","EUR":"1.3321","USD":1},"24-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"25-08-13":{"GBP":"1.5578","EUR":"1.3392","USD":1},"31-08-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"01-09-13":{"GBP":"1.5468","EUR":"1.3196","USD":1},"07-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"08-09-13":{"GBP":"1.5633","EUR":"1.3166","USD":1},"14-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"15-09-13":{"GBP":"1.5861","EUR":"1.3276","USD":1},"21-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"22-09-13":{"GBP":"1.6021","EUR":"1.3522","USD":1},"28-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"29-09-13":{"GBP":"1.6135","EUR":"1.3537","USD":1},"05-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"06-10-13":{"GBP":"1.6069","EUR":"1.3582","USD":1},"12-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"13-10-13":{"GBP":"1.5945","EUR":"1.3559","USD":1},"19-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"20-10-13":{"GBP":"1.6184","EUR":"1.3693","USD":1},"26-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1},"27-10-13":{"GBP":"1.6158","EUR":"1.3794","USD":1}}', true);

    $TradingPlatformDB = new spotDB_TradingPlatform();

    if ($desk == 0) {

        $sql = "SELECT  customer_deposits.id,
                            customer_deposits.customerId,
                            customer_deposits.paymentMethod,
                            CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                            SUM(customer_deposits.amountUSD) as amountUSD,
                            customer_deposits.requestTime,
                            customer_deposits.amount,
                            customer_deposits.currency
                            FROM customers, customer_deposits
                            WHERE customer_deposits.paymentMethod!='Bonus'
                            AND customer_deposits.customerId = customers.id
                            AND customer_deposits.status = 'approved'
                            AND customer_deposits.requestTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'" .
            " AND ((SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId) IS NULL OR customer_deposits.requestTime < (SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId)) GROUP BY customer_deposits.customerId;";
        //AND customer_deposits.confirmTime BETWEEN DATE_ADD(NOW(),INTERVAL - 24 HOUR) AND NOW();";

    } else {

        $sql = "SELECT  customer_deposits.id,
                            customer_deposits.customerId,
                            customer_deposits.paymentMethod,
                            CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                            SUM(customer_deposits.amountUSD) as amountUSD,
                            customer_deposits.requestTime,
                            customer_deposits.amount,
                            customer_deposits.currency
                            FROM user_desks, customers, customer_deposits
                            WHERE customers.employeeInChargeId = user_desks.userId
                            AND customer_deposits.paymentMethod!='Bonus'
                            AND customer_deposits.customerId = customers.id
                            AND customer_deposits.status = 'approved'
                            AND user_desks.deskId = " . $desk .
            " AND customer_deposits.requestTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'" .
            " AND ((SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId) IS NULL OR customer_deposits.requestTime < (SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId)) GROUP BY customer_deposits.customerId;";
        //AND customer_deposits.confirmTime BETWEEN DATE_ADD(NOW(),INTERVAL - 24 HOUR) AND NOW();";

    }


    $customer_deposits = $TradingPlatformDB->fetchAll($sql);
    //echo $sql;


    foreach ($customer_deposits as $key => $data) {

        if ($customer_deposits[$key]['amountUSD'] == 0) {
            $dkey = date('d-m-y', strtotime($results[$key]['confirmTime']));
            $USDrate = $rates[$dkey][$customer_deposits[$key]['currency']];
            if (isset($USDrate))
                $customer_deposits[$key]['amountUSD'] = number_format($customer_deposits[$key]['amount'] * $USDrate, 2, ".", "");
        }

    }

    return $customer_deposits;

}


function descToStage($desc)
{

    switch ($desc) {
        case "Visits":
            return "0";
            break;
        case "Installs":
            return "2";
            break;
        case "Downloads":
            return "1";
            break;
        case "Success":
            return "10";
            break;
        case "Goal#1":
            return "21";
            break;
        case "Goal#2":
            return "22";
            break;
        default:
            return "999";
    }

}

function getRevenueBreakdown($userid)
{
//SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND cpa.aid=3  AND (FROM_UNIXTIME(reports.time) between DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00') and NOW()) GROUP BY aid,pid,cpa.stage,cid

    if (!isset($_POST["args"]))
        die('{"error":"Missing arguments"}');

    $args = json_decode($_POST["args"], true);

    $connection = new MySqlDriver();


    $where = ' ';


    if ($userid != 1) {
        $where .= ' AND cpa.aid=' . $userid;
    }


    switch ($args['range']) {
        case "today":
            $sql = "SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, COUNT(cpa) as count, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00') and NOW()) " . $where . " GROUP BY aid,pid,cpa.stage,cid;";
            break;
        case "yesterday":
            $sql = "SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, COUNT(cpa) as count, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(),INTERVAL - 24 HOUR),'%y-%m-%d 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00')) " . $where . " GROUP BY aid,pid,cpa.stage,cid;";
            break;
        case "thismonth":
            $sql = "SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, COUNT(cpa) as count, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-01 00:00:00') and NOW()) " . $where . " GROUP BY aid,pid,cpa.stage,cid;";
            break;
        case "lastmonth":
            $sql = "SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, COUNT(cpa) as count, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%y-%m-01 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-01 00:00:00')) " . $where . " GROUP BY aid,pid,cpa.stage,cid;";
            break;
        default:
            $sql = "SELECT cpa.aid,cpa.pid,reports.stage,reports.cid, COUNT(cpa) as count, SUM(cpa) as revenue FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) " . $where . " GROUP BY aid,pid,cpa.stage,cid;";
//      $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time+7200,'%y-%m-%d 00:00:00')) as x, COUNT(id) as y FROM reports WHERE (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) ".$where." GROUP BY DAY(FROM_UNIXTIME(time+7200)) ORDER BY time;";

    }

    $results = $connection->fetchAll($sql);
    return $results;


}

function getTrafficSources($userid)
{
    if (!isset($_POST["args"]))
        die('{"error":"Missing arguments"}');

    $args = json_decode($_POST["args"], true);
    //print_r($args);
    $connection = new MySqlDriver();

    $data = array();

    foreach ($args['keys'] as $line) {

        $where = ' AND stage=' . descToStage($line['key']);


        if ($userid != 1) {
            $where .= ' AND aid=' . $userid;
        }


        switch ($args['range']) {
            case "today":
                $sql = "SELECT pid,aid,cid, COUNT(id) as count FROM reports WHERE (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00') and NOW()) " . $where . " GROUP BY pid,aid,cid  ORDER BY count DESC;";
                break;
            case "yesterday":
                $sql = "SELECT pid,aid,cid, COUNT(id) as count FROM reports WHERE (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(),INTERVAL - 24 HOUR),'%y-%m-%d 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00')) " . $where . " GROUP BY pid,aid,cid  ORDER BY count DESC;";
                break;
            default:
                $sql = "SELECT pid,aid,cid, COUNT(id) as count FROM reports WHERE (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) " . $where . " GROUP BY pid,aid,cid  ORDER BY count DESC;";
//      $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time+7200,'%y-%m-%d 00:00:00')) as x, COUNT(id) as y FROM reports WHERE (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) ".$where." GROUP BY DAY(FROM_UNIXTIME(time+7200)) ORDER BY time;";

        }

        $results = $connection->fetchAll($sql);
        //print_r($results);
        //$line["values"] = $results;
        $data[$line['key']] = $results;


    }


    return $data;


}

function getRevenueGraph($userid)
{

    if (!isset($_POST["args"]))
        die('{"error":"Missing arguments"}');

    $args = json_decode($_POST["args"], true);


    //echo($args)
    //print_r($args);
    $connection = new MySqlDriver();


    $data = array("total" => array(), "graph" => array());

    foreach ($args['keys'] as $line) {
        //echo $line['key'];
        $where = ' AND cpa.stage=' . descToStage($line['data']);

        if ($userid != 1) {
            $where .= ' AND cpa.aid=' . $userid;
        }

        switch ($args['range']) {
            case "today":
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d %H:00:00')) as x, SUM(cpa) as y FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00') and NOW()) " . $where . " GROUP BY HOUR(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            case "yesterday":
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d %H:00:00')) as x, SUM(cpa) as y FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(),INTERVAL - 24 HOUR),'%y-%m-%d 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00')) " . $where . " GROUP BY HOUR(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            case "thismonth":
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d 00:00:00')) as x, SUM(cpa) as y FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-01 00:00:00') and NOW()) " . $where . " GROUP BY DAY(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            case "lastmonth":
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d 00:00:00')) as x, SUM(cpa) as y FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -1 MONTH),'%y-%m-01 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-01 00:00:00')) " . $where . " GROUP BY DAY(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            default:
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d 00:00:00')) as x, SUM(cpa) as y FROM cpa,reports WHERE cpa.aid=reports.aid AND cpa.stage=reports.stage AND cpa.pid = reports.pid AND (cpa.cid=0 OR cpa.cid=reports.cid) AND cpa.active=1 AND (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) " . $where . " GROUP BY DAY(FROM_UNIXTIME(time)) ORDER BY time;";

        }

        $results = $connection->fetchAll($sql);

        for ($i = 0; $i < count($results); $i++) {
            $results[$i]['y'] = floatval($results[$i]['y']);
        }

        $line["values"] = $results;
        array_push($data['graph'], $line);


    }


    return $data;
}


function getGraphData($userid)
{

    if (!isset($_POST["args"]))
        die('{"error":"Missing arguments"}');

    $args = json_decode($_POST["args"], true);


    //echo($args)
    //print_r($args);
    $connection = new MySqlDriver();


    $data = array("total" => array(), "graph" => array());

    foreach ($args['keys'] as $line) {
        //echo $line['key'];

        $where = ' AND stage=' . descToStage($line['key']);

        if ($userid != 1) {
            $where .= ' AND aid=' . $userid;
        }

        switch ($args['range']) {
            case "today":

                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d %H:00:00')) as x, COUNT(id) as y FROM reports WHERE (FROM_UNIXTIME(time) between DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00') and NOW()) " . $where . " GROUP BY HOUR(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            case "yesterday":
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d %H:00:00')) as x, COUNT(id) as y FROM reports WHERE (FROM_UNIXTIME(time) between DATE_FORMAT(DATE_ADD(NOW(),INTERVAL - 24 HOUR),'%y-%m-%d 00:00:00') and DATE_FORMAT(NOW(),'%y-%m-%d 00:00:00')) " . $where . " GROUP BY HOUR(FROM_UNIXTIME(time)) ORDER BY time;";
                break;
            default:
                $sql = "SELECT UNIX_TIMESTAMP(FROM_UNIXTIME(time,'%y-%m-%d 00:00:00')) as x, COUNT(id) as y FROM reports WHERE (FROM_UNIXTIME(time) between DATE_ADD(NOW(), INTERVAL -30 DAY) and NOW()) " . $where . " GROUP BY DAY(FROM_UNIXTIME(time)) ORDER BY time;";

        }

        $results = $connection->fetchAll($sql);
        $count = 0;
        foreach ($results as $row) {
            $count = $count + $row['y'];
        }
        for ($i = 0; $i < count($results); $i++) {
            $results[$i]['y'] = intval($results[$i]['y']);
        }

        $data['total'][$line['key']] = $count;
        $line["values"] = $results;
        array_push($data['graph'], $line);


    }


    return $data;
}

function arrayToFile($arr)
{

    $data = "<?php\n\n";

    foreach ($arr as $key => $value) {

        $value = stripslashes($value);

        if (!get_magic_quotes_gpc()) {
            $value = addslashes($value);
        }
        $value = str_replace("\\'", "'", $value);
        $value = str_replace("'", "\'", $value);

        $data .= "\$lang['" . $key . "'] = '" . $value . "';\n";


    }

    // Finish the file data
    $data .= "\n" . '?' . '>';

    return $data;
}


function getTransactionsByAffiliates($dpStart, $dpEnd, $affiliate)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT * FROM (SELECT
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
              COUNT(customer_deposits.id) AS deposits,
              SUM(customer_deposits.amountUSD) AS amount,
              SUM(IF(COALESCE(customers.firstDepositDate,0) = COALESCE(customer_deposits.confirmTime,1),  customer_deposits.amountUSD , 0)) AS ftd_amount,
              SUM(IF(COALESCE(customers.firstDepositDate,0)  = COALESCE(customer_deposits.confirmTime,1),  1 , 0)) AS ftd_deposits,
              -- SUM(IF(COALESCE(customers.firstDepositDate,0)  = COALESCE(customer_deposits.confirmTime,1),  IF(COALESCE(user_desks.deskId,7) = 1,0,1) , 0)) AS london,
              SUM(
                IF(
                    ((
                      SELECT
                        MIN(calls.date)
                      FROM
                        calls
                      WHERE
                        customer_deposits.customerId = calls.clientId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(calls.date)
                    FROM
                      calls
                    WHERE
                      customer_deposits.customerId = calls.clientId
                  ))
                  AND
                    ((
                      SELECT
                        MIN(customer_communications.createDate)
                      FROM
                        customer_communications
                      WHERE
                        customer_deposits.customerId = customer_communications.customerId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(customer_communications.createDate)
                    FROM
                      customer_communications
                    WHERE
                      customer_deposits.customerId = customer_communications.customerId
                  )),1,0)) AS self_deposits,
              SUM(IF((SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId) IS NULL OR customer_deposits.requestTime < (SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId),customer_deposits.amountUSD,0)) AS self_amount
            FROM
              customers
            LEFT JOIN customer_deposits ON customer_deposits.customerId = customers.id
            LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
            -- LEFT JOIN user_desks ON customers.employeeInChargeId = user_desks.userId
            WHERE  customers.isDemo=0
            AND customer_deposits.paymentMethod != 'Bonus'
            AND customer_deposits.status = 'approved'
            AND ((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324,339,340,358))
            AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
            GROUP BY aff_id) AS leads";

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " WHERE 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " OR leads.aff_id = '" . $aff_id['aff_id'] . "'";
            }
        } else {
            $user_id = $_SESSION['userdata']['id'];
            $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
            $affiliate_users = $systemDB->fetchAll($affiliate_users_sql);

            if (isset($affiliate_users) && $affiliate_users) {
                $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
                $sql = $sql . " WHERE leads.aff_id in ('" . $filter . "')";
            }
        }
    } else {
        $sql = $sql . " WHERE leads.aff_id = '" . $affiliate . "'";
    }

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;

}


function getLeadsByAffiliates($dpStart, $dpEnd, $affiliate)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT
            leads.aff_id as aff_id,
            COALESCE(deposits,0) as deposits,
            COALESCE(ftd_deposits,0) as ftd_deposits,
            COALESCE(amount,0) as amount,
            COALESCE(self_amount,0) as self_amount,
            COALESCE(ftd_amount,0) as ftd_amount,
            ROUND(((COALESCE(ftd_deposits,0) / COALESCE(customers,0)) * 100),2)  as conversion_rate,
            COALESCE(self_deposits,0) as self_deposits,
            COALESCE(leads,0) as leads,
            (COALESCE(customers,0)-COALESCE(notcalled,0)) as called,
            COALESCE(notcalled_cutoff,0) as notcalled_cutoff,
            (100-ROUND(((COALESCE(notcalled,0) / COALESCE(customers,0)) * 100),2))  as called_rate,
        #    COALESCE(london,0) as london,
            COALESCE(customers,0) as customers,
            COALESCE(aff_withdrawals.aff_amount,0) as aff_withdrawals
            FROM
            (SELECT
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,

              COUNT(customers.id) AS leads,
              SUM(
                IF(
                    (
                      SELECT calls.date
                      FROM
                        calls
                      WHERE
                        customers.id = calls.clientId
                      LIMIT 1
                      ) IS NULL
          AND
                    (
                      SELECT customer_communications.createDate
                      FROM
                        customer_communications
                      WHERE
                        customers.id = customer_communications.customerId
                      LIMIT 1
                      ) IS NULL
                  ,IF(customers.isLead,0,1),0)) AS notcalled,
              SUM(
                IF(
                    ((
                      SELECT
                        MIN(calls.date)
                      FROM
                        calls
                      WHERE
                        customers.id = calls.clientId
                      )
                  IS NULL
                  OR
                  '$dpEnd 23:59:59' <
                  (
                    SELECT
                      MIN(calls.date)
                    FROM
                      calls
                    WHERE
                      customers.id = calls.clientId
                  ))
                  AND
                    ((
                      SELECT
                        MIN(customer_communications.createDate)
                      FROM
                        customer_communications
                      WHERE
                        customers.id = customer_communications.customerId
                      )
                  IS NULL
                  OR
                  '$dpEnd 23:59:59' <
                  (
                    SELECT
                      MIN(customer_communications.createDate)
                    FROM
                      customer_communications
                    WHERE
                      customers.id = customer_communications.customerId
                  ))
                  ,IF(customers.isLead,0,1),0)) AS notcalled_cutoff,
              SUM(IF(customers.isLead,0,1)) AS customers
              FROM customers, sub_campaigns
              WHERE sub_campaigns.id = customers.subCampaignId
              AND customers.isDemo=0
              #AND ((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324,339,340))
              AND customers.regTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
              GROUP BY aff_id
            ) as leads

          LEFT JOIN(
            SELECT
                  SUM(withdrawals.amountUSD) AS aff_amount,
                  IF((mainCampaign>=408 AND mainCampaign<>417) OR mainCampaign IN (322,323,324), (SELECT name from campaigns WHERE id=mainCampaign), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID
                      #IF((mainCampaign=339 OR mainCampaign=340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2) ,
                      #  IF(mainCampaign IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name from " . $GLOBALS["site_name"] . "_platform.campaigns WHERE id=mainCampaign), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) as affID
                FROM
                  " . $GLOBALS["site_name"] . "_platform.customers
                LEFT JOIN
                  " . $GLOBALS["site_name"] . "_platform.sub_campaigns ON sub_campaigns.id = customers.subcampaignid
                LEFT JOIN
                  " . $GLOBALS["site_name"] . "_platform.withdrawals ON customers.id = withdrawals.customerid
                WHERE
                    sub_campaigns.param NOT LIKE '%NONE%'
                AND
                  ((mainCampaign>=408 AND mainCampaign<>417) OR mainCampaign IN (322,323,324,339,340))
                  #mainCampaign IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns)
                AND
                  withdrawals.paymentmethod != 'Bonus'
                AND
                  withdrawals.status = 'approved'
                AND
                  withdrawals.confirmtime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                GROUP BY affID
          )as aff_withdrawals on aff_withdrawals.affID = leads.aff_id


          LEFT JOIN
          (
            SELECT
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
              COUNT(customer_deposits.id) AS deposits,
              SUM(customer_deposits.amountUSD) AS amount,
              SUM(IF(COALESCE(customers.firstDepositDate,0) = COALESCE(customer_deposits.confirmTime,1),  customer_deposits.amountUSD , 0)) AS ftd_amount,
              SUM(IF(COALESCE(customers.firstDepositDate,0)  = COALESCE(customer_deposits.confirmTime,1),  1 , 0)) AS ftd_deposits,
             # SUM(IF(COALESCE(customers.firstDepositDate,0)  = COALESCE(customer_deposits.confirmTime,1),  IF(COALESCE(user_desks.deskId,7) = 1,0,1) , 0)) AS london,
              SUM(
                IF(
                    ((
                      SELECT
                        MIN(calls.date)
                      FROM
                        calls
                      WHERE
                        customer_deposits.customerId = calls.clientId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(calls.date)
                    FROM
                      calls
                    WHERE
                      customer_deposits.customerId = calls.clientId
                  ))
                  AND
                    ((
                      SELECT
                        MIN(customer_communications.createDate)
                      FROM
                        customer_communications
                      WHERE
                        customer_deposits.customerId = customer_communications.customerId
                      )
                  IS NULL
                  OR
                  customer_deposits.requestTime <
                  (
                    SELECT
                      MIN(customer_communications.createDate)
                    FROM
                      customer_communications
                    WHERE
                      customer_deposits.customerId = customer_communications.customerId
                  )),1,0)) AS self_deposits,
              SUM(IF((SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId) IS NULL OR customer_deposits.requestTime < (SELECT MIN(calls.date) FROM calls WHERE customer_deposits.customerId = calls.clientId),customer_deposits.amountUSD,0)) AS self_amount
            FROM
              customers
            LEFT JOIN customer_deposits ON customer_deposits.customerId = customers.id
            LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
            -- LEFT JOIN user_desks ON customers.employeeInChargeId = user_desks.userId
            WHERE  customers.isDemo=0
            AND customer_deposits.paymentMethod != 'Bonus'
            AND customer_deposits.status = 'approved'
            #AND ((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324,339,340))
            AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
            GROUP BY aff_id
          ) as transactions ON transactions.aff_id=leads.aff_id";

    $user_id = $_SESSION['userdata']['id'];
    $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
    $affiliate_users = $systemDB->fetchAll($affiliate_users_sql);

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " WHERE 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " OR leads.aff_id = '" . $aff_id['aff_id'] . "'";
            }
        } else {
            if (isset($affiliate_users) && $affiliate_users) {
                $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
                $sql = "select * from ({$sql}) as t1 where t1.aff_id in ('" . $filter . "')";
            }
        }
    } else {
        $sql = $sql . " WHERE leads.aff_id = '" . $affiliate . "'";
    }

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;

}

function getLeadsByCountries($dpStart, $dpEnd, $affiliate)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();
    $useAffiliate = ($affiliate === '0') ? false : true;
    $multipleAffiliates = false;


    $user_id = $_SESSION['userdata']['id'];
    $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
    $affiliate_users = $systemDB->fetchAll($affiliate_users_sql);

    if (isset($affiliate_users) && $affiliate_users) {
        $useAffiliate = true;
    }


    if ($useAffiliate) {
        if (is_numeric($affiliate)) {
            if ($affiliate != 0) {
                $multipleAffiliates = true;
                $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
                $aff_ids = $systemDB->fetchAll($affSql);
                foreach ($aff_ids as $aff_id) {
                    $aff_in_list_arr[] = $aff_id['aff_id'];
                }
                $aff_in_list = implode('\',\'', $aff_in_list_arr);
            } else {
                $multipleAffiliates = true;
                $aff_in_list = implode('\',\'', array_column($affiliate_users, 'affiliate_affID'));
            }
        }
    }

    $sql = "SELECT country.name AS country,
       count(clients.id) leads,
       count(clients.id)-SUM(clients.islead) AS customers,
       COALESCE(deposits.dcount, 0) AS dcount,
       ROUND((COALESCE(deposits.FTD, 0) / (count(clients.id)-SUM(clients.islead))) * 100, 2) as crate,
       COALESCE(deposits.damount, 0) AS damount,
       COALESCE(deposits.FTDAmount, 0) AS FTDAmount,
       COALESCE(deposits.FTD, 0) AS FTD,
       COALESCE(deposits.self_deposit, 0) AS self_deposits,
       COALESCE(deposits.self_amount, 0) AS self_amount,
       COALESCE(withdrawals.amount,0) AS withdrawals,
       COALESCE(chargeBack.amount,0) AS chargeBack,
       COALESCE((deposits.damount / count(clients.id)), 0) AS revenue
FROM " . $GLOBALS["site_name"] . "_platform.country
RIGHT JOIN
  ( SELECT
           IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
           customers.Country AS country,
           customers.id AS id,
           customers.isLead AS islead
   FROM " . $GLOBALS["site_name"] . "_platform.customers,
        " . $GLOBALS["site_name"] . "_platform.sub_campaigns
   WHERE customers.isDemo=0
     AND sub_campaigns.id = customers.subCampaignId
     AND ((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324,339,340))
     AND customers.regTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ) AS clients ON country.id = clients.country

LEFT JOIN
  (SELECT sum(withdrawals.amountUSD) AS amount,
          customers.Country AS countryId
   FROM " . $GLOBALS["site_name"] . "_platform.customers
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns on (sub_campaigns.id = customers.subCampaignId)
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.withdrawals ON customers.id = withdrawals.customerid
   WHERE withdrawals.paymentmethod != 'Bonus'
     AND withdrawals.status = 'approved'
     AND withdrawals.confirmtime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ";

    if ($useAffiliate) {
        $sql .= " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) ";
        if ($multipleAffiliates) {
            $sql .= " IN ('" . $aff_in_list . "') ";
        } else {
            $sql .= " = '" . $affiliate . "' ";
        }
    }

    $sql .= " GROUP BY customers.Country)AS withdrawals ON country.id = withdrawals.countryId

LEFT JOIN
  (SELECT sum(withdrawals.amountUSD) AS amount,
          customers.Country AS countryId
   FROM " . $GLOBALS["site_name"] . "_platform.customers
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns on (sub_campaigns.id = customers.subCampaignId)
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.withdrawals ON customers.id = withdrawals.customerid
   WHERE withdrawals.paymentmethod = 'chargeBack'
     AND withdrawals.status = 'approved'
     AND withdrawals.confirmtime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ";

    if ($useAffiliate) {
        $sql .= " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) ";
        if ($multipleAffiliates) {
            $sql .= " IN ('" . $aff_in_list . "') ";
        } else {
            $sql .= " = '" . $affiliate . "' ";
        }
    }

    $sql .= " GROUP BY customers.Country)AS chargeBack ON country.id = chargeBack.countryId

LEFT JOIN
  ( SELECT customers.Country AS countryId,
           IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
       SUM(IF(customer_deposits.id>0,1,0)) AS dcount,
           SUM(customer_deposits.amountUSD) AS damount,
           SUM(IF(customers.firstDepositDate = customer_deposits.confirmTime, 1, 0)) AS FTD,
           SUM(IF(customers.firstDepositDate = customer_deposits.confirmTime, customer_deposits.amountUSD, 0)) AS FTDAmount,
           SUM(IF(
                 (SELECT MIN(calls.date)
                  FROM " . $GLOBALS["site_name"] . "_platform.calls
                  WHERE customer_deposits.customerId = calls.clientId) IS NULL
               OR customer_deposits.requestTime <
                 (SELECT MIN(calls.date)
                  FROM " . $GLOBALS["site_name"] . "_platform.calls
                  WHERE customer_deposits.customerId = calls.clientId),1,0)) AS self_deposit,
           SUM(IF(
                 (SELECT MIN(calls.date)
                  FROM " . $GLOBALS["site_name"] . "_platform.calls
                  WHERE customer_deposits.customerId = calls.clientId) IS NULL
               OR customer_deposits.requestTime <
                 (SELECT MIN(calls.date)
                  FROM " . $GLOBALS["site_name"] . "_platform.calls
                  WHERE customer_deposits.customerId = calls.clientId),customer_deposits.amountUSD,0)) AS self_amount
   FROM " . $GLOBALS["site_name"] . "_platform.customers
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.customer_deposits ON (" . $GLOBALS["site_name"] . "_platform.customers.id = " . $GLOBALS["site_name"] . "_platform.customer_deposits.customerId)
   LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns ON (" . $GLOBALS["site_name"] . "_platform.sub_campaigns.id = " . $GLOBALS["site_name"] . "_platform.customers.subCampaignId)
   WHERE customer_deposits.paymentMethod!='Bonus'
     AND customers.isDemo=0
     AND customer_deposits.status = 'approved'
     AND customer_deposits.confirmTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59' ";

    if ($useAffiliate) {
        $sql .= " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) ";
        if ($multipleAffiliates) {
            $sql .= " IN ('" . $aff_in_list . "') ";
        } else {
            $sql .= " = '" . $affiliate . "' ";
        }
    }

    $sql .= " GROUP BY customers.Country) AS deposits ON country.id = deposits.countryId";

    if ($useAffiliate) {
        if ($multipleAffiliates) {
            $sql = $sql . " WHERE clients.aff_id IN ('" . $aff_in_list . "') ";
        } else {
            $sql = $sql . " WHERE clients.aff_id = '" . $affiliate . "' ";
        }
    }

    $sql .= ' GROUP BY Country';

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}


function getLeads($dpStart, $dpEnd, $affiliate)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    /* switch ($desk) {
       case 0:
       $sql = "SELECT
        customers.regTime,
        customers.id,
        CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
        customers.isLead,
        customers.verification,
        customers.saleStatus,
        (SELECT name FROM country WHERE id = customers.Country LIMIT 1) as country,
        REPLACE(
          REPLACE(
            REPLACE(COALESCE((SELECT CONCAT(subject,' ',content) FROM calls WHERE clientId = customers.id ORDER BY date DESC LIMIT 1),''), CHAR(9), ' '),
            CHAR(10), ' '),
            CHAR(13), ' ') as callNote,
        #'' as affID,
        #'' as offerID,
        #sub_campaigns.param as subID,
        #IF(customers.campaignId IN(339,340),  SUBSTRING_INDEX(sub_campaigns.param,'_',2), IF(customers.campaignId IN (SELECT campaignId FROM ".$GLOBALS["system"].".tlv_campaigns), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) AS affID,
        IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID,
        #CASE
        # WHEN (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339) THEN SUBSTRING_INDEX(sub_campaigns.param,'_',2)
        # ELSE ''
        #END as affID,
        CASE
          WHEN (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339) THEN SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',1)
          ELSE ''
        END as offerID,
        CASE
          WHEN (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339) THEN SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',-1)
          ELSE ''
        END as subID,
        sub_campaigns.totalDeposits
        FROM customers, sub_campaigns WHERE sub_campaigns.id = customers.subCampaignId
        AND customers.isDemo = 0
        AND customers.regTime BETWEEN '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59'";

        if(isset($affiliate) && $affiliate !== 0) {
              if (is_numeric($affiliate)) {
                $affSql = "SELECT * FROM aff_group_members WHERE aff_team=".$affiliate;
                $aff_ids = $TradingPlatformDB->fetchAll($affSql);
                foreach ($aff_ids as $aff_id) {
                  $affs[] = $aff_id['aff_id'];
                }
                $sql.= " HAVING affID IN ('".implode("','", $affs)."')";
              } else {
                $sql .= " HAVING affID='".$affiliate."'";
              }
        }
        break;

      case 1:
       $sql = "SELECT
        customers.regTime,
        customers.id,
        CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
        customers.isLead,
        customers.verification,
        customers.saleStatus,
        (SELECT name FROM country WHERE id = customers.Country LIMIT 1) as country,
        REPLACE(
          REPLACE(
            REPLACE(COALESCE((SELECT CONCAT(subject,' ',content) FROM calls WHERE clientId = customers.id ORDER BY date DESC LIMIT 1),''), CHAR(9), ' '),
            CHAR(10), ' '),
            CHAR(13), ' ') as callNote,
        SUBSTRING_INDEX(sub_campaigns.param,'_',2) as affID,
        SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',1) as offerID,
        SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',-1) as subID,
        sub_campaigns.totalDeposits
        FROM customers, sub_campaigns
            WHERE sub_campaigns.id = customers.subCampaignId
        AND (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339)
        AND sub_campaigns.param NOT LIKE '%OTHER%'
        AND sub_campaigns.param NOT LIKE '%NONE%'
        AND customers.isDemo = 0
        AND customers.regTime BETWEEN '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59'";

            //".($affiliate=='0' ? '' : "AND SUBSTRING_INDEX(sub_campaigns.param,'_',2)='".$affiliate."'")."
           if(isset($affiliate) && $affiliate !== 0) {
            if (is_numeric($affiliate)) {
              $affSql = "SELECT * FROM aff_group_members WHERE aff_team=".$affiliate;
              $aff_ids = $TradingPlatformDB->fetchAll($affSql);
              foreach ($aff_ids as $aff_id) {
                $affs[] = $aff_id['aff_id'];
              }
              $sql .= " AND SUBSTRING_INDEX(sub_campaigns.param,'_',2) IN ('".implode("','", $affs)."')";
            } else {
              $sql .= " AND SUBSTRING_INDEX(sub_campaigns.param,'_',2)='".$affiliate."'";
            }
           }

      break;
      case 2:
               $sql = "SELECT
        customers.regTime,
        customers.id,
        CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
        customers.isLead,
        customers.verification,
        customers.saleStatus,
        (SELECT name FROM country WHERE id = customers.Country LIMIT 1) as country,
        REPLACE(
          REPLACE(
            REPLACE(COALESCE((SELECT CONCAT(subject,' ',content) FROM calls WHERE clientId = customers.id ORDER BY date DESC LIMIT 1),''), CHAR(9), ' '),
            CHAR(10), ' '),
            CHAR(13), ' ') as callNote,
        '-' as affID,
        '-'  as offerID,
        '-'  as subID,
        0 as totalDeposits
        FROM customers, sub_campaigns WHERE customers.registrationCountry != 225
        AND sub_campaigns.id = customers.subCampaignId
        AND sub_campaigns.mainCampaign = 358
        AND (sub_campaigns.param = 'NONE' OR sub_campaigns.param = '')
        AND customers.isDemo = 0
        AND customers.regTime BETWEEN '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59'";
      break;
      case 3:
                     $sql = "SELECT
        customers.regTime,
        customers.id,
        CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
        customers.isLead,
        customers.verification,
        customers.saleStatus,
        (SELECT name FROM country WHERE id = customers.Country LIMIT 1) as country,
        REPLACE(
          REPLACE(
            REPLACE(COALESCE((SELECT CONCAT(subject,' ',content) FROM calls WHERE clientId = customers.id ORDER BY date DESC LIMIT 1),''), CHAR(9), ' '),
            CHAR(10), ' '),
            CHAR(13), ' ') as callNote,
        '-' as affID,
        '-'  as offerID,
        '-'  as subID,
        0 as totalDeposits
        FROM customers, sub_campaigns WHERE sub_campaigns.id = customers.subCampaignId
        AND sub   _campaigns.mainCampaign = 358
        AND (sub_campaigns.param = 'NONE' OR sub_campaigns.param = '')
        AND customers.isDemo = 0
        AND customers.regTime BETWEEN '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59'";
      break;
      } */

    $sql = "SELECT
      customers.regTime,
      customers.id,
      CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
      customers.isLead,
      customers.verification,
        customers.saleStatus,
        (SELECT name FROM country WHERE id = customers.Country LIMIT 1) as country,
        REPLACE(
          REPLACE(
            REPLACE(COALESCE((SELECT CONCAT(subject,' ',content) FROM calls WHERE clientId = customers.id ORDER BY date DESC LIMIT 1),''), CHAR(9), ' '),
            CHAR(10), ' '),
            CHAR(13), ' ') as callNote,
        IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID,
      CASE
        WHEN (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339) THEN SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',1)
        ELSE ''
      END as offerID,
      CASE
        WHEN (sub_campaigns.mainCampaign = 340 OR sub_campaigns.mainCampaign = 339) THEN SUBSTRING_INDEX(SUBSTRING_INDEX(sub_campaigns.param,'_',-2),'_',-1)
        ELSE ''
      END as subID,
      COALESCE(SUM(amountUSD),0) as amountUSD,
      COUNT(amountUSD) as totalDeposits
      #sub_campaigns.totalDeposits

      FROM customers
      LEFT JOIN sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
      LEFT JOIN customer_deposits on (customer_deposits.customerId = customers.id)

      WHERE customers.isDemo = 0
      AND customers.regTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
      GROUP BY customers.id ";

    if (isset($affiliate) && $affiliate !== '0') {
        if (is_numeric($affiliate)) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            foreach ($aff_ids as $aff_id) {
                $affs[] = $aff_id['aff_id'];
            }
            $sql .= " HAVING affID IN ('" . implode("','", $affs) . "')";
        } else {
            $sql .= " HAVING affID='" . $affiliate . "'";
        }
    } else {

        $user_id = $_SESSION['userdata']['id'];
        $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
        $affiliate_users = $systemDB->fetchAll($affiliate_users_sql);

        if (isset($affiliate_users) && $affiliate_users) {
            $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
            $sql = "select * from ({$sql}) as t1 where t1.affID in ('" . $filter . "')";
        }
    }

    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;

}

function getUncalledCustomers($dpStart , $dpEnd , $affiliate){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	$sql = "SELECT customers.id AS customerId,
	       		   CONCAT(customers.FirstName,' ',customers.LastName) AS customerName
	       	FROM customers
	       	LEFT JOIN sub_campaigns ON sub_campaigns.id = customers.subCampaignId
	       	WHERE customers.isDemo=0
	       	      AND customers.isLead=0
	       	      AND customers.regTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
	       	      AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), 
	       	             (SELECT NAME FROM campaigns WHERE id=customers.campaignId), 
	       	              SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '$affiliate'
	       	      AND ( SELECT calls.date
                        FROM calls
                        WHERE customers.id = calls.clientId
                        LIMIT 1) IS NULL
                  AND (
                        SELECT customer_communications.createDate
                        FROM customer_communications
                        WHERE customers.id = customer_communications.customerId
                        LIMIT 1) IS NULL";
    $result = $TradingPlatformDB->fetchAll($sql);
    
    return $result;                    
}

function getAffiliates()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $spotDB_IBSystem = new MySqlDriver();

    $sql = " SELECT
          IF((mainCampaign>=408 AND mainCampaign<>417) OR mainCampaign IN (322,323,324), (SELECT name from campaigns WHERE id=mainCampaign),
          SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID,
          SUM(totalDeposits) as totalDeposits,
          SUM(leadsNum) as leadsNum,
          SUM(customersNum) as customersNum
          FROM sub_campaigns
          WHERE param NOT LIKE '%OTHER%'
          AND sub_campaigns.param NOT LIKE '%NONE%'
          AND ((mainCampaign>=408 AND mainCampaign<>417) OR mainCampaign IN (322,323,324,339,340))
          GROUP BY affID ";

    if (count($_SESSION['afgdata']) > 0) {
        $sql .= " HAVING affID IN ('" . implode('\',\'', $_SESSION['afgdata']) . "') ";
    }


    $user_id = $_SESSION['userdata']['id'];
    $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
    $affiliate_users = $spotDB_IBSystem->fetchAll($affiliate_users_sql);

    if (isset($affiliate_users) && $affiliate_users) {
        $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
        $sql = "select * from ({$sql}) as t1 where t1.affID in ('" . $filter . "')";
    }

    $affIDs = $TradingPlatformDB->fetchAll($sql);
    return $affIDs;
}

function getHasOptionsAffiliates()
{
    $params = array('Target' => 'Affiliate',
        'Method' => 'findAll',
        'fields[]' => 'company');
    $raw_result = json_decode(hasOptionsAPI($params));
    if (isset($raw_result->response) && isset($raw_result->response->data)) {
        $data = get_object_vars($raw_result->response->data);
        $result = array();
        foreach ($data as $aff_id => $aff_obj) {
            $company = (isset($aff_obj->Affiliate->company) ? $aff_obj->Affiliate->company : $aff_id);
            $result[] = array('affID' => $aff_id, 'company' => $company);
        }
        asort($result);
        return $result;
    }
    return false;
}

function getSpotOptionCampaigns()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT id, name FROM campaigns ORDER BY id DESC";
    $campaigns = $TradingPlatformDB->fetchAll($sql);
    return $campaigns;
}

function getRmCommissions($dpStart, $dpEnd)
{

    //platform database
    $TradingPlatformDB = new spotDB_TradingPlatform();

    //get all that is not demo or lead
    $sql = "SELECT
          customers.id AS 'customerId',
          customers.FirstName AS 'customerFName',
          customers.LAStName AS 'customerLName',
          users.id AS 'employeeId',
          users.firstName AS 'employeeName',
          users.lAStName AS 'employeeSruname',

          customers.currency AS 'currency',

          (SELECT IFNULL(SUM(customer_deposits.amount),0) FROM customer_deposits
          WHERE customers.id=customer_deposits.customerId
          AND customer_deposits.confirmTime > '" . $dpStart . "'
          AND customer_deposits.confirmTime < '" . $dpEnd . "'
          AND customer_deposits.paymentMethod!='Bonus'
          AND customer_deposits.status='approved'
          ) AS 'totalDepositsinPeriod',

          (SELECT IFNULL(SUM(customer_deposits.amount),0) FROM customer_deposits
          WHERE customers.id=customer_deposits.customerId
          AND customer_deposits.paymentMethod!='Bonus'
          AND customer_deposits.status='approved'
          ) AS 'totalDepositsAllTime',

          (SELECT IFNULL(SUM(customer_deposits.amount),0) FROM customer_deposits
          WHERE customers.id=customer_deposits.customerId
          AND customer_deposits.confirmTime > '" . $dpStart . "'
          AND customer_deposits.confirmTime < '" . $dpEnd . "'
          AND customer_deposits.paymentMethod='Bonus'
          AND customer_deposits.status='approved'
          ) AS 'totalBonusinPeriod',

          (SELECT IFNULL(SUM(customer_deposits.amount),0) FROM customer_deposits
          WHERE customers.id=customer_deposits.customerId
          AND customer_deposits.paymentMethod='Bonus'
          AND customer_deposits.status='approved'
          ) AS 'totalBonusAllTime',

          (SELECT IFNULL(SUM(positions.amount),0) FROM positions
          WHERE customers.id=positions.customerId
          AND positions.date > '" . $dpStart . "'
          AND positions.date < '" . $dpEnd . "'
          ) AS 'totalBetsinPeriod',

          (SELECT IFNULL(SUM(positions.amount),0) FROM positions
          WHERE customers.id=positions.customerId
          ) AS 'totalBetsAllTime',

          (SELECT IFNULL(SUM(withdrawals.amount),0) FROM withdrawals
          WHERE customers.id=withdrawals.customerId
          AND withdrawals.requestTime > '" . $dpStart . "'
          AND withdrawals.requestTime < '" . $dpEnd . "'
          AND withdrawals.paymentMethod!='Bonus'
          AND withdrawals.status='approved'
          ) AS 'totalWithdrawalsinPeriod',

          (SELECT IFNULL(SUM(withdrawals.amount),0) FROM withdrawals
          WHERE customers.id=withdrawals.customerId
          AND withdrawals.paymentMethod!='Bonus'
          AND withdrawals.status='approved'
          ) AS 'totalWithdrawalsAllTime'


          FROM customers

          LEFT JOIN users ON customers.employeeInChargeId=users.id

          WHERE customers.isDemo=0

          GROUP BY customers.id";

    //execute
    $query = $TradingPlatformDB->fetchAll($sql);


    foreach ($query as $key => $data) {

        $results[$key]['customerId'] = $data['customerId'];
        $results[$key]['customerFName'] = $data['customerFName'];
        $results[$key]['customerLName'] = $data['customerLName'];
        $results[$key]['employeeId'] = $data['employeeId'];
        $results[$key]['employeeName'] = $data['employeeName'];
        $results[$key]['employeeSruname'] = $data['employeeSruname'];
        $results[$key]['currency'] = $data['currency'];
        $results[$key]['totalDepositsinPeriod'] = $data['totalDepositsinPeriod'];
        $results[$key]['totalDepositsAllTime'] = $data['totalDepositsAllTime'];
        $results[$key]['totalBonusinPeriod'] = $data['totalBonusinPeriod'];
        $results[$key]['totalBonusAllTime'] = $data['totalBonusAllTime'];
        $results[$key]['totalBetsinPeriod'] = $data['totalBetsinPeriod'];
        $results[$key]['totalBetsAllTime'] = $data['totalBetsAllTime'];
        $results[$key]['totalWithdrawalsinPeriod'] = $data['totalWithdrawalsinPeriod'];
        $results[$key]['totalWithdrawalsAllTime'] = $data['totalWithdrawalsAllTime'];

    }


    if (is_null($results)) {
        $results['error'] = 'no data';
    }

    return $results;
}

function employee($dpStart, $dpEnd)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT
            CONCAT(users.FirstName,' ', users.LastName) as userName, userId, controller, pageOp, time, pageParams
          FROM
            hedgestonegroup_platform.user_logs
          LEFT JOIN
            hedgestonegroup_platform.users on users.id = user_logs.userId
          WHERE
            time BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
          AND
            pageOp != 'checkForToDoNoticesDueNow'
          AND
            pageParams > 0

          HAVING pageParams REGEXP '^-?[0-9]+$'
          LIMIT
            50000";


    $results = $TradingPlatformDB->fetchAll($sql);

    foreach ($results as $key => $data) {
        $date = new DateTime($results[$key]['time']);
        $date->add(new DateInterval('PT3H')); //add 3 hours to server time
        $results[$key]['time'] = $date->format('Y-m-d H:i:s');
    }

    return $results;
}

function getInventivaIds($employeeIds){
		
	$MainCoonDB = new MySqlDriver();
		
	$implode_ids = implode(',',$employeeIds);
	
	$sql = "SELECT real_spotId,
	               inventivaId 
	        FROM users
	        WHERE real_spotId IN ($implode_ids)";
	$result = $MainCoonDB->fetchAll($sql);
	
	return $result;        
	
}

function getEmployeesDesks()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT CONCAT(users.FirstName,' ', users.LastName) as userName, users.id, IFNULL(name, '') as desk
          FROM users
          LEFT JOIN user_desks on userId=users.id
          LEFT JOIN desks on deskId=desks.id
          WHERE 1";

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

//testing pnl formula
function testPNL($dpStart, $dpEnd, $desk, $affiliate, $convertUSD, $employee, $timeStart = "00:00:00", $timeEnd = "23:59:59", $onlyRobot)
{
    ini_set('max_execution_time', 300);

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    if ($desk == 0) {

        $sql = "SELECT
        #IF((customers.campaignid=339 OR customers.campaignid=340), Substring_index(sub_campaigns.param,'_',2) , IF(customers.campaignid IN (SELECT campaignid FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT name FROM campaigns WHERE  id=customers.campaignid), Substring_index(sub_campaigns.param,'_',2))) AS aff_id,
        IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
                  " . $GLOBALS["site_name"] . "_platform.customers.id AS customerId,
                  " . $GLOBALS["site_name"] . "_platform.customers.saleStatus AS saleStatus,
                  " . $GLOBALS["site_name"] . "_platform.country_reg.name AS country,
                  Concat(trim(" . $GLOBALS["site_name"] . "_platform.users.FirstName),' ',trim(" . $GLOBALS["site_name"] . "_platform.users.LastName)) AS employee,
                  " . $GLOBALS["site_name"] . "_platform.users.id AS employeeId,
                  Concat(" . $GLOBALS["site_name"] . "_platform.customers.firstname,' ', " . $GLOBALS["site_name"] . "_platform.customers.lastname) AS customerName,
                  COALESCE(turnover.amount, 0) as turnover,
                  COALESCE(turnover.amountUSD, 0) as turnoverUSD,
                  " . (($convertUSD) ? "'USD' as currency" : "" . $GLOBALS["site_name"] . "_platform.customers.currency") . "
        FROM      " . $GLOBALS["site_name"] . "_platform.customers
        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.customer_deposits
        ON        (
                            " . $GLOBALS["site_name"] . "_platform.customer_deposits.customerid = " . $GLOBALS["site_name"] . "_platform.customers.id)

        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.withdrawals
        ON        (
                            " . $GLOBALS["site_name"] . "_platform.withdrawals.customerid = customers.id)
        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.country
        ON        (
                            " . $GLOBALS["site_name"] . "_platform.customers.country = country.id)
        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.users
        ON        (
                            " . $GLOBALS["site_name"] . "_platform.customers.employeeinchargeid = users.id)
        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.country AS country_reg
        ON        (
                            " . $GLOBALS["site_name"] . "_platform.customers.Country = country_reg.id)
        LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns
        ON        (
                            sub_campaigns.id = customers.subcampaignid)

        LEFT JOIN (
          SELECT customerId, SUM(amount) as amount,SUM(amountUSD) as amountUSD,
            COUNT(customerId) as bets
            FROM onetouch_positions
            WHERE status!='canceled'
            AND date BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
            GROUP BY customerId
          UNION ALL SELECT customerId, SUM(amount) as amount,SUM(amountUSD) as amountUSD,
            COUNT(customerId) as bets
            FROM positions
            WHERE status!='canceled'
            AND date BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
            GROUP BY customerId
          UNION ALL SELECT customerId, SUM(investment) as amount,SUM(investmentUSD) as amountUSD,
            COUNT(customerId) as bets
            FROM ldo_positions
            WHERE status!='canceled'
            AND entryTime BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
            GROUP BY customerId
          UNION ALL SELECT customerId, SUM(investment) as amount,SUM(investmentUSD) as amountUSD,
            COUNT(customerId) as bets
            FROM forex_positions
            WHERE status!='canceled'
            AND entryTime BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
            GROUP BY customerId

        ) as turnover on customers.id = turnover.customerId

        WHERE     islead = 0";

        if ($onlyRobot) {

            $elitSignlsDB = new elitSignlsDB();
            $robotCustomerIdsql = "
                    SELECT customer.op_id FROM elitesignals.customer
                    LEFT JOIN customers_products ON (customers_products.id = customer.id)
                    WHERE op_id <> 0
                    AND customers_products.product_id = 4";
            $robotCustomerIds = $elitSignlsDB->fetchAll($robotCustomerIdsql);
            $last = count($robotCustomerIds) - 1;

            $sql .= " AND customers.id IN (";
            foreach ($robotCustomerIds as $key => $value) {
                $sql .= $value['op_id'];
                if ($key != $last) {
                    $sql .= ' , ';
                }
            }
            $sql .= ") ";
        }

        $sql .= " AND       isdemo=0 #and customers.id IN (44301,43444,20259,10763,10254,78468,34490)
        AND       (
                            " . $GLOBALS["site_name"] . "_platform.withdrawals.id IS NOT NULL
                  OR        " . $GLOBALS["site_name"] . "_platform.customer_deposits.id IS NOT NULL)
        GROUP BY  " . $GLOBALS["site_name"] . "_platform.customers.id
        ";

        if (is_numeric($affiliate)) { //Untested and probably doesn't work, don't rely on numeric ids here

            if ($affiliate != 0) {
                $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
                $aff_ids = $systemDB->fetchAll($affSql);
                $sql = $sql . " WHERE 1=0";
                foreach ($aff_ids as $aff_id) {
                    $sql = $sql . " OR leads.aff_id = '" . $aff_id['aff_id'] . "'";
                }
            }

        } else {
            $sql = $sql . "\nHAVING aff_id = '" . $affiliate . "'";
        }

        if ($employee > 0) {
            if (is_numeric($affiliate)) {
                $sql .= "HAVING employeeId = " . $employee;
            } else {
                $sql .= "AND employeeId = " . $employee;
            }
        }


    } else {


        $sql = "SELECT
           #IF((customers.campaignId=339 OR customers.campaignId=340), SUBSTRING_INDEX(sub_campaigns.param,'_',2) , IF(customers.campaignId IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns), (SELECT NAME FROM campaignsWHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2))) AS aff_id,
           IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as aff_id,
           " . $GLOBALS["site_name"] . "_platform.customers.id AS customerId,
           " . $GLOBALS["site_name"] . "_platform.customers.saleStatus AS saleStatus,
           " . $GLOBALS["site_name"] . "_platform.country_Reg.name AS country,
           Concat(trim(" . $GLOBALS["site_name"] . "_platform.users.FirstName),' ',trim(" . $GLOBALS["site_name"] . "_platform.users.LastName)) AS employee,
           " . $GLOBALS["site_name"] . "_platform.users.id AS employeeId,
           CONCAT(" . $GLOBALS["site_name"] . "_platform.customers.FirstName,' ', " . $GLOBALS["site_name"] . "_platform.customers.LastName) AS customerName,
          " . (($convertUSD) ? "'USD' as currency" : "" . $GLOBALS["site_name"] . "_platform.customers.currency") . ",
           COALESCE(user_desks .deskId,1) AS desk,
            COALESCE(turnover.amount, 0) as turnover,
            COALESCE(turnover.amountUSD, 0) as turnoverUSD
           FROM " . $GLOBALS["site_name"] . "_platform.customers
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.customer_deposits ON (" . $GLOBALS["site_name"] . "_platform.customer_deposits.customerId = " . $GLOBALS["site_name"] . "_platform.customers.id)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.withdrawals ON (" . $GLOBALS["site_name"] . "_platform.withdrawals.customerId = customers.id)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.country ON (" . $GLOBALS["site_name"] . "_platform.customers.Country = country.id)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.users ON (" . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = users.id)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.country AS country_Reg ON (" . $GLOBALS["site_name"] . "_platform.customers.Country = country_Reg.id)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks ON (customers.employeeInChargeId = user_desks.userId
                                              AND user_desks.deskId)
           LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)

            LEFT JOIN (
              SELECT customerId, SUM(amount) as amount,SUM(amountUSD) as amountUSD,
                COUNT(customerId) as bets
                FROM onetouch_positions
                WHERE status!='canceled'
                AND date BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
                GROUP BY customerId
              UNION ALL SELECT customerId, SUM(amount) as amount,SUM(amountUSD) as amountUSD,
                COUNT(customerId) as bets
                FROM positions
                WHERE status!='canceled'
                AND date BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
                GROUP BY customerId
              UNION ALL SELECT customerId, SUM(investment) as amount,SUM(investmentUSD) as amountUSD,
                COUNT(customerId) as bets
                FROM ldo_positions
                WHERE status!='canceled'
                AND entryTime BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
                GROUP BY customerId
              UNION ALL SELECT customerId, SUM(investment) as amount,SUM(investmentUSD) as amountUSD,
                COUNT(customerId) as bets
                FROM forex_positions
                WHERE status!='canceled'
                AND entryTime BETWEEN '" . $dpStart . " " . $timeStart . "' AND '" . $dpEnd . " " . $timeEnd . "'
                GROUP BY customerId
            ) as turnover ON customers.id = turnover.customerId

         WHERE     islead = 0";

        if ($onlyRobot) {

            $elitSignlsDB = new elitSignlsDB();
            $robotCustomerIdsql = "
                    SELECT customer.op_id FROM elitesignals.customer
                    LEFT JOIN customers_products ON (customers_products.id = customer.id)
                    WHERE op_id <> 0
                    AND customers_products.product_id = 4";
            $robotCustomerIds = $elitSignlsDB->fetchAll($robotCustomerIdsql);
            $last = count($robotCustomerIds) - 1;

            $sql .= " AND customers.id IN (";
            foreach ($robotCustomerIds as $key => $value) {
                $sql .= $value['op_id'];
                if ($key != $last) {
                    $sql .= ' , ';
                }
            }
            $sql .= ") ";
        }

        $sql .= "   AND       isdemo=0 #and customers.id IN (44301,43444,20259,10763,10254,78468,34490)
           AND       (
                                " . $GLOBALS["site_name"] . "_platform.withdrawals.id IS NOT NULL
                      OR        " . $GLOBALS["site_name"] . "_platform.customer_deposits.id IS NOT NULL)

           GROUP BY  " . $GLOBALS["site_name"] . "_platform.customers.id
           HAVING desk = " . $desk;
        if ($employee > 0) {
            $sql .= " AND " . $GLOBALS["site_name"] . "_platform.users.id = " . $employee;
        }

        if (is_numeric($affiliate)) { //Untested and probably doesn't work, don't rely on numeric ids here
            if ($affiliate != 0) {
                $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
                $aff_ids = $systemDB->fetchAll($affSql);
                $sql = $sql . " WHERE 1=0";
                foreach ($aff_ids as $aff_id) {
                    $sql = $sql . " OR leads.aff_id = '" . $aff_id['aff_id'] . "'";
                }
            }
        } else {
            $sql = $sql . " AND aff_id = '" . $affiliate . "'";
        }
    }

    //$sql .= " limit 50;";
// echo $sql; die;
    //return $sql;
    //var_dump($sql);die;
    $results = $TradingPlatformDB->fetchAll($sql);


    foreach ($results as $key => $data) {

        $pnl = getUserPNLFulltest($TradingPlatformDB, $dpStart, $dpEnd, $results[$key]['customerId'], $convertUSD, false, $timeStart, $timeEnd);
        //var_dump($pnl); die;
        $countryId = $results[$key]['country'];

        $results[$key]['pre_pnl'] = number_format($pnl['pre_pnl'], 2, ".", "");
        $results[$key]['post_pnl'] = number_format($pnl['post_pnl'], 2, ".", "");
        $results[$key]['real_pnl'] = number_format($pnl['real_pnl'], 2, ".", "");
        $results[$key]['real_ab'] = number_format($pnl['real_ab'], 2, ".", "");
        $results[$key]['target_turnover'] = number_format($pnl['target_turnover'], 2, ".", "");
        $results[$key]['actual_volume'] = number_format($pnl['actual_volume'], 2, ".", "");
        $results[$key]['customer_liability'] = number_format($pnl['customer_liability'], 2, ".", "");
        $results[$key]['current_balance'] = number_format($pnl['current_balance'], 2, ".", "");
        $results[$key]['turn_overUSD'] = 0;
        $results[$key]['turn_over'] = 0;

        //break;
    }

    return $results;

}

function emailBounceReport($loginCount = 1, $countries = false, $drStart = false, $drEnd = false, $ldStart = false, $ldEnd = false, $lvStart = false, $lvEnd = false, $depositCount = false, $totalDepositAmount = false)
{

    ini_set('max_execution_time', 300);
    $DBPlatform = new DB_TradingPlatform();
    $SITEDb = new SITEDB();

    $loginCount = $loginCount ? $loginCount : 1;


    $sql = "SELECT
              IF(" . $GLOBALS["site_name"] . "_new_site.customers.spot_email = " . $GLOBALS["site_name"] . "_platform.customers.email COLLATE utf8_unicode_ci,
                     " . $GLOBALS["site_name"] ."_new_site.customers.email,
                     " . $GLOBALS["site_name"] ."_platform.customers.email) AS email,
              " . $GLOBALS["site_name"] . "_platform.customers.id AS customer_id,
              " . $GLOBALS["site_name"] . "_platform.customers.FirstName AS first_name,
              " . $GLOBALS["site_name"] . "_platform.customers.LastName AS last_name,
              " . $GLOBALS["site_name"] . "_platform.country.name AS country,
              " . $GLOBALS["site_name"] . "_platform.country.iso AS countryIso,
              DATE_FORMAT(" . $GLOBALS["site_name"] . "_platform.customers.regTime,
                      '%Y-%m-%d') AS date_registered,
              DATE_FORMAT(MAX(confirmTime), '%Y-%m-%d') AS last_deposit,
              DATE_FORMAT(" . $GLOBALS["site_name"] . "_platform.customers.lastLoginDate,
                      '%Y-%m-%d') AS last_visit,
              " . $GLOBALS["site_name"] . "_platform.customers.regStatus as registration_status,
              " . $GLOBALS["site_name"] . "_platform.customers.saleStatus as sale_status,
              count(" . $GLOBALS["site_name"] . "_platform.customer_deposits.customerId) AS number_of_deposits,
              sum(" . $GLOBALS["site_name"] . "_platform.customer_deposits.amount) AS total_deposit_amount,
              (SELECT
                      count(id)
                  FROM
                      " . $GLOBALS["site_name"] . "_platform.customer_login_log
                  WHERE
                      " . $GLOBALS["site_name"] . "_platform.customers.id = " . $GLOBALS["site_name"] . "_platform.customer_login_log.customerId
                          and dateLogin > NOW() - interval 1 year) AS login_count,
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID
          FROM
              " . $GLOBALS["site_name"] . "_platform.customers
                  LEFT JOIN
              " . $GLOBALS["site_name"] . "_new_site.customers ON " . $GLOBALS["site_name"] . "_platform.customers.id = " . $GLOBALS["site_name"] . "_new_site.customers.spot_id
                  LEFT JOIN
              " . $GLOBALS["site_name"] . "_platform.customer_deposits ON " . $GLOBALS["site_name"] . "_platform.customer_deposits.customerId = " . $GLOBALS["site_name"] . "_platform.customers.id
                  LEFT JOIN
              " . $GLOBALS["site_name"] . "_platform.country ON " . $GLOBALS["site_name"] . "_platform.country.id = " . $GLOBALS["site_name"] . "_platform.customers.country
                  LEFT JOIN
              " . $GLOBALS["site_name"] . "_platform.sub_campaigns ON (" . $GLOBALS["site_name"] . "_platform.sub_campaigns.id = " . $GLOBALS["site_name"] . "_platform.customers.subCampaignId)
          WHERE
              " . $GLOBALS["site_name"] . "_platform.customers.regTime < NOW() - interval 7 day
          AND " . $GLOBALS["site_name"] . "_platform.customers.isDemo=0
          GROUP BY " . $GLOBALS["site_name"] . "_platform.customers.Id
          HAVING (login_count >= 1 OR date_registered > NOW() - interval 1 year)";

    if ($countries) { //countries is a comma delimeted list of country names in quotation marks (eg. "United Kingdom","Bulgaria","United States")
        $sql .= "\n";
        $sql .= "and country in (" . implode(",", $countries) . ")";
    }

    if ($drStart or $drEnd) { //Check date registered start or end, if they were provided. Format: mm-dd-yyyy
        if ($drStart) {
            $drStart = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $drStart);
        } else {
            $drStart = "'0000-00-00'";
        }
        if ($drEnd) {
            $drEnd = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $drEnd);
        } else {
            $drEnd = "NOW()";
        }
        $sql .= "\n";
        $sql .= "and date_registered between $drStart and $drEnd";
    }

    if ($ldStart or $ldEnd) { //Check last deposit start or end, if they were provided. Format: mm-dd-yyyy
        if ($ldStart) {
            $ldStart = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $ldStart);
        } else {
            $ldStart = "'0000-00-00'";
        }
        if ($ldEnd) {
            $ldEnd = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $ldEnd);
        } else {
            $ldEnd = "NOW()";
        }
        $sql .= "\n";
        $sql .= "and last_deposit between $ldStart and $ldEnd";
    }

    if ($lvStart or $lvEnd) { //Check last visit start or end, if they were provided. Format: mm-dd-yyyy
        if ($lvStart) {
            $lvStart = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $lvStart);
        } else {
            $lvStart = "'0000-00-00'";
        }
        if ($ldEnd) {
            $lvEnd = preg_replace('/(\d{2})-(\d{2})-(\d{4})/', "'$3-$1-$2'", $lvEnd);
        } else {
            $lvEnd = "NOW()";
        }
        $sql .= "\n";
        $sql .= "and last_visit between $lvStart and $lvEnd";
    }

    if ($depositCount) { //Filter by deposit count greater or equal to the argument provided
        if ($depositCount != "Any") { //Ignore default form value
            $sql .= "\n";
            $sql .= "and number_of_deposits >= $depositCount";
        }
    }

    if ($totalDepositAmount) { //Filter by total deposit amount greater or equal to the argument provided
        if ($totalDepositAmount != "Any") { //Ignore default form value
            $sql .= "\n";
            $sql .= "and total_deposit_amount >= $totalDepositAmount";
        }
    }
    //var_dump($sql);die;
    $results = $DBPlatform->fetchAll($sql);


    $excluded_expressions = $SITEDb->fetchAll("SELECT * FROM " . $GLOBALS["site_name"] . "_site.bounce_list_remove_expressions");
    $nonBouncedEmails = $SITEDb->fetchAll("SELECT email from " . $GLOBALS["site_name"] . "_site.email_bounce_report where bounced_date is not null;");
    $suppressedEmails = $SITEDb->fetchAll("SELECT email from " . $GLOBALS["site_name"] . "_site.email_suppression_list;");
    $manuallyRemovedEmails = $SITEDb->fetchAll("SELECT email from " . $GLOBALS["site_name"] . "_site.bounce_list_manually_removed_emails;");
    $blocked_countries = $SITEDb->fetchAll("SELECT countryCode FROM " . $GLOBALS["site_name"] . "_site.blocked_country_by_campaign where countryCode not like '\'\'' group by countryCode");

    $blocked_countries = stripCountriesFromArray($blocked_countries);


    $nonBouncedEmailsParsed = parseDbArrayEmailResults($nonBouncedEmails);
    $suppressedEmailsParsed = parseDbArrayEmailResults($suppressedEmails);
    $manuallyRemovedEmailsParsed = parseDbArrayEmailResults($manuallyRemovedEmails);

    $bounced_unset = 0;
    $is_suppressed_or_manually_removed_unset = 0;

    $email_address_list = array(); //We'll use this to match for duplicate emails with values added to them
    $all_email_address_list = array(); //Store all emails, invalid too

    foreach ($results as $key => $data) {
        array_push($all_email_address_list, $results[$key]['email']);

        if ((!filter_var($results[$key]['email'], FILTER_VALIDATE_EMAIL)) or (empty($results[$key]['email']))) {
            unset($results[$key]);
        } elseif (matches_remove_expression($results[$key], $excluded_expressions)) {
            unset($results[$key]);
        } elseif (has_bounced($results[$key]['email'], $nonBouncedEmailsParsed)) {
            unset($results[$key]);
            $bounced_unset++;
        } elseif (is_suppressed_or_manually_removed($results[$key]['email'], $suppressedEmailsParsed, $manuallyRemovedEmailsParsed)) {
            unset($results[$key]);
            $is_suppressed_or_manually_removed_unset++;
        } elseif (in_array($results[$key]['countryIso'], $blocked_countries)) {
            unset($results[$key]);
        } else {
            array_push($email_address_list, $results[$key]['email']); //Push the emails we're not unsetting into a global list to be used for more filtering below
        }
    }

    $results = array_values($results);

    foreach ($results as $key => $data) { //Second loop in order to be able to use the $email_address_list array in additional weeding out
        $email_without_nines = preg_replace('/([9]*)(?=@)/', "", $results[$key]['email']);
        $email_without_nines_splitted = preg_split("/@/", $email_without_nines);

        if ($results[$key]['email'] != $email_without_nines) { //This means the email ended with at least one 9 before the domain
            if (in_array($email_without_nines, $email_address_list) || is_splitted_ninefree_email_in_array($all_email_address_list, $email_without_nines_splitted)) { //Now we check if we have the same email (without the nines) in the list.
                unset($results[$key]); //If we do, we'll delete this one
            }
        }
    }

    $results = array_values($results);
    foreach ($results as $key => $value) {
        $results[$key]['email'] = getLocalCustomerBySpotEmail($results[$key]['email']);
    }

    return $results;

}


function is_splitted_ninefree_email_in_array($stack, $needle)
{
    $count = 0;
    foreach ($stack as $key => $value) {
        if (strpos($value, $needle[0]) > -1) {
            if ($count > 0) {
                return true;
            }
            $count++;
        } else {
            return false;
        }
    }
}


function stripCountriesFromArray($countries)
{
    $returnCountries = array();
    foreach ($countries as $country) {
        array_push($returnCountries, $country['countryCode']);
    }
    return $returnCountries;
}

function parseDbArrayEmailResults($rawResults)
{
    $parsedResults = array();
    foreach ($rawResults as $entry) {
        array_push($parsedResults, chop($entry["email"]));
    };
    return $parsedResults;
}

;

function matches_remove_expression($row, $excluded_expressions)
{
    if ((!isset($row)) or (!isset($excluded_expressions))) {
        return false;
    } else {
        $matches = false;
        foreach (array($row['email'], $row['first_name'], $row['last_name']) as $field) {
            if (preg_match('/@/', $field)) {
                if (preg_match('/(.)\1{4,}.*(?=@)/', $field)) { //Same character more than 4 times in a row in the email field before the domain
                    $matches = true;
                }
            } else {
                if (preg_match('/(.)\1{4,}/', $field)) { //Same character more than 4 times in a row in the first or last name fields
                    $matches = true;
                }
            }

            if (!($matches)) { //If we haven't matched the above rule, let's continue checking...
                foreach ($excluded_expressions as $expression) {
                    if (preg_match("/" . $expression['expression'] . "/i", $field)) {
                        $matches = true;
                    };
                }
            }
        }
        return $matches;
    }
}

function has_bounced($email = false, $nonBouncedEmails = array())
{
    if (!isset($email)) {
        return false;
    } else {
        if (in_array($email, $nonBouncedEmails)) {
            return true;
        } else {
            return false;
        };
    };
}

function is_suppressed_or_manually_removed($email = false, $suppressedEmails = array(), $manuallyRemovedEmails = array())
{
    if (!isset($email)) {
        return false;
    } else {
        if ((in_array($email, $suppressedEmails)) or (in_array($email, $manuallyRemovedEmails))) {
            return true;
        } else {
            return false;
        };
    };
}

function suppressEmails($data = Array())
{
    if (!isset($data)) {
        return false;
    } else {
        $SITEDB = new SITEDB();
        $emails = $data["emails"];
        foreach ($emails as $email_address) {
            $sql = "INSERT INTO " . $GLOBALS["site_name"] . "_site.bounce_list_manually_removed_emails ( email ) VALUES ( '$email_address' );";
            $results = $SITEDB->fetchAll($sql);
        }
        return true;
    }
}

function getUserPNLFulltest($TradingPlatformDB, $dpStart, $dpEnd, $userid, $convertToUSD, $cron = false, $timeStart = '00:00:00', $timeEnd = '23:59:59')
{

    //$convertToUSD = true;

    if ($cron == true) {
        $prePNL = getUserRealPNLFulltest($TradingPlatformDB, $dpStart . ' ' . $timeStart, $userid, $convertToUSD, true);
        $curPNL = getUserRealPNLFulltest($TradingPlatformDB, $dpEnd . ' ' . $timeEnd, $userid, $convertToUSD, true);


        $realPNL = $curPNL['real_pnl'] - $prePNL['real_pnl'];
        $realAB = $curPNL['real_ab'];
        $tTurnover = $curPNL['target_turnover'];
        $actualVolume = $curPNL['actual_volume'] - $prePNL['actual_volume'];
        $activatedBonus = $curPNL['activated_bonus'] - $prePNL['activated_bonus'];
        $converted_realPNL = $curPNL['converted_real_pnl'] - $prePNL['converted_real_pnl'];
        $converted_realAB = $curPNL['converted_real_ab'];
        $converted_tTurnover = $curPNL['converted_target_turnover'];
        $converted_actualVolume = $curPNL['converted_actual_volume'] - $prePNL['converted_actual_volume'];
        $converted_activatedBonus = $curPNL['converted_activated_bonus'] - $prePNL['converted_activated_bonus'];

        return array("pre_pnl" => $prePNL['real_pnl'], "post_pnl" => $curPNL['real_pnl'], "real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus, "converted_pre_pnl" => $prePNL['converted_real_pnl'], "converted_post_pnl" => $curPNL['converted_real_pnl'], "converted_real_pnl" => $converted_realPNL, "converted_real_ab" => $converted_realAB, "converted_target_turnover" => $converted_tTurnover, "converted_actual_volume" => $converted_actualVolume, "converted_activated_bonus" => $converted_activatedBonus);
    }

    $prePNL = getUserRealPNLFulltest($TradingPlatformDB, $dpStart . " $timeStart", $userid, $convertToUSD);
    $curPNL = getUserRealPNLFulltest($TradingPlatformDB, $dpEnd . " $timeEnd", $userid, $convertToUSD);
    //print_r($curPNL); die;
    $realPNL = $curPNL['real_pnl'] - $prePNL['real_pnl'];
    $realAB = $curPNL['real_ab'];

    $tTurnover = $curPNL['target_turnover'] - $prePNL['target_turnover'];
    $actualVolume = $curPNL['actual_volume'] - $prePNL['actual_volume'];
    $activatedBonus = $curPNL['activated_bonus'] - $prePNL['activated_bonus'];
    $customerLiability = $curPNL['customer_liability'];
    $currencyRate = $curPNL['currency_rate'];
    $current_balance = $curPNL['current_balance'];


    $processingFees = isset($processingFees) ? $processingFees : ""; //Minor fix for log-spam bug

    return array("pre_pnl" => $prePNL['real_pnl'], "post_pnl" => $curPNL['real_pnl'], "real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $tTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus, "processingFees" => $processingFees, "customer_liability" => $customerLiability, "currency_rate" => $currencyRate, "current_balance" => $current_balance);

    //return $customer_deposits;
}


function getUserRealPNLFulltest($TradingPlatformDB, $dpEnd, $userid, $convertToUSD, $cron = false)
{

    $db = new MySqlDriver();

    if ($convertToUSD) {
        $sql = "SELECT rateUSD FROM currencies,customers WHERE customers.currency = currencies.code AND customers.id = " . $userid;
        $currencyRate = $TradingPlatformDB->fetchAll($sql)[0]['rateUSD'];
    } else {
        $currencyRate = 0;
    }

//note: if we want to convert currencies to USD by spotoption's db
//change 'amount' to 'amountUSD'
//multiply 'payout' for 'rateUSD' and multiple payour with the rate (payout*rateUSD)
//change 'investment' to 'investmentUSD'
    $sql = "SELECT FirstName, LastName FROM customers WHERE id=" . $userid;
    $customer = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(amount-payout) FROM positions
                    WHERE date <= '" . $dpEnd . "'
                    AND status IN('won','lost','tie','sold')
                    AND customerId=" . $userid . "), 0)
                  ) as regular_pnl,
                  ( SELECT IFNULL((SELECT SUM(amount) FROM positions
                    WHERE date <= '" . $dpEnd . "'
                    AND status IN('open')
                    AND customerId=" . $userid . "), 0)
                  ) as open_positions,
                  ( SELECT IFNULL((SELECT SUM(amount) FROM positions
                    WHERE date <= '" . $dpEnd . "'
                    AND status IN('won','lost','tie','sold')
                    AND customerId=" . $userid . "), 0)
                  ) as regular_volume";

    $regular = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(amount-payout) FROM onetouch_positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as onetouch_pnl,
                  ( SELECT IFNULL((SELECT SUM(amount) FROM onetouch_positions
                    WHERE date <= '" . $dpEnd . "'
                    AND status IN('open')
                    AND customerId=" . $userid . "), 0)
                  ) as open_positions,
                 ( SELECT IFNULL((SELECT SUM(amount) FROM onetouch_positions
                  WHERE date <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as onetouch_volume";

    $onetouch = $TradingPlatformDB->fetchAll($sql);

    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(investment-payout) FROM ldo_positions
                  WHERE startDate <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as ldo_pnl,
                  ( SELECT IFNULL((SELECT SUM(investment) FROM ldo_positions
                    WHERE startDate <= '" . $dpEnd . "'
                    AND status IN('open')
                    AND customerId=" . $userid . "), 0)
                  ) as open_positions,
                 ( SELECT IFNULL((SELECT SUM(investment) FROM ldo_positions
                  WHERE startDate <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as ldo_volume";

    $ldo = $TradingPlatformDB->fetchAll($sql);


    //ILIYA - forex positions
    $sql = "SELECT  ( SELECT IFNULL((SELECT SUM(investment-payout) FROM forex_positions
                  WHERE startDate <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as forex_pnl,
                  ( SELECT IFNULL((SELECT SUM(investment) FROM forex_positions
                    WHERE startDate <= '" . $dpEnd . "'
                    AND status IN('open')
                    AND customerId=" . $userid . "), 0)
                  ) as open_positions,
                 ( SELECT IFNULL((SELECT SUM(investment) FROM forex_positions
                  WHERE startDate <= '" . $dpEnd . "'
                  AND status IN('won','lost','tie','sold')
                  AND customerId=" . $userid . "), 0)
                ) as forex_volume";

    $forex = $TradingPlatformDB->fetchAll($sql);


    //liron
    $flag = false;
    // $sql = "SELECT id , regStatus , saleStatus FROM ".$GLOBALS["site_name"]."_platform.customers  WHERE id='{$userid}' AND (regStatus='deactivated' OR FirstName LIKE '%closed%')";
    // $closedCustomer = $TradingPlatformDB->fetchAll($sql);
    // if($closedCustomer) {
    // 	$both = 0;
    // 	$status = "";
    // 	$firstName = $customer[0]['FirstName'];
    // 	$lastName = $customer[0]['LastName'];
    // 	if((strstr($firstName,"CLOSED") == true || strstr($firstName,"CLOSE") == true) && $closedCustomer[0]["regStatus"] == 'deactivated' && $closedCustomer[0]["saleStatus"] == 'noCall'){
    // 		$flag = true;
    // 	}else{
    // 		if((strstr($firstName,"CLOSED") == true || strstr($firstName,"CLOSE") == true)) {
    // 			$status.= "CLOSED";
    // 			$both = 1;
    // 		}
    // 		if($closedCustomer[0]["regStatus"] == 'deactivated' ) {
    // 			$status.= ($both==1) ? "&deactivated" : "deactivated" ;
    // 		}
    // 		$customer = "SELECT * FROM `closed_accounts` WHERE customerId='{$userid}'";
    // 		$result = $db->fetchAll($customer);
    // 		if(!$result){
    // 			$sql = "INSERT INTO ".$GLOBALS["system"].".closed_accounts( `customerId`, `firstName`, `lastName`, `status`) VALUES ('{$userid}', '{$firstName}', '{$lastName}', '{$status}')";
    // 			$db->execID($sql);
    // 		}
    // 	}
    // }

    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod != 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . "'

  ), 0)
) as deposits,
(
  SELECT IFNULL((
    SELECT SUM(customer_deposits.amount)
    FROM customers, customer_deposits
    WHERE customers.id = " . $userid . "
    AND customer_deposits.paymentMethod = 'Bonus'
    AND customer_deposits.customerId = customers.id
    AND customer_deposits.status = 'approved'
    AND customer_deposits.confirmTime < '" . $dpEnd . "'

  ), 0)
) as deposits_bonus";

    $customer_deposits = $TradingPlatformDB->fetchAll($sql);


    $sql = "SELECT (
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod != 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . "'

  ), 0)
) as withdrawals,
(
  SELECT IFNULL((
    SELECT SUM(withdrawals.amount)
    FROM customers, withdrawals
    WHERE customers.id = " . $userid . "
    AND withdrawals.paymentMethod = 'Bonus'
    AND withdrawals.customerId = customers.id
    AND withdrawals.status = 'approved'
    AND withdrawals.confirmTime < '" . $dpEnd . "'

  ), 0)
) as withdrawals_bonus";

    $customer_withdrawals = $TradingPlatformDB->fetchAll($sql);

    $totalDeposits = $customer_deposits[0]['deposits'];
    $totalBonusDeposits = $customer_deposits[0]['deposits_bonus'];

    $customerPL = $regular[0]['regular_pnl'] + $onetouch[0]['onetouch_pnl'] + $ldo[0]['ldo_pnl'] + $forex[0]['forex_pnl'];
    $netDeposits = $totalDeposits - $customer_withdrawals[0]['withdrawals'];
    $netBonus = $totalBonusDeposits - $customer_withdrawals[0]['withdrawals_bonus'];


//ILIYA
    $total_deposits = $customer_deposits[0]['deposits'];
    $total_withdrawals = $customer_withdrawals[0]['withdrawals'];
    $regular_pnl = $regular[0]['regular_pnl'];
    $one_touch_pnl = $onetouch[0]['onetouch_pnl'];
    $ldo_pnl = $ldo[0]['ldo_pnl'];
    $ldo_volume = $ldo[0]['ldo_volume'];
    $forex_pnl = $forex[0]['forex_pnl'];
    $forex_volume = $forex[0]['forex_volume'];
    $regular_positions_volume = $regular[0]['regular_volume'];
    $one_touch_positions_volume = $onetouch[0]['onetouch_volume'];
    $total_bonus_deposits = $customer_deposits[0]['deposits_bonus'];
    $total_bonus_withdrawals = $customer_withdrawals[0]['withdrawals_bonus'];
    $openPositions = $regular[0]['open_positions'] + $onetouch[0]['open_positions'] + $ldo[0]['open_positions'] + $forex[0]['open_positions'];

//ERAN
    $customer_firstname = $customer[0]['FirstName'];
    $customer_lastname = $customer[0]['LastName'];

//-------------------------------------------------------------------Closed Customer Flag
    $closedCustomer = (stripos($customer_firstname, 'closed') !== FALSE || stripos($customer_lastname, 'closed') !== FALSE) ? TRUE : FALSE;

//-------------------------------------------------------------------Customer PL
    $customerPL = $regular_pnl + $one_touch_pnl + $ldo_pnl + $forex_pnl;

//-------------------------------------------------------------------Customer Losses
    if ($customerPL > 0)
        $customerLosses = $customerPL;
    else
        $customerLosses = 0;

//-------------------------------------------------------------------Customer Winnings
    $customerWinnings = $customerPL - $customerLosses;

//-------------------------------------------------------------------Net Deposit
    $netDeposit = $total_deposits - $total_withdrawals;


//-------------------------------------------------------------------Net Bonus
    $netBonus = $total_bonus_deposits - $total_bonus_withdrawals;

//-------------------------------------------------------------------Target Turnover
    if ($total_bonus_deposits > 0)
        $targetTurnover = ($total_deposits + $total_bonus_deposits) * 20;
    else
        $targetTurnover = $total_deposits * 20;

//-------------------------------------------------------------------Actual Volume
    $actualVolume = $regular_positions_volume + $one_touch_positions_volume + $ldo_volume + $forex_volume;

//-------------------------------------------------------------------Activated Bonus
    if ($targetTurnover < $actualVolume)
        $activatedBonus = $netBonus;
    else
        $activatedBonus = 0;

//HACK FOR DAVID: WILL ALWAYS TAKE NEGATIVE NETBONUS FOR CLOSED ACCOUNTS
    $activatedBonus -= ($closedCustomer && $total_bonus_withdrawals > 0) ? $total_bonus_withdrawals : 0;

//-------------------------------------------------------------------Activated PL
    if ($total_bonus_deposits == 0) {
        if ($actualVolume > $total_deposits) {
            $activatedPL = $customerPL;
        } else {
            $activatedPL = $customerPL * 0.8;
        }
    } else {
        if ($actualVolume < ($total_deposits + $total_bonus_deposits) * 3) {
            $activatedPL = ($customerWinnings * $total_deposits) / ($total_deposits + $total_bonus_deposits) * 0.8 + $customerLosses;
        } else {
            if ($actualVolume > ($total_deposits + $total_bonus_deposits) * 20) {
                $activatedPL = $customerPL;
            } else {
                $activatedPL = $customerWinnings * $total_deposits / ($total_deposits + $total_bonus_deposits) + $customerLosses;
            }
        }
    }

//-------------------------------------------------------------------Real AB
    if ($total_deposits > 0)
        $realAB = max($netDeposit + $activatedBonus - $customerPL, 0);
    else
        $realAB = 0;

    if ($flag == true) {
        $realAB = 0;
    }


//-------------------------------------------------------------------REAL P&L

    $realPNL = $netDeposit - max($netDeposit + $activatedBonus - ($activatedPL), 0);
    if ($flag == true) {
        $realPNL = 0;
    }

//-------------------------------------------------------------------Available for Trade
    $availableforTrade = max(($netDeposit + $netBonus - $customerPL) - $openPositions, 0);
//-------------------------------------------------------------------Available for withdrawal

//HACK FOR DAVID: WILL ALWAYS ADD THE NEGATIVE NETBONUS FOR CLOSED ACCOUNTS
    $pushNetBonus = ($closedCustomer && $total_bonus_withdrawals > 0) ? $total_bonus_withdrawals : 0;

    if ($total_bonus_deposits == 0) {
        if ($actualVolume > $total_deposits) {
            $availableForWithdrawalCalc = $netDeposit - $pushNetBonus - $customerPL;
        } else {
            $availableForWithdrawalCalc = ($netDeposit - $pushNetBonus - $customerPL) * 0.8;
        }
    } else {
        if ($actualVolume < (($total_deposits + $total_bonus_deposits) * 3)) {
            $availableForWithdrawalCalc = ($netDeposit - $pushNetBonus - $customerWinnings * $total_deposits / ($total_deposits + $total_bonus_deposits)) * 0.8 - $customerLosses;
        } else {
            if ($actualVolume > (($total_deposits + $total_bonus_deposits) * 20)) {
                $availableForWithdrawalCalc = $netDeposit + $netBonus - $customerPL;
            } else {
                $availableForWithdrawalCalc = ($netDeposit - $customerWinnings * $total_deposits / ($total_deposits + $total_bonus_deposits)) - $customerLosses;
            }
        }
    }

    $availableForWithdrawal = max($availableForWithdrawalCalc, 0);

//-------------------------------------------------------------------Processing Fees
    if ($availableForWithdrawal > 5000) {
        $processingFees = $availableForWithdrawal * 0.01;
    } elseif ($availableForWithdrawal > 50) {
        $processingFees = 50;
    } else {
        $processingFees = $availableForWithdrawal;
    }

//-------------------------------------------------------------------Customer Liability
    $customerLiability = $availableForWithdrawal - $processingFees;


// print_r(array("total_deposits" => $total_deposits,
//  "total_withdrawals " => $total_withdrawals,
//  "regular_pnl " => $regular_pnl,
// "one_touch_pnl " => $one_touch_pnl,
// "ldo_pnl " => $ldo_pnl,
// "ldo_volume" => $ldo_volume,
// "forex_pnl " => $forex_pnl,
// "forex_volume" => $forex_volume,
// "regular_positions_volume" => $regular_positions_volume,
// "one_touch_positions_volume" => $one_touch_positions_volume,
// "total_bonus_deposits" => $total_bonus_deposits,
// "total_bonus_withdrawals" => $total_bonus_withdrawals,
// "customerPL" => $customerPL,
// "customerLosses" => $customerLosses,
// "customerWinnings" => $customerWinnings,
// "netDeposit" => $netDeposit,
// "netBonus" => $netBonus,
// "targetTurnover" => $targetTurnover,
// "activatedBonus" => $activatedBonus,
//  " activatedPL " => $activatedPL,
//   " realAB " => $realAB,
//    " realPNL " => $realPNL,
//     " availableforTrade " => $availableforTrade,
//      " availableForWithdrawal " => $availableForWithdrawal,
//       " processingFees " => $processingFees,
//        " customerLiability " => $customerLiability,
//        "real_pnl" => $realPNL,
//       "real_ab" => $realAB,
//       "target_turnover" => $targetTurnover,
//       "actual_volume" => $actualVolume,
//       "activated_bonus" => $activatedBonus,
//       "openPositions" => $openPositions,
//       "pushNetBonus" => $pushNetBonus));

// $customer_trades_profit = $regular[0]['regular_pnl'] - $onetouch[0]['onetouch_pnl'] - $ldo[0]['ldo_pnl'];
// $current_balance = ($netDeposits + $netBonus) - $customer_trades_profit;

    //cron
    if ($cron == true) {

        //convert anyway if not converted
        if (!$convertToUSD) {
            $sql = "SELECT rateUSD FROM currencies,customers WHERE customers.currency = currencies.code AND customers.id = " . $userid;
            $currencyRate = $TradingPlatformDB->fetchAll($sql)[0]['rateUSD'];
        }

        //converter
        $regular_convetred['regular_pnl'] = $currencyRate * $regular[0]['regular_pnl'];
        $onetouch_convetred['onetouch_pnl'] = $currencyRate * $onetouch[0]['onetouch_pnl'];
        $regular_convetred['regular_volume'] = $currencyRate * $regular[0]['regular_volume'];
        $onetouch_convetred['onetouch_volume'] = $currencyRate * $onetouch[0]['onetouch_volume'];
        $customer_deposits_convetred['deposits'] = $currencyRate * $customer_deposits[0]['deposits'];
        $customer_withdrawals_convetred['withdrawals'] = $currencyRate * $customer_withdrawals[0]['withdrawals'];
        $customer_deposits_convetred['deposits_bonus'] = $currencyRate * $customer_deposits[0]['deposits_bonus'];
        $customer_withdrawals_convetred['withdrawals_bonus'] = $currencyRate * $customer_withdrawals[0]['withdrawals_bonus'];

        //return original & converted values
        $result = array_merge(array("real_pnl" => $realPNL, "real_ab" => $realAB, "target_turnover" => $targetTurnover, "actual_volume" => $actualVolume, "activated_bonus" => $activatedBonus, "converted_real_pnl" => ($realPNL * $currencyRate), "converted_real_ab" => ($realAB * $currencyRate), "converted_target_turnover" => ($targetTurnover * $currencyRate), "converted_actual_volume" => ($actualVolume * $currencyRate), "converted_activated_bonus" => ($activatedBonus * $currencyRate)), $regular, $onetouch, $customer_deposits, $customer_withdrawals, $regular_convetred, $onetouch_convetred, $customer_deposits_convetred, $customer_withdrawals_convetred);

        return ($result);

    }

    // if ($convertToUSD) {
    //   $regular[0]['regular_pnl'] = $currencyRate * $regular[0]['regular_pnl'];
    //   $onetouch[0]['onetouch_pnl'] = $currencyRate * $onetouch[0]['onetouch_pnl'];
    //   $regular[0]['regular_volume'] = $currencyRate * $regular[0]['regular_volume'];
    //   $onetouch[0]['onetouch_volume'] = $currencyRate * $onetouch[0]['onetouch_volume'];
    //   $customer_deposits[0]['deposits'] = $currencyRate * $customer_deposits[0]['deposits'];
    //   $customer_withdrawals[0]['withdrawals'] = $currencyRate * $customer_withdrawals[0]['withdrawals'];
    //   $customer_deposits[0]['deposits_bonus'] = $currencyRate * $customer_deposits[0]['deposits_bonus'];
    //   $customer_withdrawals[0]['withdrawals_bonus'] = $currencyRate * $customer_withdrawals[0]['withdrawals_bonus'];
    //   $realPNL = $realPNL * $currencyRate;
    //   $realAB = $realAB * $currencyRate;
    //   $targetTurnover = $targetTurnover * $currencyRate;
    //   $actualVolume = $actualVolume * $currencyRate;
    //   $activatedBonus = $activatedBonus * $currencyRate ;
    //   $customerLiability = $customerLiability * $currencyRate;
    //   $availableforTrade = $availableforTrade * $currencyRate;
    // }

    return array_merge(
        array(
            "real_pnl" => $realPNL,
            "real_ab" => $realAB,
            "target_turnover" => $targetTurnover,
            "actual_volume" => $actualVolume,
            "activated_bonus" => $activatedBonus,
            "customer_liability" => $customerLiability,
            "currency_rate" => $currencyRate,
            "current_balance" => $availableforTrade
        ),
        $regular,
        $onetouch,
        $customer_deposits,
        $customer_withdrawals
    );
    //return $customer_deposits;
}

function getHijacksReport($dpStart, $dpEnd)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT IF(" . $GLOBALS["site_name"] . "_platform.customers.firstDepositDate = '0000-00-00 00:00:00','No','Yes') AS deposited,
                 " . $GLOBALS["site_name"] . "_platform.customers.regTime,
                 " . $GLOBALS["site_name"] . "_platform.customers.isLead,
                 " . $GLOBALS["site_name"] . "_platform.customers.id,
                 IF(COALESCE(
                               (SELECT " . $GLOBALS["site_name"] . "_platform.user_desks.deskId
                                FROM " . $GLOBALS["site_name"] . "_platform.calls
                                LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks ON " . $GLOBALS["site_name"] . "_platform.calls.employeeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
                                WHERE " . $GLOBALS["site_name"] . "_platform.calls.clientId = " . $GLOBALS["site_name"] . "_platform.customers.id
                                ORDER BY date ASC LIMIT 1),7) = 1,'TEL AVIV','LONDON') AS firstCalledBy,

            (SELECT min(date)
             FROM " . $GLOBALS["site_name"] . "_platform.calls
             WHERE clientId = " . $GLOBALS["site_name"] . "_platform.customers.id) AS firstCalledTime,

            (SELECT name
             FROM " . $GLOBALS["site_name"] . "_platform.campaigns
             WHERE id=" . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign) AS fromCampaign,

            (SELECT name
             FROM " . $GLOBALS["site_name"] . "_platform.campaigns
             WHERE id=" . $GLOBALS["site_name"] . "_platform.customers.campaignId) AS toCampaign,
                 #IF((" . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns)) , 'TEL AVIV', 'LONDON') AS fromDesk,
                 IF((" . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign>=408 AND " . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign<>417) OR " . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign IN (322,323,324,339,340) , 'TEL AVIV', 'LONDON') AS fromDesk,
                 IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,'TEL AVIV','LONDON') AS toDesk,
                 HOUR(TIMEDIFF(
                                 (SELECT min(date)
                                  FROM " . $GLOBALS["site_name"] . "_platform.calls
                                  WHERE clientId = " . $GLOBALS["site_name"] . "_platform.customers.id)," . $GLOBALS["site_name"] . "_platform.customers.regTime)) AS firstCalledAfter
          FROM " . $GLOBALS["site_name"] . "_platform.customers
          LEFT JOIN " . $GLOBALS["site_name"] . "_platform.sub_campaigns ON " . $GLOBALS["site_name"] . "_platform.sub_campaigns.id = " . $GLOBALS["site_name"] . "_platform.customers.subCampaignId
          LEFT JOIN " . $GLOBALS["site_name"] . "_platform.user_desks ON " . $GLOBALS["site_name"] . "_platform.customers.employeeInChargeId = " . $GLOBALS["site_name"] . "_platform.user_desks.userId
          WHERE (" . $GLOBALS["site_name"] . "_platform.customers.campaignId != " . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign
                 #OR IF((" . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign IN (SELECT campaignId FROM " . $GLOBALS["system"] . ".tlv_campaigns)) , 'TEL AVIV', 'LONDON') != IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,'TEL AVIV','LONDON'))
                 OR IF(((" . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign>=408 AND " . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign<>417) OR " . $GLOBALS["site_name"] . "_platform.sub_campaigns.mainCampaign IN (322,323,324,339,340)) , 'TEL AVIV', 'LONDON') != IF(COALESCE(" . $GLOBALS["site_name"] . "_platform.user_desks.deskId,7) = 1,'TEL AVIV','LONDON'))
            AND " . $GLOBALS["site_name"] . "_platform.customers.regTime > '$dpStart'
            AND " . $GLOBALS["site_name"] . "_platform.customers.regTime < '$dpEnd'
          ORDER BY " . $GLOBALS["site_name"] . "_platform.customers.regTime DESC;";

    $results = $TradingPlatformDB->fetchAll($sql);

    return $results;


}

function getDeskchangeReport($dpStart, $dpEnd)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT customer_change_log.date as changeDate,
            CONCAT(action_user.firstName,' ', action_user.lastName) as actionEmployee,
            customer_change_log.customerId,
            COUNT(customer_deposits.customerId) AS countDeposits,
            SUM(customer_deposits.amountUSD) AS amountUSD,
            CONCAT(original_user.firstName,' ', original_user.lastName) as originalEmployee,
            origianl_deskname.name as originalDesk,
            CONCAT(new_user.firstName,' ', new_user.lastName) as newEmployee,
            new_deskname.name AS newDesk,
            customers.regTime
          FROM customer_change_log
          LEFT JOIN customers on (customer_change_log.customerId = customers.id)
          LEFT JOIN user_desks AS original_desk ON (customer_change_log.oldValue = original_desk.userId)
          LEFT JOIN user_desks AS new_desk ON (customer_change_log.newValue = new_desk.userId)
          LEFT JOIN customer_deposits ON (customer_change_log.customerId = customer_deposits.customerId)
          LEFT JOIN users AS original_user ON (customer_change_log.oldValue = original_user.id)
          LEFT JOIN users AS new_user ON (customer_change_log.newValue = new_user.id)
          LEFT JOIN desks AS origianl_deskname ON (original_desk.deskId = origianl_deskname.id)
          LEFT JOIN desks AS new_deskname ON (new_desk.deskId = new_deskname.id)
          LEFT JOIN users AS action_user ON (customer_change_log.user = action_user.id)
          WHERE customer_change_log.type='employeeInChargeId'
          AND (original_desk.deskId <> new_desk.deskId OR customer_change_log.newValue=0)
          AND customer_change_log.date between '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'
          GROUP BY customer_change_log.customerId
          ORDER BY customer_change_log.date DESC ";

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function ifAffExists($aff)
{
    $SITEDB = new SITEDB();
    $sql = "SELECT * FROM affiliates_to_campaigns WHERE atc_affiliate_id=" . $aff;
    $results = $SITEDB->fetchAll($sql);
    return $results;
}

function getATCReport($aff, $camp)
{

    $SITEDB = new SITEDB();

    $sql = "SELECT * FROM affiliates_to_campaigns";
    if ($aff > 0 && $camp > 0)
        $sql .= " WHERE atc_affiliate_id=" . intval($aff) . " AND atc_campaign_id=" . intval($camp);
    elseif ($aff > 0)
        $sql .= " WHERE atc_affiliate_id=" . intval($aff);
    elseif ($camp > 0)
        $sql .= " WHERE atc_campaign_id=" . intval($camp);

    $results = $SITEDB->fetchAll($sql);

    // Affiliate names from HasOptions
    $params = array('Target' => 'Affiliate',
        'Method' => 'findAll',
        'fields[]' => 'company');
    $raw_result = json_decode(hasOptionsAPI($params));
    $data = array();
    if (isset($raw_result->response) && isset($raw_result->response->data)) {
        $data = get_object_vars($raw_result->response->data);
    }

    // Campaign Names from SOPT
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT id, name FROM campaigns";
    $tp_results = $TradingPlatformDB->fetchAll($sql, 'id');

    foreach ($results as $pos => $result) {
        $company = $result['atc_affiliate_id'];
        if (isset($data[$result['atc_affiliate_id']]->Affiliate->company)) {
            $company = $data[$result['atc_affiliate_id']]->Affiliate->company;
        }
        $results[$pos]['atc_affiliate_company'] = $result['atc_affiliate_id'] . ' -' . $company;

        $campaign_name = $result['atc_campaign_id'];
        if (isset($tp_results[$result['atc_campaign_id']])) {
            $campaign_name = $tp_results[$result['atc_campaign_id']]['name'];
        }
        $results[$pos]['atc_campaign_name'] = $result['atc_campaign_id'] . ' - ' . $campaign_name;
        $results[$pos]['edit'] = [$result['atc_affiliate_id'], $result['atc_campaign_id']];
        $results[$pos]['deleteButton'] = [$result['atc_affiliate_id']];

    }

    return $results;
}

function getPromoUsage($dpStart, $dpEnd)
{
    $SITEDB = new SITEDB();
    $sql = "SELECT *
      FROM promo_codes_users
      INNER JOIN promo_codes ON (promo_id=id)
      WHERE redeem_time between '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";
    $results = $SITEDB->fetchAll($sql);
    return $results;
}

function addNewPromoUsage($promo_usage)
{
    $promo_id = $promo_usage['promo'];
    $customer_id = $promo_usage['customer'];
    if ($promo_id != 0 && $customer_id != 0 && is_numeric($customer_id)) {
        //check that customer exists
        $TradingPlatformDB = new spotDB_TradingPlatform();
        $sql = "SELECT * FROM customers WHERE id={$customer_id}";
        $results = $TradingPlatformDB->fetchAll($sql);
        $rows = sizeof($results);
        if ($rows == 1) {
            $SITEDB = new SITEDB();
            $sql = "INSERT INTO promo_codes_users (`promo_id`, `user_id`, `redeem_time`) VALUES ('{$promo_id}', '{$customer_id}', NOW())";
            $new_promo_usage = $SITEDB->exec($sql);
            die('{"success":"' . $new_promo_usage . '"}');
        } else {
            die('{"error":"customer does not exist"}');
        }
    } else {
        die('{"error":"bad promo or customer id"}');
    }

}

function getBonusesUsage($dpStart, $dpEnd)
{
    $SITEDB = new SITEDB();
    $sql = "SELECT bonus_pending.*
          FROM bonus_pending
          WHERE deposit_time between '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
          AND bonus_type='FTD_AUTO'";

    /* $sql = "SELECT bonus_pending.*, CONCAT(bonus_pending.user_id, ' - ', ".$GLOBALS["site_name"]."_platform.customers.FirstName, ' ', ".$GLOBALS["site_name"]."_platform.customers.LastName) as customer_id_name
      FROM bonus_pending
      LEFT JOIN ".$GLOBALS["site_name"]."_platform.customers on ".$GLOBALS["site_name"]."_platform.customers.id = bonus_pending.user_id
      WHERE deposit_time between '".$dpStart." 00:00:00' AND '".$dpEnd." 23:59:59'
      AND bonus_type='FTD_AUTO'"; */
    $results = $SITEDB->fetchAll($sql);
    return $results;
}

function rejectFTDBonus($id)
{
    $id = $id['id'];
    $SITEDB = new SITEDB();
    $sql = "UPDATE bonus_pending SET status='Rejected' WHERE `id` = '{$id}'";
    $new_act = $SITEDB->exec($sql);
    die('{"success":"' . $new_act . '"}');
}

function approveFTDBonus($id)
{   $TradingPlatformDB = new spotDB_TradingPlatform();

    $id = $id['id'];
    $SITEDB = new SITEDB();
    $sql = "SELECT * FROM bonus_pending WHERE `id`='{$id}'";
    $bonus_row = $SITEDB->fetchAll($sql);
    if (count($bonus_row)) {
        $data = $bonus_row[0];
        $percentage = $data['precentage'] / 100;
        $bonus = ($data['deposit_amount'] * $percentage);
        
        $spotParams = array('MODULE' => 'CustomerDeposits',
            'COMMAND' => 'add',
            'customerId' => $data['user_id'],
            'amount' => $bonus,
            'method' => 'bonus'
        );
        $spotCallBack = $TradingPlatformDB->spotAPIExec($spotParams);
		$return = strstr($spotCallBack, '<operation_status>successful</operation_status>') ? true : false;
        
        if ($return) {
            $sql = "UPDATE bonus_pending SET status='Approved' WHERE `id` = '{$id}'";
            $new_act = $SITEDB->exec($sql);
            die('{"success":"' . $new_act . '"}');
        }

        die('{"error":"An error has occurred. Please contact your system administrator"}');
        exit();

    }
}

function getFTDBonusesData()
{
    $SITEDB = new SITEDB();
    $sql = "SELECT *
      FROM deposit_bonuses";
    $results = $SITEDB->fetchAll($sql);
    return $results;
}

function deleteFTDBonus($id)
{
    $id = $id['id'];
    $SITEDB = new SITEDB();
    $sql = "DELETE FROM deposit_bonuses WHERE `id` = '{$id}'";
    $new_act = $SITEDB->exec($sql);
    die('{"success":"' . $new_act . '"}');
}

function addNewFTDBonus($bonus)
{
    foreach ($bonus as $field => $value) {
        mysql_real_escape_string(trim($value));
    }
    $SITEDB = new SITEDB();
    $sql = "INSERT INTO deposit_bonuses (`start_val`, `bonus`, `title`, `features`) values ";

    $start_val = $bonus['start_val'];
    $ftd_bonus = $bonus['bonus'];
    $title = $bonus['title'];
    $features = $bonus['features'];
	
    $sql .= "('{$start_val}' , '{$ftd_bonus}', '{$title}', '{$features}')";
 
    $insert_bonus = $SITEDB->exec($sql);
    die('{"success":"' . $insert_bonus . '","bonusAdded":"' . $title . '"}');
}

function updateBonus($bonus)
{
    foreach ($bonus as $field => $value) {
        mysql_real_escape_string(trim($value));
    }
    $SITEDB = new SITEDB();
    $id = $bonus['id'];
    $start_val = (int)$bonus['start_val'];
    $title = $bonus['title'];
    $features = $bonus['features'];

    $bonus = (int)$bonus['bonus'];
    $sql = "UPDATE deposit_bonuses set `start_val` = '{$start_val}', `bonus` = '{$bonus}', `title` = '{$title}', `features` = '{$features}'
  WHERE `id` = '{$id}'";
    $update_bonus = $SITEDB->exec($sql);
    die('{"success":"' . $update_bonus . '","bonusUpdated":"' . $title . '"}');
}

function getPromoCodesData()
{
    $SITEDB = new SITEDB();
    $sql = "SELECT *
      FROM promo_codes";
    $results = $SITEDB->fetchAll($sql);
    return $results;
}

function addNewPromo($promo)
{
    foreach ($promo as $field => $value) {
        if ($field != "desc" && $field != "expire_date") {
            mysql_real_escape_string(trim($value));
        }
    }
    $SITEDB = new SITEDB();
    $sql = "INSERT INTO promo_codes (`hash`, `desc`, `reusable`, `enabled`, `ftd`,`once_per_customer`, `percentage`, `min_deposit`, `max_deposit`, `expire_date`, `never_expired`, `userid` , `agreement_popup`) values ";
    $hash = $promo['promo_code'];
    $desc = $promo['desc'];
    $reusable = (int)$promo['reusable'];
    $enabled = (int)$promo['enabled'];
    $ftd = (int)$promo['ftd'];
    $opc = (int)$promo['onetime'];
    $agreement_popup = (int)$promo['autobonus'];
    $percentage = (int)$promo['percentage'];
    $min_deposit = (int)$promo['min_deposit'];
    $max_deposit = (int)$promo['max_deposit'];
    $expire_date = $promo['expire_date'];
    $never_expired = (int)$promo['never_expired'];
    $userid = (int)$promo['userid'];
    $sql .= "('{$hash}' , '{$desc}' , '{$reusable}' , '{$enabled}' , '{$ftd}' , '{$opc}' , '{$percentage}' , '{$min_deposit}' , '{$max_deposit}', '{$expire_date}' , '{$never_expired}' , '{$userid}' , '{$agreement_popup}')";


    $insert_promo = $SITEDB->exec($sql);
    die('{"success":"' . $updat_promo . '","promoAdded":"' . $hash . '"}');

}

function updatePromo($promo)
{
    foreach ($promo as $field => $value) {
        if ($field != "desc" && $field != "expire_date") {
            mysql_real_escape_string(trim($value));
        }
    }
    $SITEDB = new SITEDB();
    $id = $promo['id'];
    $hash = $promo['promo_code'];
    $desc = $promo['desc'];
    $reusable = (int)$promo['reusable'];
    $enabled = (int)$promo['enabled'];
    $ftd = (int)$promo['ftd'];
    $opc = (int)$promo['onetime'];
    $agreement_popup = (int)$promo['autobonus'];
    $percentage = (int)$promo['percentage'];
    $min_deposit = (int)$promo['min_deposit'];
    $max_deposit = (int)$promo['max_deposit'];
    $expire_date = $promo['expire_date'];
    $never_expired = (int)$promo['never_expired'];
    $userid = (int)$promo['userid'];
    
    $sql = "UPDATE promo_codes set `hash` = '{$hash}', `desc` = '{$desc}', `reusable` = '{$reusable}', `enabled` = '{$enabled}',
                                    `ftd` = '{$ftd}',`once_per_customer` = '{$opc}' , `percentage` = '{$percentage}', `min_deposit` = '{$min_deposit}',
                                    `max_deposit` = '{$max_deposit}', `expire_date` = '{$expire_date}',
                                    `never_expired` = '{$never_expired}', `userid` = '{$userid}' ,`agreement_popup` = '{$agreement_popup}'
            WHERE `id` = '{$id}'";

    $updat_promo = $SITEDB->exec($sql);
    die('{"success":"' . $updat_promo . '","promoUpdated":"' . $hash . '"}');

}

function addNewAtc($atc)
{
    $atc_affiliate_id = $atc['affiliate'];
    $atc_campaign_id = $atc['campaign'];
    if ($atc_affiliate_id != 0 && $atc_campaign_id != 0) {
        $if_aff_exists = ifAffExists($atc_affiliate_id);
        $rows = sizeof($if_aff_exists);
        if ($rows <= 1) {
            $SITEDB = new SITEDB();
            $sql = "INSERT INTO affiliates_to_campaigns (`atc_affiliate_id`, `atc_campaign_id`)
                values
                  ('{$atc_affiliate_id}' , '{$atc_campaign_id}')";
            $new_atc = $SITEDB->exec($sql);
            die('{"success":"' . $new_atc . '"}');
        } else {
            die('{"error":"affiliate already exists"}');
        }
    } else {
        die('{"error":"must choose affiliate and campaign"}');
    }

}

function UpdateAtc($atc)
{
    $atc_affiliate_id = $atc['aff_disabled'];
    $atc_campaign_id = $atc['campaign'];

    if ($atc_affiliate_id != 0 && $atc_campaign_id != 0) {
        $SITEDB = new SITEDB();
        $sql = "UPDATE affiliates_to_campaigns set `atc_campaign_id`= '{$atc_campaign_id}'
            WHERE `atc_affiliate_id` = '{$atc_affiliate_id}'";
        $new_act = $SITEDB->exec($sql);
        die('{"success":"' . $new_act . '"}');
    } else {
        die('{"error":"must choose a campaign"}');
    }
}

function deleteAtc($aff)
{
    $aff_id = $aff['aff_id'];
    $SITEDB = new SITEDB();
    $sql = "DELETE FROM affiliates_to_campaigns WHERE `atc_affiliate_id` = '{$aff_id}'";
    $new_act = $SITEDB->exec($sql);
    die('{"success":"' . $new_act . '"}');
}


function getFaildDeposits($dpStart, $dpEnd, $desk, $affiliate, $employee, $ftd)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $systemDB = new MySqlDriver();

    $sql = "SELECT
                deposits_log.customerId,
                CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
                country.name as country,
                deposits_log.amount,
                customers.currency,
                deposits_log.rawError,
                deposits_log.date,
                deposits_log.ip,
                if (customers.firstDepositDate = 0, true, if (customers.firstDepositDate > deposits_log.date, true, false)) as FTD,
                IF((mainCampaign>=408 AND mainCampaign<>417) OR mainCampaign IN (322,323,324), (SELECT name from campaigns WHERE id=mainCampaign), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) as affID,
                CONCAT(users.id, ' - ', users.firstName,' ', users.lastName) as employee,
                COALESCE(user_desks.deskId,1) as desk
            FROM deposits_log
            LEFT JOIN customers ON deposits_log.customerId = customers.id
            LEFT JOIN users ON users.id = customers.employeeInChargeId
            LEFT JOIN sub_campaigns ON customers.subcampaignId = sub_campaigns.id
            LEFT JOIN country ON country.id = customers.Country
            LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
            WHERE deposits_log.date  between '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'";

    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    if ($desk != 0) {
        $sql .= " having desk = " . $desk;
    }

    if ($ftd != 3) {
        if ($desk != 0) {
            $sql .= " and FTD = " . $ftd;
        }
        else{
            $sql .= " having FTD = " . $ftd;
        }
    }

    $sql .= ";";
//var_dump($sql);
    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getFTDsByCurrencies($dpStart, $dpEnd)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT
            CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) AS employee,
            SUM(CASE WHEN customer_deposits.currency='USD' THEN 1 ELSE 0 END) AS usd_ftds,
            SUM(CASE WHEN customer_deposits.currency='EUR' THEN 1 ELSE 0 END) AS eur_ftds,
            SUM(CASE WHEN customer_deposits.currency='GBP' THEN 1 ELSE 0 END) AS gbp_ftds,
            SUM(CASE WHEN customer_deposits.currency='JPY' THEN 1 ELSE 0 END) AS jpy_ftds,
            SUM(CASE WHEN customer_deposits.currency='AUD' THEN 1 ELSE 0 END) AS aud_ftds,
            SUM(CASE WHEN customer_deposits.currency='CAD' THEN 1 ELSE 0 END) AS cad_ftds,
            SUM(CASE WHEN customer_deposits.currency='BRL' THEN 1 ELSE 0 END) AS brl_ftds,
            COUNT(customer_deposits.amount) AS num_of_ftds
          FROM customer_deposits
          LEFT JOIN customers ON (customer_deposits.customerId = customers.id)
          LEFT JOIN users ON customers.employeeInChargeId = users.id
          WHERE customers.firstDepositDate = customer_deposits.confirmTime
          AND customer_deposits.confirmTime BETWEEN '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'
          GROUP BY customers.employeeInChargeId";

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function getNotCalledDepositors($dpStart, $dpEnd, $desk, $employee)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = " SELECT customers.id as customerId, CONCAT(customers.FirstName, ' ', customers.LastName) as customerName, customers.firstDepositDate, CONCAT(users.FirstName,' ', users.LastName) AS employee, COALESCE(user_desks .deskId,1) AS desk,
            IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
            country.name as country,
            (SELECT sum(customer_deposits.amountUSD) FROM customer_deposits WHERE customer_deposits.customerId = customers.id AND customer_deposits.status='approved' AND customer_deposits.paymentMethod!='bonus') AS amountUSD,
            customers.currency,
            customers.lastLoginDate,
            (SELECT SUM(IF(users.department='retention', 1, 0))
              FROM calls
              LEFT JOIN users ON (calls.employeeId = users.id)
              WHERE customers.id = calls.clientId) AS retention_calls,
            (SELECT SUM(IF(users.department='retention', 1, 0))
              FROM customer_communications
              LEFT JOIN users ON (customer_communications.creatorId = users.id)
              WHERE customers.id = customer_communications.customerId) AS retention_communications
          FROM customers
          LEFT JOIN calls ON (customers.id = calls.clientId)
          LEFT JOIN customer_communications ON (customers.id = customer_communications.customerId)
          LEFT JOIN users ON customers.employeeInChargeId = users.id
          LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
          LEFT JOIN sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
          LEFT JOIN country ON country.id = customers.Country
          WHERE customers.firstDepositDate BETWEEN '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'
          AND customers.isDemo=0 ";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }

    $sql .= " GROUP BY customers.id
          HAVING (retention_calls=0 OR retention_calls IS NULL)
          AND (retention_communications=0 OR retention_communications IS NULL)";

    if ($desk != 0) {
        $sql .= " AND desk = " . $desk;
    }

    $results = $TradingPlatformDB->fetchAll($sql);
    return $results;
}

function test_inst()
{
    $link = mysql_connect("ott-instance.cojo0rxznldz.eu-west-1.rds.amazonaws.com", "rpt_" . $GLOBALS["site_name_lowercase"] . "", "3sRE3iQoMEC6xrj");
    //var_dump($link);
    die();
}

function getUserProfileData($userId)
{

    $MySqlDriver = new MySqlDriver();
    $sql = "SELECT * FROM " . $GLOBALS["system"] . ".users WHERE id = '{$userId}'";
    $results = $MySqlDriver->fetchAll($sql);
    return $results;
}

function changeNsPassword($userId, $newPassword)
{
    if ($_SESSION["userdata"]["password"] == $newPassword)
        return "nothing to change password is the same";

    $MySqlDriver = new MySqlDriver();
    $date = date('Y-m-d H:i:s');
    $sql = "UPDATE users SET password = '{$newPassword}' , updatePasswordDate = '{$date}' , password_valid = 1  WHERE id = '{$userId}'";
    $results = $MySqlDriver->AffectedRows($sql);

    if ($results != 01)
        return "there was a problem changing your password !";
    else
        if (isset($_SESSION["resetPassword"]))
            unset($_SESSION["resetPassword"]);

    return "password changed successfully !";
}

function getCustomerIDByEmail($customerEmail)
{
    $customerEmail = getLocalCustomerByEmail($customerEmail);//masked email
    $spotDB = new spotDB_TradingPlatform();

    $sql = "SELECT customers.id From customers WHERE   email = '{$customerEmail}'";

    $results = $spotDB->fetchAll($sql);
    return $results;
}

function getCustomerIDByCommunicationEmail($customerEmail)
{

    $customerEmail = getLocalCustomerByEmail($customerEmail);
    $spotDB = new spotDB_TradingPlatform();

    $sql = "SELECT customers.id From customers WHERE   email = '{$customerEmail}'";

    $results = $spotDB->fetchAll($sql);
    return $results;
}

function getCustomer($customerId)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
			    customers.id,
			    IFNULL((SELECT lavarate_customers.tradingPlatformAccountName FROM hedgestonegroup_site.lavarate_customers
				                  WHERE lavarate_customers.spotId = '{$customerId}' and lavarate_customers.swichedToBinary = '0' LIMIT 1),'') AS LavarateId,
				IFNULL((SELECT lavarate_customers.accountId FROM hedgestonegroup_site.lavarate_customers
				                  WHERE lavarate_customers.spotId = '{$customerId}' and lavarate_customers.swichedToBinary = '0' LIMIT 1),'') AS AccountLeverateId,
				IFNULL((SELECT lavarate_customers.tradingPlatformAccountId FROM hedgestonegroup_site.lavarate_customers
				                  WHERE lavarate_customers.spotId = '{$customerId}' and lavarate_customers.swichedToBinary = '0' LIMIT 1),'') AS TPAccountId,
               /* (SELECT customers.spot_platform FROM hedgestonegroup_site.customers
                      WHERE customers.spot_id = '{$customerId}') `Spot_Platform`, */
			    customers.FirstName AS First_Name,
			    customers.LastName AS Last_Name,
			    customers.gender AS Sex,
			    customers.birthday AS Birthday,
			    customers.email AS Email,
			    customers.Phone AS Phone_Number,
			    customers.cellphone AS Mobile,
			    customers.fax AS Fax,
			    CountryCountry.name AS Country,
			    customers.State AS State,
			    customers.City AS City,
			    customers.street AS Street,
			    customers.houseNumber AS House_Number,
			    customers.aptNumber AS Apartment_Number,
			    customers.postCode AS Postal_Code,
			    customers.regTime AS Registration_Time,
			    customers.regStatus AS Registration_Status,
			    RegistrationCountry.name AS Registration_Country,
			    customers.isDemo AS Demo,
			    customers.currency AS Currency,
			    customers.saleStatus AS Sale_Status,
			    (balance.LastBalance + IF(sum(balance_daily.amount) IS NOT NULL, sum(balance_daily.amount), 0)) AS Balance,
			    IFNULL((SELECT
			            SUM(deposits.amount) AS Total_Deposit
			        FROM
			            customers
			                LEFT JOIN
			            customer_deposits AS deposits ON (customers.id = deposits.customerId)
			        WHERE
			            customers.id = '{$customerId}'
			                AND deposits.paymentMethod != 'Bonus'
			                AND deposits.status = 'approved'),0) AS Total_Deposit,
			    users.id AS EmployeeId,            
			    CONCAT(users.firstName, ' ', users.lastName) AS Employee,
			    desks.name AS Desk,
			    desks.id AS DeskId,
			    campaigns.name AS Campaign,
			    customers.a_aid AS Affiliate_ID,
			    sub_campaigns.param AS Parameter,
			    ROUND(IFNULL((SELECT SUM(amount)
			            FROM positions
			            WHERE status IN ('open')
			                  AND customerId = '{$customerId}'),0) +
			    IFNULL((SELECT SUM(amount)
			            FROM onetouch_positions
			            WHERE status IN ('open')
			                  AND customerId = '{$customerId}'),0) +
			    IFNULL((SELECT SUM(investment)
			            FROM ldo_positions
			            WHERE status IN ('open')
			                  AND customerId = '{$customerId}'),0) +
			    IFNULL((SELECT SUM(investment)
			            FROM forex_positions
			            WHERE status IN ('open')
			                  AND customerId = '{$customerId}'),0),2)                                          
			         AS Open_positions,
			    IFNULL(turnover.amount, 0) AS Turnover,
			    customers.verification AS Verified_Status,
			    IFNULL((SELECT
			            SUM(withdrawals.amount)
			        FROM
			            withdrawals
			        WHERE
			            withdrawals.paymentMethod NOT IN ('bonus' , 'fees')
			                AND withdrawals.status = 'approved'
			                AND withdrawals.customerId = '{$customerId}'),0) AS Total_Withdrawals,
			    IFNULL((SELECT SUM(amount)
				    FROM customer_deposits
					WHERE customerId='{$customerId}'
					      AND status='approved'
						  AND paymentMethod='Bonus'),0) -
				IFNULL((SELECT SUM(amount)
				    FROM withdrawals
					WHERE customerId='{$customerId}'
					      AND status='approved'
						  AND paymentMethod='Bonus'),0) AS Total_Net_Bonus,
				 customers.VIPGroup AS VIP_Group,
				 IFNULL((SELECT rl.riskStatus
				         FROM MainCoon.customer_risk_status crs
				         LEFT JOIN MainCoon.risk_status_list rl ON rl.id = crs.riskStatusId
				         WHERE crs.spotId = '{$customerId}'
				         ORDER BY lastUpdate DESC
				         LIMIT 1
						 ),'') AS Risk_Status		  
			FROM
			    customers
			        LEFT JOIN
			    users ON (customers.employeeInChargeId = users.id)
				    LEFT JOIN
			    user_desks ON (users.id = user_desks.userId)
				    LEFT JOIN
			    desks ON (user_desks.deskId = desks.id)
			        LEFT JOIN
			    customer_balance AS balance ON (customers.id = balance.customerId)
			        LEFT JOIN
			    customer_balance_daily AS balance_daily ON (customers.id = balance_daily.customerId)
			        LEFT JOIN
			    campaigns ON (customers.campaignId = campaigns.id)
			        LEFT JOIN
			    sub_campaigns ON (customers.subCampaignId = sub_campaigns.id)
			        LEFT JOIN
			    (SELECT SUM(amount) AS amount,
			            customerId,
			            SUM(bets) AS bets
			     FROM (SELECT
			            customerId,
			            SUM(amount) AS amount,
			            COUNT(customerId) AS bets
			    FROM
			        onetouch_positions
			    WHERE
			            status != 'canceled'
			            AND customerId = '{$customerId}'
			    GROUP BY customerId 
                UNION ALL 
                SELECT
			            customerId,
			            SUM(amount) AS amount,
			            COUNT(customerId) AS bets
			    FROM
			        positions
			    WHERE
			            status != 'canceled'
			            AND customerId = '{$customerId}'
			    GROUP BY customerId
                UNION ALL
                SELECT
			            customerId,
			            SUM(investment) AS amount,
			            COUNT(customerId) AS bets
			    FROM
			        ldo_positions
			    WHERE
			            status != 'canceled'
			            AND customerId = '{$customerId}'
			    GROUP BY customerId 
                            UNION ALL
                            SELECT
			            customerId,
			            SUM(investment) AS amount,
			            COUNT(customerId) AS bets
			    FROM
			        forex_positions
			    WHERE
			            status != 'canceled'
			            AND customerId = '{$customerId}'
			    GROUP BY customerId ) AS customer_positions


                            ) AS turnover ON customers.id = turnover.customerId
			        LEFT JOIN
			    (SELECT
			        country.id, country.name
			    FROM
			        country) AS RegistrationCountry ON customers.registrationCountry = RegistrationCountry.id
			        LEFT JOIN
			    (SELECT
			        country.id, country.name
			    FROM
			        country) AS CountryCountry ON customers.Country = CountryCountry.id
			WHERE
			    customers.id = '{$customerId}' ";

    $results = $spotDB->fetchAll($sql);
    
    $results = getLocalCustomerDataBySpotId($results);
    
    $results['isForbidden'] = false;
    $results['isComplience'] = false;
    

    $approach_sql = "SELECT closed_accounts.approach_status_id,
                            agents_approach_status.status_description,
                            closed_accounts.comment
                     FROM MainCoon.closed_accounts

                     LEFT JOIN MainCoon.agents_approach_status
                     ON agents_approach_status.status_id = closed_accounts.approach_status_id

                     WHERE customer_id = '{$customerId}'

                     ORDER BY closed_accounts.updated_at DESC
                     LIMIT 1";

    if (stripos($results[0]['First_Name'], 'FORBIDDEN') !== false) {
        $results['isForbidden'] = true;
    }
    
    $mainCoon = new DB_TradingPlatform();
    $approach = $mainCoon->fetchRow($approach_sql);
 
    if (isset($approach) && $approach) {
        if($approach['approach_status_id'] == 3 || $approach['approach_status_id'] == 4)	
           $results['isForbidden'] = true;
		elseif($approach['approach_status_id'] == 5)
           $results['isComplience'] = true;  
	}

    $results[0]['approach_status_id'] = (isset($approach) && $approach) ? $approach['approach_status_id'] : 1;
    $results[0]['approach_status_description'] = (isset($approach) && $approach) ? $approach['status_description'] : 'Normal';
    $results[0]['approach_comment'] = (isset($approach) && $approach) ? $approach['comment'] : '';

    $results[0]['edit_permission'] = $_SESSION['userdata']['per_editcustomer'];
    $results[0]['edit_bonus'] = $_SESSION['userdata']['per_editbonus'];
    $results[0]['edit_assign'] = $_SESSION['userdata']['per_assign'];
    $results[0]['edit_approach'] = $_SESSION['userdata']['per_approach'];
    $results[0]['edit_risk'] = $results[0]['EmployeeId'] == $_SESSION['userdata']['real_spotId'] || $_SESSION['userdata']['per_riskstatus'] ? 1 : 0 ;  
    // if this is leverate customer - lets get his balance
    if($results[0]['LavarateId'] && $results[0]['AccountLeverateId'] && $results[0]['TPAccountId']) {
        $leverateApi = new Leverate('tradingPlatformAccountName', $results[0]['LavarateId']);
        $balance = $leverateApi->GetBalanceLeverate($results[0]['LavarateId']);
        $results[0]['Balance'] = number_format($balance->Balance, 2);
    }

    return $results;

}

function getApproachs()
{
    $mainCoon = new MySqlDriver();
    $sql = "SELECT id, status_id, status_description, created_at, updated_at FROM MainCoon.agents_approach_status";
    $results =  $mainCoon->fetchAll($sql);
    return $results;
}

function setApproachs() {
    $MainCoon = new MySqlDriver();

    $customerId = $_REQUEST['approach_customerId'];
    $statusId = $_REQUEST['approach'];
    $comment = $_REQUEST['approachComment'];
	$comment = str_replace("'", "''", $comment);


    $sql = "INSERT INTO `MainCoon`.`closed_accounts` (`customer_id`, `approach_status_id`, `comment`) VALUES ('{$customerId}', '{$statusId}', '{$comment}')";

    $MainCoon->exec($sql);
    return true;
}

function getCustomerRealAcountBalance($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();

    $sql = "SELECT customer_balance.pnl,
           (SELECT SUM(customer_deposits.amount)
             FROM customer_deposits
             WHERE customer_deposits.paymentMethod <> 'bonus'
             AND customer_deposits.status = 'approved'
             AND customer_deposits.customerId = '{$customerId}') as Total_Deposit,
           (SELECT SUM(withdrawals.amount)
             FROM withdrawals
             WHERE withdrawals.paymentMethod NOT IN ('bonus', 'fees')
             AND withdrawals.status = 'approved'
             AND withdrawals.customerId = '{$customerId}') as Total_Withdrawals,
            (SELECT SUM(withdrawals.amount)
             FROM withdrawals
             WHERE withdrawals.paymentMethod = 'fees'
             AND withdrawals.status = 'approved'
             AND withdrawals.customerId = '{$customerId}') as Total_Fees
          FROM customer_balance
          WHERE customer_balance.customerId = '{$customerId}' ";

    $results = $spotDB->fetchAll($sql);

    //return $sql;
    return $results;

}


function getCustomerDeposits($customerId = null, $customerEmail = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           customer_deposits.id,
           customer_deposits.paymentMethod ,
           customer_deposits.clearedBy ,
           customer_deposits.amount ,
           customer_deposits.requestTime ,
           customer_deposits.status ,
           customer_deposits.processEmployeeId ,
           customer_deposits.receptionEmployeeId,
           customers.email,
           IF(users.id=0,'',CONCAT(users.id,' - ',users.firstName,' ',users.lastName)) AS processEmployee,
           IF(transactionEmployee.id=0,'',CONCAT(transactionEmployee.id,' - ',transactionEmployee.firstName,' ',transactionEmployee.lastName)) AS transactionEmployee 
      FROM customer_deposits
      LEFT JOIN users
        ON (customer_deposits.processEmployeeId = users.id)
	  LEFT JOIN users AS transactionEmployee
	    ON (customer_deposits.receptionEmployeeId = transactionEmployee.id) 	
      RIGHT JOIN customers
        ON (customer_deposits.customerId = customers.id)
      ";
    if ($customerId != null || $customerId != '') {
        $sql .= "WHERE customerid = '{$customerId}'";
    } else {
        $sql .= "WHERE customers.email = '{$customerEmail}'";
    }
    $sql .= " AND customer_deposits.paymentMethod <> 'Bonus'";

    $results = $spotDB->fetchAll($sql);
    return $results;

}

function getCustomerBonuses($customerId)
{
    $db = new SITEDB();

    /**
     * Create view
     */
    "CREATE OR REPLACE VIEW V_customer_bonuses AS 
        (
            SELECT hpw.id, hpw.customerId, hpw.amount, hpw.requestTime, hpw.status, hpw.processEmployeeId, 
				CONCAT(hpu.firstName,' ', hpu.lastName) as processEmployeeName, 'Withdrawal' `bonusType`
            FROM hedgestonegroup_platform.withdrawals hpw
			LEFT JOIN hedgestonegroup_platform.users hpu ON hpw.processEmployeeId = hpu.id
            WHERE hpw.paymentMethod = 'Bonus' AND hpw.status = 'approved'
        )
        union
        (
            SELECT hpcd.id, hpcd.customerId, hpcd.amount, hpcd.requestTime, hpcd.status, hpcd.processEmployeeId, 
				CONCAT(hpu.firstName,' ', hpu.lastName) as processEmployeeName, 'Deposit' `bonusType`
            FROM hedgestonegroup_platform.customer_deposits hpcd
			LEFT JOIN hedgestonegroup_platform.users hpu ON hpcd.processEmployeeId = hpu.id
            WHERE hpcd.paymentMethod = 'Bonus' AND hpcd.status = 'approved'
        )
        union
        (
            SELECT hscb.id, hscb.customerId, hscb.amount, hscb.requestTime, hscb.status, hscb.employeeId processEmployeeId, '' `processEmployeeName`, 'Deposit' `bonusType`
            FROM hedgestonegroup_site.customer_bonus hscb
            WHERE hscb.status <> 'approve by customer'
        )
        order by requestTime
        ";

    $sql = "SELECT cb.id, cb.amount, cb.requestTime, cb.status, cb.bonusType, cb.processEmployeeName
    FROM V_customer_bonuses cb
    WHERE cb.customerId = {$customerId}";

    $results = $db->fetchAll($sql);
    return $results;

}

function getCustomerWithdrawals($customerId = null, $customerEmail = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
				amount,
				amountUSD,
				paymentMethod,
				requestTime,
				status,
				confirmTime,
				cancellationTime,
				cancelReason
			FROM withdrawals
      ";
    if ($customerId != null || $customerId != '') {
        $sql .= "WHERE customerid = '{$customerId}'";
    } else {
        $sql .= "WHERE customers.email = '{$customerEmail}'";
    }

    $results = $spotDB->fetchAll($sql);
    return $results;

}

function getCustomerVinciDepositLog($customerId = null)
{
	//error_reporting(E_ALL);
	//ini_set('display_errors', 1);
	
	$newSiteDb = new NEW_SITEDB();
	
	$sql = "SELECT depositId, amount, requestDate, employeeId, status, error
			FROM lavarate_customer_deposit_log WHERE spotId='{$customerId}'";
	
	$results = $newSiteDb->fetchAll($sql);
	
	$spotDB = new spotDB_TradingPlatform();
	
	foreach ($results as $key => $data) {
		$employeeId = $data['employeeId'];
		$employeeSql = "SELECT CONCAT(users.firstName,' ', users.lastName) as user
             			FROM users
             			WHERE id = '{$employeeId}'";
             			
		$userResults = $spotDB->fetchAll($employeeSql);
		$results[$key]['user'] = $userResults[0]['user'];
	}
	
	return $results;
}

function getCustomerDepositLog($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           deposits_log.cardNum ,
           deposits_log.amount ,
           deposits_log.errorText ,
           deposits_log.rawError ,
           deposits_log.date ,
           deposits_log.ip

      FROM deposits_log
      WHERE customerid = '{$customerId}'
      ";


    $results = $spotDB->fetchAll($sql);
    return $results;

}

function customerCommunicationsVinci($spotId, $accountLeverateId)
{
	$newSiteDb = new NEW_SITEDB();
	$sql = "SELECT 
				lavarate_customer_communication.date,
				lavarate_customer_communication.subject,
				lavarate_customer_communication.content,
				lavarate_customer_communication.employeeId
			FROM lavarate_customer_communication
			WHERE spotId = '{$spotId}'";
	
	$results = $newSiteDb->fetchAll($sql);
	
	$spotDB = new spotDB_TradingPlatform();
	
	foreach ($results as $key => $data) {
		$employeeId = $data['employeeId'];
		$employeeSql = "SELECT CONCAT(users.firstName,' ', users.lastName) as user
             			FROM users
             			WHERE id = '{$employeeId}'";
             			
		$userResults = $spotDB->fetchAll($employeeSql);
		$results[$key]['user'] = $userResults[0]['user'];
	}
    return $results;
}

function customerCommunications($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           customer_communications.createDate ,
           customer_communications.subject ,
           customer_communications.body as content ,
           CONCAT
             (users.firstName,' ',
             users.lastName) as user

      FROM customer_communications

      LEFT JOIN users
        ON (customer_communications.creatorId = users.id)
      WHERE customerid = '{$customerId}'
      ";


    $results = $spotDB->fetchAll($sql);


    return $results;

}


function getCustomerCalls($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           calls.subject ,
           calls.content ,
           calls.date ,
           CONCAT
             (users.firstName,' ',
             users.lastName) as user

      FROM calls

      LEFT JOIN users
        ON (calls.employeeId = users.id)
      WHERE clientid = '{$customerId}'
      ";


    $results = $spotDB->fetchAll($sql);


    return $results;

}

function getCustomerLoginLog($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           dateLogin ,
           ip ,
           referer
      FROM customer_login_log
      WHERE customerid = '{$customerId}'
      ";


    $results = $spotDB->fetchAll($sql);
    return $results;

}

function getcustomerCreditCard($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
           id ,
           ccType ,
           ExpMonth ,
           ExpYear ,
           cardNum ,
           currency ,
           FirstName ,
           LastName ,
           Phone ,
           LastUpdateDate ,
           customerid ,
           Status
      FROM creditcard_users
      WHERE customerid = '{$customerId}'
      ";
    $results = $spotDB->fetchAll($sql);
    return $results;

}

function getCustomerPositions($customerId = null)
{
    $spotDB = new spotDB_TradingPlatform();

    $sql = "SELECT positions.id,
      customers.id,
      concat(customers.firstname,' ', customers.lastname) AS customerName,
      assets.name,
      positions.date,
      options.endDate,
      positions.position,
      positions.amountUSD,
      positions.rate,
      assets.rate,
      positions.status,
      positions.payout,
      positions.amountUSD+((IF(positions.opprofit=0,75,positions.opprofit)*positions.amountUSD)/100) AS CanWin,
      positions.amountUSD-((IF(positions.oploss=0,100,positions.oploss)*positions.amountUSD)/100) AS CanLoose,
      Concat(users.FirstName,' ',users.LastName) AS employee,
      COALESCE(user_desks .deskId,1) AS desk
      FROM positions
      LEFT JOIN customers ON (positions.customerId=customers.id)
      LEFT JOIN options ON (positions.optionId=options.id)
      LEFT JOIN assets ON (options.assetId=assets.id)
      LEFT JOIN users ON (customers.employeeinchargeid=users.id)
      LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
      WHERE positions.customerId = '{$customerId}'
      ORDER BY positions.id DESC";

    $results = $spotDB->fetchAll($sql);

    foreach ($results as $key => $data) {

        $results[$key]['CanWin'] = number_format($results[$key]['CanWin'], 2, ".", ",");
        $results[$key]['CanLoose'] = number_format($results[$key]['CanLoose'], 2, ".", ",");
        $results[$key]['amountUSD'] = number_format($results[$key]['amountUSD'], 2, ".", ",");
        $results[$key]['rate'] = number_format($results[$key]['rate'], 2, ".", ",");
    }
    return $results;
}

function getUsers(){
	$MySqlDriverDB = new MySqlDriver();
	
	$sql = " SELECT users.* ,
                    (SELECT GROUP_CONCAT(brand_access.brandId SEPARATOR ',')  
                     FROM brand_access WHERE brand_access.userId =users.id ) AS brands,
                    (SELECT GROUP_CONCAT(brands.name SEPARATOR ',')
                     FROM brands 
                     WHERE brands.id IN (SELECT brand_access.brandId 
                                         FROM brand_access 
                                         WHERE brand_access.userId =users.id)) AS brandNames
              FROM users"; 
	
    $users= $MySqlDriverDB->fetchAll($sql);
    return $users;
}

function getEditableUserColumns($dbConnection = false){
    $MySqlDriverDB = new MySqlDriver();
	$sql = "CALL editableUserColumns()";
	$columns = $MySqlDriverDB->fetchAll($sql);
	
	foreach($columns as $key=>$value){
	    	if($value['DATA_TYPE']=='enum'){                                                                
	    		$column_type = $value['COLUMN_TYPE'];
                preg_match('/enum\((.*)\)$/', $column_type, $matches);
                $matches = str_replace("'", "", $matches[1]);
                $enum_values = explode(',', $matches);
				$columns[$key]['OPTIONS'] = array();
				foreach($enum_values as $enum_key=>$enum_value){
					$columns[$key]['OPTIONS'][]=array("value"=>$enum_value,"text"=>$enum_value);	
				}
	        }else if($value['DATA_TYPE']=='tinyint'  && $value['COLUMN_NAME']!=='per_desk'){                                                                
	    		$columns[$key]['OPTIONS'] = array(array("value"=>"0","text"=>"No"),array("value"=>"1","text"=>"Yes"));
					 
	    	}else if($value['DATA_TYPE']=='tinyint' && $value['COLUMN_NAME']=='per_desk'){
                        
                $TradingPlatformDB = new spotDB_TradingPlatform();
                $sql = "SELECT desks.id  AS deskId, 
                               desks.name AS desk
                        FROM desks";
                $option_values = $TradingPlatformDB->fetchAll($sql); 
                $columns[$key]['OPTIONS'] = array(array("value"=>"0","text"=>"All"));	
                foreach($option_values as $option_key=>$option_value){
                    $columns[$key]['OPTIONS'][]=array("value"=>$option_value['deskId'],"text"=>$option_value['desk']);
                }	
			}
	}
    		
    $lengthColumns = count($columns);    
    $columns[$lengthColumns]['COLUMN_NAME'] = 'brands';
    $columns[$lengthColumns]['TYPE'] = 'SELECT2';
    $columns[$lengthColumns]['DATA_TYPE'] = 'tinyint';
    $columns[$lengthColumns]['OPTIONS'] = array();
    $columns[$lengthColumns]['TITLE'] = 'Brands';
    $columns[$lengthColumns]['COLUMN_TYPE'] = 'tinyint(1)';
    
    $MySqlDriverDB = new MySqlDriver();                         
    $sql ="SELECT brands.id AS brandId, 
                  brands.name AS brand 
           FROM brands";
    $option_values = $MySqlDriverDB->fetchAll($sql);
    
    foreach($option_values as $option_key=>$option_value){
         $columns[$lengthColumns]['OPTIONS'][]=array("value"=>$option_value['brandId'],"text"=>$option_value['brand']);
    }	  
  //  asort($columns);     
    return $columns;       	
}

function changeUser($params){
  $MySqlDriverDB = new MySqlDriver();    
    
    if (!array_key_exists('brands', $params)) {
         $params['brands'] = 0;
    }
	
    if(!isset($params['type']) || !in_array($params['type'],array('edit','add'))){
	   return array('status'=>'error','error_message'=>'Missing or Invalid type');   
    }
               
	$type = $params['type'];
	unset($params['type']);	
	$editableColumns =getEditableUserColumns();
         
	foreach($editableColumns as $key=>$value){
	   if($type == 'add' && $value['COLUMN_NAME']=='id')
	     continue;
	   if(!isset($params[$value['COLUMN_NAME']]))
	     return array('status'=>'error','error_message'=>'Missing '.$value['COLUMN_NAME']); 	
	}
         
	foreach($params as $key=>$value){
	   $column_exist = 0;	
	   foreach($editableColumns as $column_key=>$column_value){
	   	  if($key == $column_value['COLUMN_NAME']){	
		     $column_exist = 1;
			 break; 
		  }	    
	   }
	   if($column_exist == 0){
	   	   return array('status'=>'error','error_message'=> $key . ' is not user parameter.');
	   } 	
	}
        
	if(!filter_var($params['email'], FILTER_VALIDATE_EMAIL))
	   return array('status'=>'error','error_message'=>'Invalid Email');
	
	$user_exist = $type=='add' ? getUserByUserName($params['username']) : getUserById($params['id']);
	
	if($type=='add'){
        $query_email_test = "SELECT count(*) cnt FROM users where email='".trim($params['email'])."'";
        $email_test = $MySqlDriverDB->fetchAll($query_email_test); 
        if($email_test[0]['cnt']>=1){
            return array('status'=>'error','error_message'=>'Email exists. Please insert another email');   
        }                
        if($user_exist)
          return array("status"=>"error","error_message"=>"User Name exists. Please insert another user name");
        unset($params['id']);
        $userId = addUser($params);	   
     }else{
        $query_email_test = "SELECT count(*) cnt FROM users where email='".trim($params['email'])."' AND id<>{$params['id']}";
        $email_test = $MySqlDriverDB->fetchAll($query_email_test); 
        if($email_test[0]['cnt']>=1){
            return array('status'=>'error','error_message'=>'Email exists. Please insert another email');   
        }
        if(!$user_exist)
            return array("status"=>"error","error_message"=>"User does not exist");
        $username_exist = getUserByUserName($params['username']);
        if($username_exist && $username_exist['id']!=$params['id'])
            return array("status"=>"error","error_message"=>"User Name exists");
        unset($params['id']);	                      
        $userId = updateUserById($user_exist['id'],$params) ? $user_exist['id'] : false;  
     }
	 if(!$userId)
	   return array("status"=>"error","error_message"=>"Unable to {$type} user");
	 return array('status'=>'success','username'=>$params['username']); 
	
}

function addUser($params,$connection = false){
	$MySqlDriverDB = $connection ? $connection : new MySqlDriver();
    $brands = $params['brands'];
	unset($params['brands']);
    $keys= array_keys($params);
	$last_key = end($keys);
    $fields = implode(',',$keys);        
    
    foreach($params as $key=>$value){  
       $values .= "'{$value}'"; 
       if($key != $last_key)
	     $values .= " , ";
    }
       
    $sql = "INSERT INTO users ({$fields}) VALUES ({$values})";
	$user=$MySqlDriverDB->execID($sql);
	
    if(!$user)
	   return false;        
    if($brands!=0){
    	 $sql = "INSERT INTO brand_access (`userId`,`brandId`) VALUES ";   
         foreach($brands as $key=>$value){
            $sql .= "({$user},{$value})";
			if($key != sizeof($brands)-1)
               $sql .= " , ";
         }
		 $MySqlDriverDB->exec($sql);
    }              
    return $user;
}

function updateUserById($userId,$params){
    $MySqlDriverDB = new MySqlDriver();
    $sql = "UPDATE users SET ";
    $iter = 0;
    foreach($params as $key=>$value){
       if($key=='brands'){
             if($value==0){
                 $sql_brand = "DELETE from brand_access where userId={$userId}";
                 $MySqlDriverDB->exec($sql_brand);
             }else{
                 $value_string = implode(",", $value);
                 $sql_brand = "DELETE FROM brand_access WHERE userId={$userId} AND brandId NOT IN ({$value_string})";
                 $MySqlDriverDB->exec($sql_brand);
                 
				 $sql_brand = "SELECT * FROM brand_access WHERE userId={$userId}";
				 $brands = $MySqlDriverDB->fetchAllByColumn($sql_brand,'brandId');
				 $insert = 0;
				 $sql_brand = "INSERT INTO brand_access (userId,brandId) VALUES "; 
                 foreach($value as $brand_key=>$brand_value){
                     if(!in_array($brand_value,$brands)){
                     	if($insert != 0)
						   $sql_brand .= " , ";
						$sql_brand .= " ({$userId},{$brand_value}) ";
						$insert = 1;
						 
                     }      
                 }
				 if($insert)
				    $MySqlDriverDB->exec($sql_brand); 
              }   
         }else{
              if($iter != 0)
                  $sql .= " , ";
              $sql .= " $key = '{$value}' ";
              $iter++;
            }   
        }
        $sql .= " WHERE id = {$userId}"; 
        return $MySqlDriverDB->exec($sql);
}

function getUserByUserName($username,$connection = false){      
    $MySqlDriverDB = $connection ? $connection : new MySqlDriver();
    $sql = "SELECT * FROM users WHERE username= '{$username}'";		
    $user = $MySqlDriverDB->fetchAll($sql);
    if (!empty($user))  return $user[0];
    return false; 
}

function getUserById($userId,$connection = false){
    $MySqlDriverDB = $connection ? $connection : new MySqlDriver();
    $sql = "SELECT * FROM users WHERE id={$userId} LIMIT 1";
    $user = $MySqlDriverDB->fetchAll($sql);
    if (!empty($user))   return $user[0];
	return false; 
}

function getUser()
{

    $SITEdb = new MySqlDriver();
    $sql = "SELECT
            id,
            username,
            fullname,
            password,
            email,
            spotId,
            real_spotId,
            inventivaId,
            IF(per_reports = 0,'no','yes') as per_reports ,
            IF(per_administrative = 0,'no','yes') as per_administrative,
            IF(per_customers = 0,'no','yes') as per_customers,
            IF(per_ibsystem = 0,'no','yes') as per_ibsystem,
            IF(per_dashboard = 0,'no','yes') as per_dashboard,
            IF(per_traffic = 0,'no','yes') as per_traffic,
            IF(per_promo = 0,'no','yes') as per_promo,
            IF(per_secret = 0,'no','yes') as per_secret,
            IF(per_affiliates = 0,'no','yes') as per_affiliates,
            IF(per_agent = 0,'no','yes') as per_agent,
            IF(per_card = 0,'no','yes') as per_card,
            IF(per_admin = 0,'no','yes') as per_admin,
            IF(per_agenttools = 0,'no','yes') as per_agenttools,
            IF(per_agentreports = 0,'no','yes') as per_agentreports,
            IF(per_defrayment = '0','read','write') as per_defrayment,
            IF(per_editcustomer = '0','no','yes') as per_editcustomer,
            (case(per_desk)
             when 1 then 'Tel Aviv'
             when 9 then 'Cyprus'
             when 13 then 'Elite Profit Center'
             when 17 then 'South Africa'
             else 'All'
             end ) as per_desk,
             IF(per_ccdeposits = '0','no','yes') as per_ccdeposits,
             IF(per_spotapiconnectivity = '0','no','yes') as per_spotapiconnectivity,
             IF(per_analytics = '0','no','yes') as per_analytics,
             IF(per_retentionperformance = '0','no','yes') as per_retentionperformance,
             IF(per_pnl = '0','no','yes') as per_pnl,
             IF(per_suport = '0','no','yes') as per_suport,
             IF(per_retention = '0','no','yes') as per_retention,
             IF(per_conversion = '0','no','yes') as per_conversion,
             IF(per_conversionperformance = '0','no','yes') as per_conversionperformance,
             IF(per_editbonus = '0','no','yes') as per_editbonus,
             IF(per_approach = '0','no','yes') as per_approach,
             IF(per_shuffleexclude = '0','no','yes') as per_shuffleexclude,
             IF(per_vinci = '0','no','yes') as per_vinci
        FROM
            " . $GLOBALS["system"] . ".users
        WHERE  id!= 16";

    $results = $SITEdb->fetchAll($sql);

    return $results;

}

function addNewUser($user)
{
    $SITEdb = new MySqlDriver();

    $sql = "INSERT INTO users(`username`, `fullname`,`password`,`email`,`spotId`, `real_spotId`, `inventivaId`, `per_reports`, `per_administrative`, `per_customers`, `per_ibsystem`, `per_dashboard`, `per_traffic`, `per_secret`, `per_promo`, `per_affiliates`, `per_agent`, `per_card`, `per_admin`, `per_agenttools`, `per_agentreports`,`per_defrayment`,`per_editcustomer` , `per_desk` , `per_ccdeposits` , `per_spotapiconnectivity`,`per_analytics`,`per_retentionperformance`, `per_pnl`, `per_suport` , `per_retention` , `per_conversion` , `per_conversionperformance` , `per_editbonus` , `per_approach` , `per_shuffleexclude`)  values";


    $username = $user["username"];
    $fullname = $user["fullname"];
    $password = $user["password"];
    $email = $user["email"];

    $spotId = $user["spotId"];
    $real_spotId = $user["real_spotId"];
    $inventivaId = $user["inventivaId"];
    $per_reports = $user["per_reports"];
    $per_administrative = $user["per_administrative"];
    $per_customers = $user["per_customers"];
    $per_ibsystem = $user["per_ibsystem"];
    $per_dashboard = $user["per_dashboard"];
    $per_traffic = $user["per_traffic"];
    $per_secret = $user["per_secret"];
    $per_promo = $user["per_promo"];
    $per_affiliates = $user["per_affiliates"];
    $per_agent = $user["per_agent"];
    $per_card = $user["per_card"];
    $per_admin = $user["per_admin"];
    $per_agenttools = $user["per_agenttools"];
    $per_agentreports = $user["per_agentreports"];
    $per_defrayment = $user["per_defrayment"];
    $per_editcustomer = $user["per_editcustomer"];
    $per_desk = $user["per_desk"];
    $per_ccdeposits = $user["per_ccdeposits"];
    $per_spotapiconnectivity = $user["per_spotapiconnectivity"];
    $per_analytics = $user["per_analytics"];
    $per_retentionperformance = $user["per_retentionperformance"];
    $per_pnl = $user["per_pnl"];
    $per_suport = $user["per_suport"];
    $per_retention = $user["per_retention"];
    $per_conversion = $user["per_conversion"];
	$per_conversionperformance = $user["per_conversionperformance"];
	$per_editbonus = $user["per_editbonus"];
	$per_approach = $user["per_approach"];
	$per_shuffleexclude = $user["per_shuffleexclude"];

    $sql .= "('{$username}',

            '{$fullname}',
            '{$password}',
            '{$email}',
            '{$spotId}',
            '{$real_spotId}',
            '{$inventivaId}',
            '{$per_reports}',
            '{$per_administrative}',
            '{$per_customers}',
            '{$per_ibsystem}',
            '{$per_dashboard}',
            '{$per_traffic}',
            '{$per_secret}',
            '{$per_promo}',
            '{$per_affiliates}',
            '{$per_agent}',
            '{$per_card}',
            '{$per_admin}',
            '{$per_agenttools}',
            '{$per_agentreports}',
            '{$per_defrayment}',
            '{$per_editcustomer}',
            '{$per_desk}',
            '{$per_ccdeposits}',
            '{$per_spotapiconnectivity}',
			'{$per_analytics}',
			'{$per_retentionperformance}',
			'{$per_pnl}',
			'{$per_suport}' ,
			'{$per_retention}' ,
			'{$per_conversion}' , 
			'{$per_conversionperformance}' ,
			'{$per_editbonus}' ,
			'{$per_approach}' ,
			'{$per_shuffleexclude}')";

    $insert_user = $SITEdb->exec($sql);
    die('{"success":"' . $insert_user . '","addUser":"' . $username . '"}');


}

function UpdateUser($user)
{
    $SITEdb = new MySqlDriver();

    $id = $user["id"];
    $username = $user["username"];
    $fullname = $user["fullname"];
    $password = $user["password"];
    $email = $user["email"];

    $spotId = $user["spotId"];
    $real_spotId = $user["real_spotId"];
	$inventivaId = $user["inventivaId"];
    $per_reports = $user["per_reports"];
    $per_administrative = $user["per_administrative"];
    $per_customers = $user["per_customers"];
    $per_ibsystem = $user["per_ibsystem"];
    $per_dashboard = $user["per_dashboard"];
    $per_traffic = $user["per_traffic"];

    $per_secret = $user["per_secret"];
    $per_promo = $user["per_promo"];
    $per_affiliates = $user["per_affiliates"];
    $per_agent = $user["per_agent"];
    $per_card = $user["per_card"];
    $per_admin = $user["per_admin"];
    $per_agenttools = $user["per_agenttools"];
    $per_agentreports = $user["per_agentreports"];
    $per_defrayment = $user["per_defrayment"];
    $per_editcustomer = $user["per_editcustomer"];
    $per_desk = $user["per_desk"];
    $per_ccdeposits = $user["per_ccdeposits"];
    $per_spotapiconnectivity = $user["per_spotapiconnectivity"];
    $per_analytics = $user["per_analytics"];
    $per_retentionperformance = $user["per_retentionperformance"];
    $per_pnl = $user["per_pnl"];
    $per_suport = $user["per_suport"];
    $per_retention = $user["per_retention"];
    $per_conversion = $user["per_conversion"];
	$per_conversionperformance = $user["per_conversionperformance"];
	$per_editbonus = $user["per_editbonus"];
	$per_approach = $user["per_approach"];
	$per_shuffleexclude = $user["per_shuffleexclude"];
	$per_vinci = $user["per_vinci"];

    $sql = "UPDATE `users` SET

       `username`='{$username}',`password`='{$password}',`email`='{$email}',`fullname`='{$fullname}',
       `spotId`='{$spotId}', `real_spotId`='{$real_spotId}', `inventivaId`='{$inventivaId}', `per_reports`='{$per_reports}',`per_administrative`='{$per_administrative}',
       `per_customers`='{$per_customers}',`per_ibsystem`='{$per_ibsystem}',`per_dashboard`='{$per_dashboard}',`per_traffic`='{$per_traffic}',`per_secret`='{$per_secret}',
       `per_promo`='{$per_promo}',`per_affiliates`='{$per_affiliates}',`per_agent`='{$per_agent}',`per_card`='{$per_card}',`per_admin`='{$per_admin}',
       `per_agenttools`='{$per_agenttools}',`per_agentreports`='{$per_agentreports}',`per_defrayment`='{$per_defrayment}',`per_editcustomer`='{$per_editcustomer}',
       `per_desk`='{$per_desk}',`per_ccdeposits`='{$per_ccdeposits}',`per_spotapiconnectivity`='{$per_spotapiconnectivity}',`per_analytics`='{$per_analytics}',
       `per_retentionperformance`='{$per_retentionperformance}',`per_pnl`='{$per_pnl}' ,`per_suport`='{$per_suport}', `per_retention`='{$per_retention}',
       `per_conversion`='{$per_conversion}',`per_conversionperformance`='{$per_conversionperformance}',`per_editbonus`='{$per_editbonus}',`per_approach`='{$per_approach}',
       `per_shuffleexclude`='{$per_shuffleexclude}',`per_vinci`='{$per_vinci}'
        WHERE `id` = '{$id}'";


    $update_User = $SITEdb->exec($sql);

    die('{"success":"' . $update_User . '","updateUser":"' . $username . '"}');


}

function deleteUser($id)
{
    $SITEdb = new MySqlDriver();
    $sql = "DELETE FROM `users` WHERE id='{$id}'";
    $delete_User = $SITEdb->exec($sql);

    die('{"success":"' . $delete_User . '"}');
}

function getUserDesk($employee){
	$spotDB = new spotDB_TradingPlatform();
	
	$sql = "SELECT deskId FROM user_desks WHERE userId=$employee";
	
	$result = $spotDB->fetchAll($sql);
	$desk = $result[0]['deskId'];
	
	return $desk;
}

function getRAFBonusesData($sender, $friend, $radio)
{
    $SITEdb = new SITEDB();
    if ($radio == "senderFriend") {
        $sql = "UPDATE `raf_config`
				SET `mode` = 2 ,`sender_bonus`='{$sender}',`friend_bonus`= '{$friend}'";
    } else if ($radio == "sender") {
        $sql = "UPDATE `raf_config`
				SET `mode`= 1 ,`sender_bonus`='{$sender}',`friend_bonus`= 0 ";
    } else if ($radio == "none") {
        $sql = "UPDATE `raf_config`
				SET `mode`= 0 ,`sender_bonus` = 0,`friend_bonus`= 0 ";
    }


    $result = $SITEdb->exec($sql);
    die('{"success":"' . $result . '"}');
}

function setRAFBonusesData()
{
    $SITEdb = new SITEDB();
    $sql = "SELECT * FROM `raf_config` ";
    $result = $SITEdb->fetchAll($sql);
    return $result;
}


function insertUserLogin($userId)
{
    $db = new MySqlDriver();
    $user = "SELECT * FROM `users` WHERE id='$userId'";
    $result = $db->fetchAll($user);
    $sql = "INSERT INTO `users_login`(`userId`, `name`, `dateLogin`, `ip`) VALUES ";
    $name = $result[0]["username"];
    $date = date('Y-m-d H:i:s');
    $ip = getUserIpAddr();
    $sql .= "('{$userId}', '{$name}', '{$date}', '{$ip}')";
    $result = $db->fetchAll($sql);
    if ($result) {
        return true;
    }
}

function loginNavigate($changePassword){
	if ($changePassword) {    
        die('{"navigate":"/'.$_SESSION["chosen_brand"]["name"].'/user/change_password"}');
    }
    if ($_SESSION['redirect_from'])
    {
        die('{"navigate":"/'.$_SESSION["chosen_brand"]["name"] . $_SESSION['redirect_from'] . '"}');
    }else{
        die('{"navigate":"/'.$_SESSION["chosen_brand"]["name"].'/dashboard"}');
    }
}

function loginBrandChoice($params){
	$connection = new MySqlDriver();	
	setSession($params,$connection);
	$changePassword = checkChangePassword($params['userdata']['username'],$connection);
	insertUserLogin($_SESSION['userid']);
    loginNavigate($changePassword);
}

if (!function_exists('getUserIpAddr')) {
    function getUserIpAddr()
    {
        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            return $_SERVER['HTTP_CLIENT_IP'];
        } else if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $tmpaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
            $pos = strrpos($tmpaddress, ",");
            if ($pos !== false) {
                $tmpaddress = substr($tmpaddress, 0, $pos);
            }
            return $tmpaddress;
        } else {
            return $_SERVER['REMOTE_ADDR'];
        }
    }
}

function getCustomerChangeLog($customerId, $type)
{
    $db = new spotDB_TradingPlatform();
    $sql = "SELECT * FROM `customers` WHERE id='{$customerId}'";
    $customerData = $db->fetchAll($sql);
    if ($customerData) {
        $sql = "SELECT CONCAT(customers.FirstName,' ', customers.LastName) as customerName, ";
        if ($type == 'verification' || $type == 'regStatus') {
            $sql .= "oldValue as oldValue,
						newValue as newValue, ";
        } else {
            $sql .= "CONCAT(old_user.firstName,' ', old_user.lastName) as oldValue,
					 	CONCAT(new_user.firstName,' ', new_user.lastName) as newValue, ";
        }

        $sql .= "customer_change_log.date as date,
					 customer_change_log.source as source,
					 source_platform.sourcePlatform as sourcePlatform,
					 CONCAT(users.firstName,' ', users.lastName) as user,
					 customer_change_log.userIp as userIp
					 FROM customer_change_log
					 LEFT JOIN customers on customers.id = customer_change_log.customerId
					 LEFT JOIN users AS new_user ON (customer_change_log.newValue = new_user.id)
					 LEFT JOIN users AS old_user ON (customer_change_log.oldValue = old_user.id)
					 LEFT JOIN users on users.id = customer_change_log.user
					 LEFT JOIN source_platform on source_platform.id = customer_change_log.sourcePlatformId

					 WHERE customer_change_log.customerId='{$customerId}' AND customer_change_log.type='{$type}'";
        $customerDataChangeLog = $db->fetchAll($sql);
        return $customerDataChangeLog;

    } else {
        die('{"error":"wrong id "}');
    }
}

function getDateFormatFromRequest($dpStart)
{

    return DateTime::createFromFormat('Y-m-d', $dpStart);

}

function generateLeadStatisticsByAffiliatesToResponse($dpStart, $dpEnd, $affiliate)
{

    $temp = getLeadsByAffiliates($dpStart, $dpEnd, $affiliate);
    $transactions = getTransactionsByAffiliates($dpStart, $dpEnd, $affiliate);

    foreach ($temp as &$aff) {
        $aff['ftd_deposits_pay'] = 0;
        foreach ($transactions as $transaction) {

            if ($aff['aff_id'] == $transaction['aff_id'])
                $aff['ftd_deposits_pay'] = $transaction['ftd_deposits'];
        }
    }
    return $temp;
}

function combinationLeadStatisticsByAffiliatesToResponse($temp, $temp_n, $n)
{

    foreach ($temp as &$aff) {

        foreach ($temp_n as $aff1) {

            if ($aff['aff_id'] == $aff1['aff_id']) {

                $aff['customers_' . $n] = $aff1['customers'];
                $aff['conversion_rate_' . $n] = $aff1['conversion_rate'];
                $aff['ftd_deposits_pay_' . $n] = $aff1['ftd_deposits_pay'];
            }
        }

    }

    return $temp;
}

function addDefaultParametersToArray($temp)
{

    foreach ($temp as &$aff) {
        $aff['customers_1'] = 0;
        $aff['conversion_rate_1'] = 0;
        $aff['ftd_deposits_pay_1'] = 0;
        $aff['customers_2'] = 0;
        $aff['conversion_rate_2'] = 0;
        $aff['ftd_deposits_pay_2'] = 0;
    }
    return $temp;
}

function getVerificationChangeLog($dpStart, $dpEnd)
{
    $db = new spotDB_TradingPlatform();
    $sql = "SELECT customer_change_log.customerId,
			CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
	 		oldValue as oldValue,
			newValue as newValue,
			customer_change_log.date as date,
			customer_change_log.source as source,
			source_platform.sourcePlatform as sourcePlatform,
			CONCAT(users.firstName,' ', users.lastName) as user,
			customer_change_log.userIp as userIp
			FROM customer_change_log
			LEFT JOIN customers on customers.id = customer_change_log.customerId
			LEFT JOIN users AS new_user ON (customer_change_log.newValue = new_user.id)
			LEFT JOIN users AS old_user ON (customer_change_log.oldValue = old_user.id)
			LEFT JOIN users on users.id = customer_change_log.user
			LEFT JOIN source_platform on source_platform.id = customer_change_log.sourcePlatformId
			WHERE customer_change_log.type='verification' AND customer_change_log.date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";

    $verificationDataChange = $db->fetchAll($sql);
    return $verificationDataChange;


}

function getRegistrationChangeLog($dpStart, $dpEnd)
{
    $db = new spotDB_TradingPlatform();
    $sql = "SELECT customer_change_log.customerId,
      CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
      oldValue as oldValue,
      newValue as newValue,
      customer_change_log.date as date,
      customer_change_log.source as source,
      source_platform.sourcePlatform as sourcePlatform,
      CONCAT(users.firstName,' ', users.lastName) as user,
      customer_change_log.userIp as userIp
      FROM customer_change_log
      LEFT JOIN customers on customers.id = customer_change_log.customerId
      LEFT JOIN users AS new_user ON (customer_change_log.newValue = new_user.id)
      LEFT JOIN users AS old_user ON (customer_change_log.oldValue = old_user.id)
      LEFT JOIN users on users.id = customer_change_log.user
      LEFT JOIN source_platform on source_platform.id = customer_change_log.sourcePlatformId
      WHERE customer_change_log.type='regStatus' AND customer_change_log.date BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";

    $registrationDataChange = $db->fetchAll($sql);
    return $registrationDataChange;
}


function insertUserLog($userId, $parameters)
{
    $db = new MySqlDriver();
    $sql = "INSERT INTO `users_log`(`userId`, `dateLog`, `ip`, `interface`, `action`, `params`) VALUES ";
    $date = date('Y-m-d H:i:s');
    $ip = getUserIpAddr();
    $interface = $parameters["uri"];
    if (!isset($parameters["action"])) {
        $action = "access";
    } else {
        $action = $parameters["action"];
        foreach ($parameters as $key => $value) {
            if ($key != "uri" && $key != "action") {
                if ($value != '') {
                    $params .= ($params == '' ? '' : ', ');
                    $params .= $key . ':' . $value;
                }
            }
        }
        $params .= '.';
    }
    $sql .= "('{$userId}', '{$date}', '{$ip}', '{$interface}', '{$action}', '{$params}')";

    $result = $db->fetchAll($sql);
    if ($result) {
        return true;
    }

}


function captcha()
{
    $captcha = $_POST['ct_captcha'];
    require_once dirname(__FILE__) . '/securimage.php';
    $securimage = new Securimage();

    if ($securimage->check($captcha) == true) {
        return true;
    } else {
        return false;

    }
}

function getBigDepositors($dpStart, $dpEnd, $desk, $employee, $sum)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sum = $sum!='' ? $sum : 0;
    $sql = "SELECT  customer_deposits.id,
					IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
					customer_deposits.customerId,
					concat(customers.FirstName,' ',customers.LastName) AS customerName,
					country.name as countryName,
					DATE_FORMAT(MAX(confirmTime), '%Y-%m-%d %h:%i:%s') AS lastDepositDate,
					(SELECT SUM(amountUSD)
					 FROM customer_deposits
					 WHERE customerId=customers.id AND
					       confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'
					       AND customer_deposits.paymentMethod <> 'Bonus'
					       AND customer_deposits.status='approved') AS sumAmountUSD,
					customers.saleStatus,
					CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as employee,
					COALESCE(user_desks.deskId,1) as desk
					FROM customers
					LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
					LEFT JOIN customer_deposits on customer_deposits.customerId = customers.id
					LEFT JOIN country on customers.country = country.id
					LEFT JOIN users on customers.employeeInChargeId = users.id
					LEFT JOIN sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
					WHERE customer_deposits.paymentMethod <> 'Bonus'
					AND customer_deposits.status='approved'
    				AND customer_deposits.confirmTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59' ";


    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }
    $sql .= " GROUP BY customerId";
    if ($desk != 0) {
        $sql .= " HAVING desk = " . $desk;
    }
    if ($desk != 0) {
        $sql .= " AND sumAmountUSD >=" . $sum;
    } else {
        $sql .= " HAVING sumAmountUSD >=" . $sum;
    }
    
   
    $results = $TradingPlatformDB->fetchAll($sql);
    if ($results) {
        return $results;
    } else {
        return false;
    }
}

function isFinduserName($userName)
{
    $db = new MySqlDriver();
    $sql = "SELECT * FROM `users` WHERE username='{$userName}'";
    $result = $db->fetchAll($sql);
    if ($result) {
        return true;
    } else {
        return false;
    }

}

function getSaleStatus($dpStart, $dpEnd, $affiliate, $country, $desk, $employee, $saleStatus, $type)
{

    $db = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id, CONCAT(customers.FirstName,' ',customers.LastName) AS customerName,
             country.name AS countryName,
             customers.saleStatus,
             IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
           customers.currency,
             customer_balance.lastBalance,
                     (case(SELECT count(1) FROM customer_deposits WHERE customer_deposits.customerId=customers.id AND paymentMethod <> 'Bonus')
             when 0 then 'Customer'
             when 1 then 'FTD'
             else 'Depositor'
           end ) AS type,
           COALESCE(user_desks.deskId,1) as desk,
           CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as employee
         FROM
             " . $GLOBALS["site_name"] . "_platform.customers
         LEFT JOIN country ON customers.country = country.id
         LEFT JOIN sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
         LEFT JOIN customer_balance ON (customer_balance.customerId = customers.id)
         LEFT JOIN users on customers.employeeInChargeId = users.id
         LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
              WHERE customers.regTime BETWEEN '" . $dpStart . " 00:00:00' AND '" . $dpEnd . " 23:59:59'";

    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }
    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    if ($country != "0") {
        $sql .= " AND country.name = '$country'";
    }

    if ($saleStatus != "0") {
        $sql .= " AND customers.saleStatus = '$saleStatus'";
    }

    $sql .= " GROUP BY customers.id";

    $already_having = false;

    if ($desk != 0) {
        $sql .= " HAVING desk = " . $desk;
        $already_having = true;
    }

    if ($type != "0") {
        if ($already_having) {
            $sql .= " AND type = '$type'";
        } else {
            $sql .= " HAVING type = '$type'";
        }
    }


    /*
    if ($affiliate == 0) {
            $user_id = $_SESSION['userdata']['id'];
            $affiliate_users_sql = "Select affiliate_affID from affiliate_users where user_id =" . $user_id;
            $affiliate_users = $systemDB->fetchAll($affiliate_users_sql);
    
            if (isset($affiliate_users) && $affiliate_users) {
                $filter = implode("', '", array_column($affiliate_users, 'affiliate_affID'));
                $sql = "select * from ({$sql}) as t1 where t1.aff_id in ('" . $filter . "')";
            }
        }*/
    

    $result = $db->fetchAll($sql);

    if ($result) {
        return $result;
    } else {
        return false;
    }


}

function getCampaigns()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT id , name FROM campaigns";
    $campaigns = $TradingPlatformDB->fetchAll($sql);
    return $campaigns;
}

function getCustomersData($accountType,$campaign,$exclude_campaign,$employee,$countries,$demo,$saleStatus,$regStatus,$regStart,$regEnd,$loginStart,$loginEnd,$onlineStatus){
		
		
	$TradingPlatformDB = new spotDB_TradingPlatform();
	set_time_limit(0);
	
	$sql = "SELECT customers.id AS customerId,
	               CONCAT(customers.firstName,' ',customers.lastName) AS customerName,
	               IF(customers.lastLoginDate>= DATE_SUB(NOW(), INTERVAL 20 MINUTE)
	                  OR customers.lastTimeActive >= DATE_SUB(NOW(), INTERVAL 20 MINUTE),'Online','Offline') AS onlineStatus,
	               users.id AS employeeId,   
		           CONCAT(users.id,' - ',users.firstName,' ',users.lastName) AS employee,
		           customers.regTime,
		           customers.lastLoginDate,
		           country.name AS country,
		           campaigns.name AS campaign,
		           IF((SELECT SUM(amount) FROM customer_deposits
		               WHERE status='approved'
					         AND paymentMethod<>'Bonus'
					         AND customer_deposits.customerId=customers.id) IS NOT NULL,'Depositor',IF(customers.isLead=1,'Lead','Customer')) AS depositorStatus, 
		           customers.saleStatus,
		           customers.regStatus,
		       /*  IFNULL((SELECT MIN(createDate) FROM customer_communications
                     WHERE customer_communications.customerId=customers.id),'0000-00-00 00:00:00') AS firstNote, */
                   IFNULL((SELECT siteCustomers.email FROM hedgestonegroup_site.customers AS siteCustomers
				                  WHERE siteCustomers.spot_id=customers.id
						   GROUP BY siteCustomers.spot_id),customers.email) AS email,   
		           IFNULL((SELECT siteCustomers.phone FROM hedgestonegroup_site.customers AS siteCustomers
				           WHERE siteCustomers.spot_id=customers.id
						   GROUP BY siteCustomers.spot_id),customers.phone) AS phone 
		    FROM customers
		    LEFT JOIN users ON users.id=customers.employeeInChargeId
            LEFT JOIN country ON country.id=customers.country
            LEFT JOIN campaigns ON campaigns.id=customers.campaignId
            WHERE 1=1";
     
     if($campaign)
     	$sql .= " AND campaigns.id IN (".implode(',',$campaign).")";
     
     if($exclude_campaign)
     	$sql .= " AND campaigns.id NOT IN (".implode(',',$exclude_campaign).")";	
     
     if($employee)
        $sql .= " AND users.id IN (".implode(',',$employee).")";
        
     if($countries)
        $sql .= " AND country.name IN ('".implode("','",$countries)."')";       
     
     if($demo!=-1)
        $sql .= " AND customers.isDemo=$demo";
           
     if($saleStatus)
        $sql .= " AND customers.saleStatus IN ('".implode("','",$saleStatus)."')";
         
     if($regStatus)
        $sql .= " AND customers.regStatus IN ('".implode("','",$regStatus)."')";
     
     if($regStart)
        $sql .= $regEnd ? " AND customers.regTime BETWEEN '$regStart 00:00:00' AND '$regEnd 23:59:59'" : " AND customers.regTime>='$regStart 00:00:00'";
     else       
        $sql .= $regEnd ? " AND customers.regTime<='$regEnd 23:59:59'" : "";
         
     if($loginStart)
        $sql .= $loginEnd ? " AND DATE(customers.lastLoginDate) BETWEEN '$loginStart' AND '$loginEnd'" : " AND DATE(customers.lastLoginDate)>='$loginStart'";
     else       
        $sql .= $loginEnd ? " AND DATE(customers.lastLoginDate)<='$loginEnd'" : "";
	
	 if($onlineStatus!='Both')
	    $sql .= " AND IF(customers.lastLoginDate>= DATE_SUB(NOW(), INTERVAL 20 MINUTE)
	                  OR customers.lastTimeActive >= DATE_SUB(NOW(), INTERVAL 20 MINUTE),'Online','Offline')='$onlineStatus'";     
     
     if($accountType!='All')
        $sql .= " AND IF((SELECT SUM(amount) FROM customer_deposits
		               WHERE status='approved'
					         AND paymentMethod<>'Bonus'
					         AND customer_deposits.customerId=customers.id) IS NOT NULL,'Depositor',IF(customers.isLead=1,'Lead','Customer'))='".substr($accountType, 0, -1)."'";  
	 
	 $sql .= " GROUP BY customerId
	           ORDER BY regTime DESC
	           LIMIT 100000";
	             
     $result = $TradingPlatformDB->fetchAll($sql);
     
     if(!$result)
     	return false;
     else
        return $result;       
}

function getCustomerDataTools($regDate, $lastlogin, $accountType, $onlineStatus, $campaign, $desk, $employee, $country, $demo, $saleStatus, $regStatus)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customers.id as Id,
				   customers.email as Email,
			       CONCAT(users.id, ' - ', users.firstName, ' ', users.lastName) as Employee,
			       customers.regTime as signUpDate,
			       customers.lastLoginDate as LastLoginDate,
			       country.name AS countryName,
			       customers.saleStatus as saleStatus,
			       customers.regStatus as regStatus,
			       campaigns.name as campaign,
			       sub_campaigns.param as param,
			       COALESCE(user_desks.deskId,1) as desk,
			       customers.isDemo as demo,
                   customers.isLead as isLead,
                   IF(customers.isLead = 1, 'Lead',(case(SELECT count(1) FROM customer_deposits WHERE customer_deposits.customerId=customers.id AND paymentMethod <> 'Bonus' order by customers.id )
					   when 0 then 'Customer'
					   when 1 then 'Depositor'
					 end ) ) as accountType
			FROM " . $GLOBALS["site_name"] . "_platform.customers
			LEFT JOIN users on users.id =customers.employeeInChargeId
			LEFT JOIN country on country.id = customers.country
			LEFT JOIN campaigns on campaigns.id =customers.campaignId
			LEFT JOIN sub_campaigns on sub_campaigns.id = customers.subCampaignId
			LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
			WHERE customers.regTime BETWEEN '" . $regDate . " 00:00:00' AND NOW()";
    if ($lastlogin != 'yyyy-mm-dd') {
        $sql .= " AND customers.lastLoginDate='$lastlogin 00:00:00'";
    }
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }
    if ($country != "0") {
        $sql .= " AND country.name = '$country'";
    }
    if ($saleStatus != "0") {
        $sql .= " AND customers.saleStatus = '$saleStatus'";
    }
    if ($regStatus != "0") {
        $sql .= " AND customers.regStatus = '$regStatus'";
    }
    if ($campaign != "0") {
        $sql .= " AND campaigns.name = '$campaign'";
    }
    if ($demo == "Yes") {
        $sql .= " AND customers.isDemo = 1";
    }
    if ($demo == "NO") {
        $sql .= " AND customers.isDemo = 0";
    }
    if ($desk != 0) {
        $sql .= " HAVING  desk = " . $desk;
    }
    if ($accountType != 0) {
        if ($desk != 0) {
            $sql .= " AND accountType = " . $accountType;
        } else {
            $sql .= " HAVING  accountType = " . $accountType;
        }
    }
    $sql .= " order by customers.id;";
    //var_dump($sql);
    $result = $TradingPlatformDB->fetchAll($sql);
    if ($result) {
        return $result;
    } else {
        return false;
    }
}


function getTotalPayouts($dpStart, $dpEnd, $desk, $employee, $affiliate)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT customerId,
              payout,
              ROUND(payout*currencies.rateUSD, 2) AS payoutUSD,
              CONCAT(customers.FirstName,' ', customers.LastName) AS customerName,
              IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT NAME FROM campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) AS aff_id,
              customers.currency as currency
          FROM (

              select customerId, SUM(payout) AS payout from (

                SELECT customerId, SUM(payout) AS payout
                  FROM onetouch_positions
                  WHERE STATUS!='canceled'
                  AND DATE BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId
                UNION
                SELECT customerId, SUM(payout) AS payout
                  FROM positions
                  WHERE STATUS!='canceled'
                  AND DATE BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY  customerId
                UNION
                SELECT customerId, SUM(payout) AS payout
                  FROM ldo_positions
                  WHERE STATUS!='canceled'
                  AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                  GROUP BY customerId

                  ) as _all_positions
                group by _all_positions.customerId

              ) AS all_positions
          LEFT JOIN customers ON customerId = customers.id
          LEFT JOIN sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
          LEFT JOIN user_desks ON (customers.employeeInChargeId = user_desks.userId)
          LEFT JOIN currencies ON (customers.currency = currencies.code)
          WHERE customers.isDemo=0
          AND customers.isLead=0 ";
    if (is_numeric($employee) && $employee != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employee;
    }
    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }
    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }

    $sql .= " GROUP BY customerId ";
    $customers = $TradingPlatformDB->fetchAll($sql);
    //var_dump($sql);
    return $customers;
}

function getTotalTurnover($dpStart, $dpEnd, $desk, $employee, $affiliate)
{
    //var_dump($_POST);die;

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $employee = $employee == 0 ? '' : 'AND users.id=' . $employee;

    if ($openaccounts) {
        $openaccounts = "('canceled','open')";
    } else {
        $openaccounts = "('canceled')";
    }

    $sql = "SELECT
                tmp.customerId,
                tmp.amount as amount,
                tmp.bets as bets,
                tmp.amount / tmp.bets as avarage,
                CONCAT(customers.FirstName,
                        ' ',
                        customers.LastName) as customerName,
                customers.saleStatus,
                ifnull(Concat(trim(" . $GLOBALS["site_name"] . "_platform.users.FirstName),
                                ' ',
                                trim(" . $GLOBALS["site_name"] . "_platform.users.LastName)),
                        '') AS employeeName,
                customers.currency as currency,
                COALESCE(user_desks.deskId, 1) AS desk,
                IF(Ifnull((SELECT
                                    Sum(customer_deposits.amount)
                                FROM
                                    customer_deposits
                                WHERE
                                    customer_deposits.paymentmethod <> 'bonus'
                                        AND customer_deposits.status = 'approved'
                                        AND customer_deposits.customerid = tmp.customerid),
                            0) - ifnull((SELECT
                                    sum(withdrawals2.amount)
                                FROM
                                    withdrawals AS withdrawals2
                                WHERE
                                    withdrawals2.paymentmethod <> 'bonus'
                                        AND withdrawals2.status = 'approved'
                                        AND withdrawals2.customerid = tmp.customerid),
                            0) - customer_balance.pnl >= 0,
                    ifnull((SELECT
                                    sum(customer_deposits.amount)
                                FROM
                                    customer_deposits
                                WHERE
                                    customer_deposits.paymentmethod <> 'bonus'
                                        AND customer_deposits.status = 'approved'
                                        AND customer_deposits.customerid = tmp.customerid),
                            0) - ifnull((SELECT
                                    sum(withdrawals2.amount)
                                FROM
                                    withdrawals AS withdrawals2
                                WHERE
                                    withdrawals2.paymentmethod <> 'bonus'
                                        AND withdrawals2.status = 'approved'
                                        AND withdrawals2.customerid = tmp.customerid),
                            0) - customer_balance.pnl,
                    0) AS real_account_balance
            FROM
                customers
                    LEFT JOIN
                user_desks ON customers.employeeInChargeId = user_desks.userId
                    LEFT JOIN
                users ON customers.employeeInChargeId = users.id
                    and users.id is not null
                    right join
                    (
                      select customerId, sum(amount) as amount
                      from (
                        SELECT customerId, SUM(amount) as amount,
                            COUNT(customerId) as bets
                            FROM onetouch_positions
                            WHERE status!='canceled'
                            AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                            GROUP BY customerId
                        UNION ALL
                        SELECT customerId, SUM(amount) as amount,
                            COUNT(customerId) as bets
                            FROM positions
                            WHERE status!='canceled'
                            AND date BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                            GROUP BY customerId
                        UNION ALL
                        SELECT customerId, SUM(investment) as amount,
                            COUNT(customerId) as bets
                            FROM ldo_positions
                            WHERE status!='canceled'
                            AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                            GROUP BY customerId
                        UNION ALL
                        SELECT customerId, SUM(investment) as amount,
                            COUNT(customerId) as bets
                            FROM forex_positions
                            WHERE status!='canceled'
                            AND entryTime BETWEEN '$dpStart 00:00:00' AND '$dpEnd 23:59:59'
                            GROUP BY customerId
                      ) as _tmp
                      group by _tmp.customerId

                    ) tmp ON customers.id = tmp.customerId
                    LEFT JOIN
                customer_balance ON customer_balance.customerid = tmp.customerId
                LEFT JOIN
                sub_campaigns ON (sub_campaigns.id = customers.subCampaignId)
            WHERE
                customers.isDemo = 0
                    AND customers.isLead = 0
                    $employee";


    if (is_numeric($desk) && $desk != 0) {
        $sql .= " AND user_desks.deskId = " . $desk;
    }
    if (is_numeric($affiliate)) {
        if ($affiliate != 0) {
            $affSql = "SELECT * FROM aff_group_members WHERE aff_team=" . $affiliate;
            $aff_ids = $systemDB->fetchAll($affSql);
            $sql = $sql . " and 1=0";
            foreach ($aff_ids as $aff_id) {
                $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $aff_id['aff_id'] . "'";
            }
        }
    } else {
        $sql = $sql . " AND IF((customers.campaignId>=408 AND customers.campaignId<>417) OR customers.campaignId IN (322,323,324), (SELECT name from campaigns WHERE id=customers.campaignId), SUBSTRING_INDEX(sub_campaigns.param,'_',2)) = '" . $affiliate . "'";
    }
    $sql .= " GROUP BY tmp.customerId
      ORDER BY tmp.customerId
      ";


    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;

}

function getNewCCDeposit()
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $sql = "SELECT customer_deposits.customerId,
					CONCAT(customers.FirstName,' ', customers.LastName) as customerName,
					@FullVerificationStatus := CASE
					WHEN c_c_l2.oldValue='None' and c_c_l2.newValue='Full' THEN c_c_l2.date
					WHEN c_c_l2.oldValue='Partial' and c_c_l2.newValue='Full' THEN c_c_l2.date
					END as FullVerificationStatus,
			        requestTime as Newdepositdate
			FROM hedgestonegroup_platform.customer_deposits
			LEFT JOIN customers on customers.id = customer_deposits.customerId
			LEFT JOIN customer_change_log as c_c_l1 ON (customers.id = c_c_l1.customerId and c_c_l1.oldValue='None')
			LEFT JOIN customer_change_log as c_c_l2 ON (customers.id = c_c_l2.customerId and c_c_l2.newValue='Full')
			WHERE requestTime between '2015-11-17 00:00:00' AND '2015-11-17 23:59:59'
			AND customers.verification = 'full'
			AND customer_deposits.paymentmethod <> 'bonus'
			and customer_deposits.customerId=219427
			HAVING Newdepositdate > FullVerificationStatus
			ORDER BY customerId";
    $customers = $TradingPlatformDB->fetchAll($sql);
    return $customers;
}


function getRecentDeposits($fromDate)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $spotId = $_SESSION['userdata']['spotId'];
    $userid = $_SESSION["userid"];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];


    //recent deposits
    $sqlRecentDeposits = "SELECT customer_deposits.id,
      customer_deposits.customerId,
      concat(customers.FirstName,' ',customers.LastName) as customerName,
      customer_deposits.amountUSD as amount,

      customer_deposits.confirmTime depositedOn,
      COALESCE(user_desks.deskId,1) as desk
       FROM " . $GLOBALS["site_name"] . "_platform.customer_deposits

       LEFT JOIN customers on customers.id = customer_deposits.customerId
       LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
       WHERE paymentMethod<>'Bonus'
       AND customer_deposits.confirmTime > CURDATE() - INTERVAL 0 DAY
       AND customer_deposits.status = 'approved'
       AND customers.isDemo=0 ";

    if ($spotId != 0) {
        $sqlRecentDeposits .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sqlRecentDeposits .= "  having desk = '$perDesk' ";
    }
    $sqlRecentDeposits .= " ORDER BY customer_deposits.confirmTime desc";
    $recentDeposits = $TradingPlatformDB->fetchAll($sqlRecentDeposits);

    return $recentDeposits;


}


function getTotalDeposits($fromDate)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $spotId = $_SESSION['userdata']['spotId'];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];

    $sql = "SELECT customer_deposits.id,
      customer_deposits.amountUSD as amount,
      customer_deposits.confirmTime as  depositedOn,
      COALESCE(user_desks.deskId,1) as desk

      FROM " . $GLOBALS["site_name"] . "_platform.customer_deposits
      LEFT JOIN customers on customers.id = customer_deposits.customerId
      LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
      WHERE paymentMethod<>'Bonus'
      AND customer_deposits.status = 'approved'
      AND customers.isDemo=0 ";
    switch ($fromDate) {
        case 'This_Week' :
            $sql .= "AND YEARWEEK(customer_deposits.confirmTime)=YEARWEEK(NOW()) ";
            break;
        case 'Last_Week' :
            $sql .= "AND YEARWEEK(customer_deposits.confirmTime)=YEARWEEK(NOW())-1 ";
            break;
        case 'This_Month' :
            $sql .= "AND MONTH(customer_deposits.confirmTime) = MONTH(CURDATE()) AND YEAR(customer_deposits.confirmTime) = YEAR(CURDATE()) ";
            break;
        case 'Last_Month' :
            $sql .= "AND MONTH(customer_deposits.confirmTime) = MONTH(CURDATE())-1 AND YEAR(customer_deposits.confirmTime) = YEAR(CURDATE()) ";
            break;


        default :
            break;
    }
    if ($spotId != 0) {
        $sql .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sql .= "  having desk = '$perDesk' ";
    }
    $sql .= " ORDER BY customer_deposits.confirmTime ";
    $deposits = $TradingPlatformDB->fetchAll($sql);
    return $deposits;
}

function getTotalLeads($fromDate)
{

    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $spotId = $_SESSION['userdata']['spotId'];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];
    $sql = "SELECT count(*) as totalLeads,

			      (SELECT count(*)
			      FROM " . $GLOBALS["site_name"] . "_platform.customers
			      LEFT JOIN customer_deposits on customers.id = customer_deposits.customerId
			      LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
			      WHERE (LastName<>'demo' OR LastName<>'Demo') and regTime > CURDATE() - INTERVAL 0 DAY
		          AND customer_deposits.status = 'approved'
			      AND customers.isDemo=0 ";

    if ($spotId != 0) {
        $sql .= "AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sql .= "  and COALESCE(user_desks.deskId,1)= '$perDesk' ";
    }
    $sql .= " ) as todayLeads

	      FROM " . $GLOBALS["site_name"] . "_platform.customers
	      LEFT JOIN customer_deposits on customers.id = customer_deposits.customerId
	      LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
	      WHERE (LastName<>'demo' or LastName<>'Demo')
		  AND customer_deposits.status = 'approved'
	      AND customers.isDemo=0 ";


    switch ($fromDate) {
        case 'This_Week' :
            $sql .= "AND YEARWEEK(regTime)=YEARWEEK(NOW())";
            break;
        case 'Last_Week' :
            $sql .= "AND YEARWEEK(regTime)=YEARWEEK(NOW())-1";
            break;
        case 'This_Month' :
            $sql .= "AND MONTH(regTime) = MONTH(CURDATE()) AND YEAR(regTime) = YEAR(CURDATE())";
            break;
        case 'Last_Month' :
            $sql .= "AND MONTH(regTime) = MONTH(CURDATE())-1 AND YEAR(regTime) = YEAR(CURDATE())";
            break;

        default :
            break;

        default :
            break;
    }
    if ($spotId != 0) {
        $sql .= "AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sql .= "  and COALESCE(user_desks.deskId,1)= '$perDesk' ";
    }
    $sql .= " ORDER BY customers.id ";
    $totalLeads = $TradingPlatformDB->fetchAll($sql);
    return $totalLeads;
}

function getLeadsAndDeposits($date)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $spotId = $_SESSION['userdata']['spotId'];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];
    $NumDayOfMonth = cal_days_in_month(CAL_GREGORIAN, date('m') - 1, date('y'));
    $sqlTotalLeads = "SELECT extract(day from regTime) as theDay, count(*) as countCustomers
                  FROM hedgestonegroup_platform.customers
                  LEFT JOIN customer_deposits on customers.id = customer_deposits.customerId
                  LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                  WHERE (LastName<>'demo' OR LastName<>'Demo')
                  AND customer_deposits.status = 'approved'
      			  AND customers.isDemo=0 ";
    if ($date == "week") {
        $sqlTotalLeads .= " AND regTime >= CURDATE()-1 - INTERVAL  6 DAY
					      AND regTime  < CURDATE()-1 + INTERVAL  1 DAY ";
    } else {
        $sqlTotalLeads .= " AND regTime > DATE_SUB(NOW(), INTERVAL '{$NumDayOfMonth}' DAY)  ";
    }
    if ($spotId != 0) {
        $sqlTotalLeads .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sqlTotalLeads .= " AND COALESCE(user_desks.deskId,1)= '$perDesk' ";
    }
    $sqlTotalLeads .= " GROUP BY extract(day from regTime)
	 						ORDER BY confirmTime";

    $sqlTotalDeposits = "SELECT extract(day from confirmTime) as theDay,
								ROUND(sum(customer_deposits.amountUSD)/1000,3) as amount
						FROM customer_deposits
                LEFT JOIN customers on customers.id = customer_deposits.customerId
                LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                WHERE paymentMethod<>'Bonus'
                AND customer_deposits.status = 'approved'
      			AND customers.isDemo=0 ";
    if ($date == "week") {
        $sqlTotalDeposits .= " AND confirmTime >= CURDATE()-1 - INTERVAL  6 DAY
						   AND confirmTime  < CURDATE()-1 + INTERVAL  1 DAY ";
    } else {
        $sqlTotalDeposits .= " AND confirmTime > DATE_SUB(NOW(), INTERVAL '{$NumDayOfMonth}' DAY)  ";
    }
    if ($spotId != 0) {
        $sqlTotalDeposits .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sqlTotalDeposits .= " AND COALESCE(user_desks.deskId,1)= '$perDesk' ";
    }
    $sqlTotalDeposits .= " GROUP BY extract(day from confirmTime)
	  						ORDER BY confirmTime ";

    $leads = $TradingPlatformDB->fetchAll($sqlTotalLeads);
    $deposits = $TradingPlatformDB->fetchAll($sqlTotalDeposits);


    return array("leads" => $leads, "deposits" => $deposits);

}


function getDepositByCountry($date)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $spotId = $_SESSION['userdata']['spotId'];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];
    $NumDayOfMonth = cal_days_in_month(CAL_GREGORIAN, date('m') - 1, date('y'));
    $sqlAllDepositors = "select count(*) as allDepositors

			            FROM customer_deposits
			            LEFT JOIN customers on customer_deposits.customerId=customers.id
			            LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
			            where paymentMethod <> 'Bonus'
			            AND customer_deposits.status = 'approved'
			      		AND customers.isDemo=0 ";

    if ($spotId != 0) {
        $sqlAllDepositors .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sqlAllDepositors .= "  and COALESCE(user_desks.deskId,1) = '$perDesk' ";
    }
    if ($date == "week") {
        $sqlAllDepositors .= " and DATE(customer_deposits.confirmTime) >=  (CURDATE() - INTERVAL 7 DAY)";
    } else {
        $sqlAllDepositors .= " and DATE(customer_deposits.confirmTime) >=  (CURDATE() - INTERVAL '{$NumDayOfMonth}' DAY)";
    }
    $allDepositors = $TradingPlatformDB->fetchAll($sqlAllDepositors);
    $allDepositors = $allDepositors[0]["allDepositors"];
    if (!$allDepositors) {
        return false;
    }
    $sqlDepositorsByCountries = "(select country.id,
                country.name as name,
                count(*) as countDepositors
                FROM customer_deposits
                LEFT JOIN customers on customers.id = customer_deposits.customerId
                LEFT JOIN country on customers.Country = country.id
                LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
                where paymentMethod <> 'Bonus'
                AND customer_deposits.status = 'approved'
      			AND customers.isDemo=0 ";

    if ($date == "week") {
        $sqlDepositorsByCountries .= " and DATE(customer_deposits.confirmTime) >=  (CURDATE() - INTERVAL 7 DAY)";
    } else {
        $sqlDepositorsByCountries .= " and DATE(customer_deposits.confirmTime) >=  (CURDATE() - INTERVAL '{$NumDayOfMonth}' DAY)";
    }
    if ($spotId != 0) {
        $sqlDepositorsByCountries .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sqlDepositorsByCountries .= "  and COALESCE(user_desks.deskId,1) = '$perDesk' ";
    }
    $sqlDepositorsByCountries .= " group by country.id) ";
    $depositorsByCountries = $TradingPlatformDB->fetchAll($sqlDepositorsByCountries);
    foreach ($depositorsByCountries as $key => $value) {
        $depositors[$key] = $depositorsByCountries[$key]["countDepositors"] / $allDepositors * 100;
        $depositorsByCountries[$key]["countDepositors"] = $depositorsByCountries[$key]["countDepositors"] / $allDepositors * 100;
    }

    $fiveCountries = array();
    rsort($depositors);
    if (count($depositors) > 5) {
        $largest = array_slice($depositors, 0, 5);
    } else {
        $largest = $depositors;
    }

    foreach ($depositorsByCountries as $key => $value) {
        for ($i = 0; $i < count($largest); $i++) {
            if ($depositorsByCountries[$key]["countDepositors"] == $largest[$i]) {
                array_push($fiveCountries, array(
                    "nameCountry" => $depositorsByCountries[$key]["name"],
                    "countDepositors" => $depositorsByCountries[$key]["countDepositors"],
                ));
            }
        };
    }
    return $fiveCountries;

}

function getHourlyDepositsStatistics($startDate, $endDete, $onlyFTD)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();
    $connection = new MySqlDriver();
    $userid = $_SESSION["userid"];
    $spotId = $_SESSION['userdata']['spotId'];
    $perDeskUser = "SELECT per_desk  FROM `users` WHERE id='{$userid}'";
    $perDesk = $connection->fetchAll($perDeskUser);
    $perDesk = $perDesk[0]["per_desk"];
    $sql = "SELECT extract(hour from confirmTime) as theHour,
	     count(customer_deposits.id) as deposits,
	     ROUND(sum(amountUSD)/1000,3) as amount
		 FROM customer_deposits
		 LEFT JOIN customers ON customer_deposits.customerId=customers.id
		 LEFT JOIN user_desks on customers.employeeInChargeId = user_desks.userId AND user_desks.deskId
		 WHERE paymentMethod<>'Bonus'
		 AND customer_deposits.status = 'approved'
		 AND customers.isDemo=0 ";

    if ($onlyFTD == true) {
        $sql .= " AND (SELECT count(1) FROM customer_deposits WHERE customer_deposits.customerId=customers.id) = 1 ";
    }
    if ($startDate == 'day') {
        $sql .= " AND customer_deposits.confirmTime >= DATE_SUB(curdate(), INTERVAL 1 day) and customer_deposits.confirmTime < curdate()";
    } else if ($startDate == 'week') {
        $sql .= " AND YEARWEEK(confirmTime)= YEARWEEK(NOW())-1";
    } else if ($startDate == 'month') {
        $sql .= " AND MONTH(confirmTime) = MONTH(CURDATE())-1 AND YEAR(confirmTime) = YEAR(CURDATE())";
    } else {
        $sql .= " AND customer_deposits.confirmTime BETWEEN '$startDate 00:00:00' AND '$endDete 23:59:59'";
    }


    if ($spotId != 0) {
        $sql .= " AND customers.employeeInChargeId = '$spotId' ";
    } else if ($perDesk > 0) {
        $sql .= "  AND COALESCE(user_desks.deskId,1) = '$perDesk' ";
    }
    $sql .= " group by extract(hour from confirmTime)";

    $deposit = $TradingPlatformDB->fetchAll($sql);
    return $deposit;
}

function getCustomer3DDeposit($customerId)
{	
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
	        customers.id as user_id,

	        customers.FirstName as First_Name ,
	        customers.LastName as Last_Name,
	        customers.currency as Currency,
	        customers.phone as Phone_Number,
	        customers.postCode as Postal_Code,
	        customers.City as City,
	        customers.Street as Street,
	        country.iso as Country_iso,
	        customers.Country as Country,
	        customers.State as State,
	        customers.email as Email
	      FROM customers
		  	LEFT JOIN country
				ON customers.Country = country.id
	      WHERE customers.id = '{$customerId}'";

    $results = $spotDB->fetchAll($sql);
	
    $_SESSION['GlobaCountryIso'] =  $results[0]['Country_iso'];
    return $results;

}


function getCustomerEmailById($customerId)
{
    $newSiteDb = new spotDB_TradingPlatform();
    $sql = "SELECT customers.email
        FROM customers
        WHERE customers.id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);
    return $results;

}

function getCustomerPhoneById($customerId)
{
    $newSiteDb = new spotDB_TradingPlatform();
    $sql = "SELECT customers.Phone
        FROM customers
        WHERE customers.id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);
    return $results;

}

function getCustomerMobileById($customerId)
{
    $newSiteDb = new spotDB_TradingPlatform();
    $sql = "SELECT customers.cellphone
        FROM customers
        WHERE customers.id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);
    return $results;

}

function getLocalCustomerByEmail($customerEmail)
{

    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
       WHERE customers.email = '{$customerEmail}'";

    $results = $newSiteDb->fetchAll($sql);
    if (isset($results[0]['spot_email'])) {
        $customerEmail = $results[0]['spot_email'];
    }
    return $customerEmail;

}

function getLocalCustomerEmailById($customerId)
{
    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
        WHERE customers.spot_id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);
    if (isset($results[0]['email'])) {
        return $results[0]['email'];
    }
    return false;

}

function getLocalCustomerDataBySpotEmail($results_spot)
{
    $email = $results_spot[0]['Email'];

    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
         WHERE customers.spot_email = '{$email}'";

    $results = $newSiteDb->fetchAll($sql);

    if (isset($results[0]['email'])) {
        $results_spot[0]['SpotEmail'] = $results_spot[0]['Email'];
        $results_spot[0]['SpotPhoneNumber'] = $results_spot[0]['Phone_Number'];
        $results_spot[0]['Email'] = $results[0]['email'];
        $results_spot[0]['Phone_Number'] = $results[0]['phone'];

    }
    return $results_spot;
}

function getLocalCustomerDataBySpotId($results_spot)
{
    $id = $results_spot[0]['id'];

    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
	        FROM customers
	        WHERE customers.spot_id = '{$id}'";

    $results = $newSiteDb->fetchAll($sql);


    if (isset($results[0]['email'])) {
        $results_spot[0]["Communication_Email"] = $results[0]['communication_email'];
        $results_spot[0]['SpotEmail'] = $results_spot[0]['Email'];
        $results_spot[0]['SpotPhoneNumber'] = $results_spot[0]['Phone_Number'];
        $results_spot[0]['SpotMobile'] = $results_spot[0]['Mobile'];
        $results_spot[0]['Email'] = $results[0]['email'];
        $results_spot[0]['Phone_Number'] = $results[0]['phone'];
        $results_spot[0]['Mobile'] = $results[0]['mobile'];
    }

    return $results_spot;
}

function getLocalCustomerPhoneById($customerId)
{
    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
        WHERE customers.spot_id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);

    if (isset($results[0]['phone'])) {
        return $results[0]['phone'];
    }
    return false;

}

function getLocalCustomerMobileById($customerId)
{
    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
        WHERE customers.spot_id = '{$customerId}'";

    $results = $newSiteDb->fetchAll($sql);
    if (isset($results[0]['mobile'])) {
        return $results[0]['mobile'];
    }
    return false;

}

function verificationLocalCustomerBySpotId($id)
{
    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
         WHERE customers.spot_id = '{$id}'";

    $results = $newSiteDb->fetchAll($sql);
    if (isset($results[0]['email'])) {
        return true;
    }
    return false;
}

function getLocalCustomerBySpotEmail($email)
{
    $newSiteDb = new NEW_SITEDB();
    $sql = "SELECT *
        FROM customers
         WHERE customers.spot_email = '{$email}'";

    $results = $newSiteDb->fetchAll($sql);
    if (isset($results[0]['email'])) {
        $email = $results[0]['email'];
    }
    return $email;
}

function updateDepositVinciLog($depositId, $status, $message, $requestId)
{
	$newSiteDb = new NEW_SITEDB();
		
    $sql = "UPDATE lavarate_customer_deposit_log SET vinciResultStatus='$status', vinciResultMessage='$message', vinciResultrequestId='$requestId' 
    		WHERE depositId='$depositId'";
	
    $result = $newSiteDb->execID($sql);
	
	die('{"success":"success"}');
}

function updateVinciCustomerBalance($amount, $tpLeverateId, $depositId)
{
	error_reporting(E_ALL);
	ini_set('display_errors', 1);

    $leverateApi = new Leverate('tradingPlatformAccountId', $tpLeverateId);
	return $leverateApi->UpdateAccountBalance($amount, $tpLeverateId, $depositId);
}

function GetBalanceLeverate($lavarateId, $accountLeverateId)
{
	//error_reporting(E_ALL);
	//ini_set('display_errors', 1);

    $leverateApi = new Leverate('tradingPlatformAccountName', $lavarateId);
	$balanceData = $leverateApi->GetBalanceLeverate($lavarateId, $accountLeverateId);
	
	$newSiteDb = new NEW_SITEDB();
	$sql = "SELECT count(id) as approveDeposit FROM lavarate_customer_deposit_log WHERE status='APPROVED' AND lavarateId='{$lavarateId}'";
	$result = $newSiteDb->fetchAll($sql);
	
	$balanceData->approveDeposit = $result[0]['approveDeposit'];
	//echo "result";
	//echo "<pre>";
	//var_dump($result);
	
	return $balanceData;
}

function addVinciCustomerCommunication($spotId, $lavarateId, $accountLeverateId, $subject, $content)
{
	if ($_SESSION['userdata']['spotId'] == 0)
    {
        $employeeId = $_SESSION['userdata']['real_spotId'];
    }else{
        $employeeId = $_SESSION['userdata']['spotId'];
    }
	
	$newSiteDb = new NEW_SITEDB();

    $sql = "INSERT INTO lavarate_customer_communication (subject, content, spotId, employeeId, lavarateId) VALUES ('$subject', '$content', $spotId, $employeeId,'$lavarateId')";
	
    $result = $newSiteDb->execID($sql);

    $leverateApi = new Leverate('accountId', $accountLeverateId);
	$leverateApi->createCase($subject, $content, $accountLeverateId);
	
	die('{"success":"2","message":"New communication was created"}');
}

function addCustomerCall($data)
{
    $api = new SpotOption();

    if ($_SESSION['userdata']['spotId'] == 0)
    {
        $spotPlatform = new spotDB_TradingPlatform();
        $sql = "SELECT id FROM users WHERE users.email = '{$_SESSION['userdata']["email"]}'";
        $user_results = $spotPlatform->fetchAll($sql);

        $employeeId = $user_results[0]['id'];
    }else{
        $employeeId = $_SESSION['userdata']['spotId'];
    }

    $id = $data["id"];
    $subject = $data["subject"];
    $content = $data["content"];
    $salestatus = $data["salestatus"];

    $fields = array(
        "subject" => $subject,
        "content" => $content,
        "employeeId" => $employeeId
    );

    $result = $api->addCallById($id, $fields);

    if ($result["success"]) {
        $userfields = array(
            "saleStatus" => (string)$salestatus
        );

        $resultedit = $api->editUserById($id, $userfields);
        //die('{"success":"2","message":"'.$resultedit.'"}');

        die('{"success":"2","message":"add call"}');
    }

    die('{"error":"' . $result['error'][0] . '"}');
}

function addNewCommunicationForCustomer($customerId,$type,$direction,$category,$status,$subject,$body,$saleStatus,$oldSaleStatus,$callStatus){
    $TradingPlatformDB = new spotDB_TradingPlatform();
	
	$spotId = $_SESSION['userdata']['spotId']!=0 ? $_SESSION['userdata']['spotId'] : $_SESSION['userdata']['real_spotId'];
	$spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Customer',
                                                          'COMMAND' => 'edit',
                                                          'customerId' => $customerId,
                                                          'saleStatus' => $saleStatus
                                                    ));
											
	if (!strstr($spotCallBack, '<operation_status>successful</operation_status>'))
	  return false;
	
	$spotCallBack = $TradingPlatformDB->spotAPIExec(array('MODULE' => 'Communications',
                                                          'COMMAND' => 'add',
                                                          'customerId' => $customerId,
                                                          'typeId' => $type,
                                                          'directionId' => $direction,
                                                          'categoryId' => $category,
                                                          'statusId' => $status,
                                                          'subject' => $subject,
                                                          'body' => $body,
                                                          'creatorId' => $spotId
                                                    ));
	if (!strstr($spotCallBack, '<operation_status>successful</operation_status>'))
            return false;   
/*	if($callStatus)
	   optimalQ_communicationPush($customerId,$saleStatus,$oldSaleStatus,$callStatus); */
    return true;				
}

function optimalQ_communicationPush($customerId,$saleStatus,$oldSaleStatus,$callStatus){
	$spotDB = new spotDB_TradingPlatform();
	$MainCoon = new MySqlDriver();
	$redis = new Predis\Client();

	$sql = "SELECT customers.id,
		           customers.currency,
		           country.name AS country,
		           country.iso AS countryISO,
		           campaigns.name AS campaign,
		           customers.regTime,
		           DATEDIFF(NOW(),customers.regTime) AS daysFromReg,
		           customers.lastLoginDate,
		           IF(customers.lastLoginDate<>'0000-00-00 00:00:00',TIMESTAMPDIFF(HOUR,customers.lastLoginDate,NOW()),-1) AS hoursFromLastLogin,
		           IF(customers.lastLoginDate>= DATE_SUB(NOW(), INTERVAL 20 MINUTE) 
		              OR customers.lastTimeActive >= DATE_SUB(NOW(), INTERVAL 20 MINUTE),true,false) AS online,
		           users.username AS employeeUserName   
		    FROM customers
		    LEFT JOIN country ON country.id=customers.country
		    LEFT JOIN users ON users.id=customers.employeeInChargeId
		    LEFT JOIN campaigns ON campaigns.id=customers.campaignId
		    WHERE customers.id='$customerId'";
			
	$result = $spotDB->fetchAll($sql);
	
	$customer = $result[0];
	$optimalQ_employees = $redis->get('optimalQ_employees');
	$optimalQ_employees = json_decode($optimalQ_employees);
	if(!in_array($customer["employeeUserName"],$optimalQ_employees))
		return;
	
	$sql = "SELECT id,
	               callTime, 
	               availabilityStatus, 
	               score,
	               phone,
	               calledPhone,
	               optimalQ_error
	        FROM call_log 
	        WHERE customerId=$customerId
	        ORDER BY callTime DESC
	        LIMIT 1";
	$result = $MainCoon->fetchAll($sql);
	if(!isset($result[0]))
	   return;
	
	$call = $result[0];
	
	if($customer['online']){
		$call['availabilityStatus']='externalRecommendation';
		$call['score']=null;
	}
	
	$sql = "SELECT COUNT(id) AS previousCommunicationCount FROM optimalQ_report WHERE externalId=$customerId";
	$result = $MainCoon->fetchAll($sql);
	
	$previousCommunicationCount = $result[0]['previousCommunicationCount'];
	
	$comment = array('daysFromReg' => $customer['daysFromReg'],
	                 'hoursFromLastLogin' => $customer['hoursFromLastLogin']!=-1 ? $customer['hoursFromLastLogin'] : 'unknown',
	                 'error' => $call['optimalQ_error']!='' ? $call['optimalQ_error'] : null
	                 );
	$comment = json_encode($comment);                         
	$optimalQ_post = array('externalId' => $customerId,
	                       'phoneNumber' => $call['calledPhone'],
	                       'availability' => $call['availabilityStatus'],
	                       'score' => $call['score'],
	                       'type' => 'user',
	                       'duration' => 0,
	                       'result' => $callStatus,
	                       'previousCommunicationsCount' => $previousCommunicationCount,
	                       'newSalesStatus' => $saleStatus,
	                       'previousSalesStatus' => $oldSaleStatus,
	                       'campaign' => $customer['campaign'],
	                       'country' => $customer['country'],
	                       'countryISO' => $customer['countryISO'],
	                       'currency' => $customer['currency'],
	                       'online' => $customer['online']==1 ? true : false,
	                       'comment' => $comment,
	                       'requestedAction' => 'none' 
	                      );
	$optimalQ_post = json_encode($optimalQ_post);
	$url =  "https://api.porky.optimalq.net/apollo/v1/organizations/{$GLOBALS["site_name"]}/users/{$customer["employeeUserName"]}/call_reports";
	$http_header = array('Content-Type:application/json','X-API-KEY:Njc3NzgxMTkxZGIwNTdhMmZmYmM3ZD');
	$options = array( CURLOPT_HTTPHEADER     => $http_header,
                               CURLOPT_SSL_VERIFYPEER => false,
                               CURLOPT_SSL_VERIFYHOST => false, 
                               CURLOPT_RETURNTRANSFER => true,
                               CURLOPT_POST           => true,
                               CURLOPT_POSTFIELDS     => $optimalQ_post
                             );
    $curl = curl_init($url);
    curl_setopt_array($curl, $options);
    $data = json_decode(curl_exec($curl));
	$errors = curl_error($curl);
    $response = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
	
	if($errors!=null){
		$optimalQ_error = 'error '.$errors;
	}else if($response!=200){
		$optimalQ_error = 'response '.$response;
	}else{
		$optimalQ_error = '';
	}		 					  
	$sql = "INSERT INTO optimalQ_report (externalId,call_log_id,type,result,requestedAction,duration,newSaleStatus,previousSaleStatus,online,hoursFromLastLogin,optimalQ_error) VALUES 
	        ($customerId,{$call['id']},'user','$callStatus','none',0,'$saleStatus','$oldSaleStatus',{$customer['online']},{$customer['hoursFromLastLogin']},'$optimalQ_error')";
			
	$MainCoon->exec($sql);			
}

function getCommunicationParameters(){
	$TradingPlatformDB = new spotDB_TradingPlatform();
	
	$sql = "SELECT id, value FROM customer_communications_types";
	$types = $TradingPlatformDB->fetchAll($sql);
	
	$sql = "SELECT id, value FROM customer_communications_directions";
	$directions = $TradingPlatformDB->fetchAll($sql);
	
	$sql = "SELECT id, value FROM customer_communications_categories";
	$categories = $TradingPlatformDB->fetchAll($sql);
	
	$sql = "SELECT id, value FROM customer_communications_statuses";
	$statuses = $TradingPlatformDB->fetchAll($sql);
	
	return array("types" => $types, "directions" => $directions, "categories" => $categories, "statuses" => $statuses);  
	
}
function verificationEmailCustomer($data)
{
    $result = getCustomerIDByEmail($data['value']);
    if ($result[0]['id'] && $result[0]['id'] != $data['id']) {

        die('{"success":"2","message":"Email exist"}');

    } else {
        editEmailCustomer($data);

    }
}

function editEmailCustomer($data)
{
    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerEmailById($data['id']);
        echo json_encode(updateLocalEmail($data));
    } else {
        $result = getCustomerEmailById($data['id']);

        //  die('{"success":"2","message":"' . $result[0]['email'] . '"}');
        $data['oldValue'] = $result[0]['email'];

        echo json_encode(updateSpotEmail($data));
    }
}

function updateLocalEmail($customer)
{
    $newSiteDb = new NEW_SITEDB();

    $id = $customer["id"];
    $email = $customer["value"];

    $sql = "UPDATE `customers` SET `email`='{$email}'  WHERE `spot_id` = '{$id}'";

    $update_User = $newSiteDb->exec($sql);

    if ($update_User == 1) {

        insertLogForEditData($customer);

        die('{"success":"' . $update_User . '","email":"' . $email . '"}');
    }

    die('{"error":"' . $update_User . '"}');

}


function updateCommunicationEmailCustomer($data)
{

    $email = $data['value'];
    $id = $data['id'];
    $db = new NEW_SITEDB();
    $sql = "SELECT communication_email FROM customers where spot_id = '{$id}' ";
    $result = $db->fetchAll($sql);
    if ($result[0]) {
        if ($result[0]['communication_email'] == $email) {
            die('{"success":"2","message":"Email exist"}');
        } else {
            $updateEmailSql = "UPDATE customers SET communication_email='{$email}' WHERE spot_id = '{$id}' ";
            $updateEmail = $db->exec($updateEmailSql);
            if ($updateEmail == 1) {
                insertLogForEditData($data);
                die('{"success":"' . $updateEmail . '","email":"' . $email . '"}');
            }

            die('{"success":"2","message":"Error"}');
        }
    }
}


function insertLogForEditData($data)
{
    $data = array(
        'id' => $data["id"],
        'value' => $data["value"],
        'oldValue' => $data["oldValue"],
        'action' => 'button',
        'uri' => $_SERVER['HTTP_REFERER'] . '' . $_SERVER['REQUEST_URI'],
    );
    insertUserLog($_SESSION['userid'], $data);
}

function updateLocalPhone($user)
{
    $newSiteDb = new NEW_SITEDB();

    $id = $user["id"];
    $phone = $user["value"];

    $sql = "UPDATE `customers` SET `phone`='{$phone}' WHERE `spot_id` = '{$id}'";

    $update_User = $newSiteDb->exec($sql);
    if ($update_User == 1) {
        insertLogForEditData($user);
        die('{"success":"' . $update_User . '","phone":"' . $phone . '"}');
    }

    die('{"success":"2","message":"Error"}');

}

function updateLocalMobile($user)
{
    $newSiteDb = new NEW_SITEDB();

    $id = $user["id"];
    $mobile = $user["value"];

    $sql = "UPDATE `customers` SET `mobile`='{$mobile}' WHERE `spot_id` = '{$id}'";

    $update_User = $newSiteDb->exec($sql);
    if ($update_User == 1) {
        insertLogForEditData($user);
        die('{"success":"' . $update_User . '","mobile":"' . $mobile . '"}');
    }

    die('{"success":"2","message":"Error"}');

}

function updateSpotEmail($customer)
{

    $id = $customer["id"];
    $email = $customer["value"];

    $api = new SpotOption();

    $fields = array(
        "email" => $email
    );
    $result = $api->editUserById($id, $fields);
    // die('{"success":"' . 2 . '","email":"' .  $email . '"}');
    $update_User = 1;
    if ($result["success"]) {
        insertLogForEditData($customer);

        die('{"success":"' . $update_User . '","email":"' . $email . '"}');
    }

    die('{"error":"' . $update_User . '"}');
}

function editMobileCustomer($data)
{

    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerMobileById($data['id']);
        echo json_encode(updateLocalMobile($data));
    } else {
        $result = getCustomerMobileById($data['id']);

        $data['oldValue'] = $result[0]['cellphone'];

        $result = updateSpotMobile($data);

        if($result === false) {
            echo json_encode('{"success":"1","mobile":"' . $data['value'] . '"}');
        } else {
            echo('{"error":"1"}');
        }
        die;
    }
}

function editPhoneCustomer($data)
{

    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerPhoneById($data['id']);

        echo json_encode(updateLocalPhone($data));
    } else {
        $result = getCustomerPhoneById($data['id']);

        $data['oldValue'] = $result[0]['Phone'];

        $result = updateSpotPhone($data);
        if($result === true) {
            echo json_encode('{"success":"1","phone":"' . $data['value'] . '"}');
        } else {
            echo json_encode('{"error":"1"}');
        }
        die;
    }
}

function updateSpotPhone($customer)
{

    $id = $customer["id"];
    $phone = $customer["value"];

    $api = new SpotOption();

    $fields = array(
        "Phone" => $phone
    );
    $result = $api->editUserById($id, $fields);

    if ($result["success"]) {
        insertLogForEditData($customer);
        return true;
    }

    return false;
}

function updateSpotMobile($customer)
{

    $id = $customer["id"];
    $mobile = $customer["value"];

    $api = new SpotOption();

    $fields = array(
        "cellphone" => $mobile
    );
    $result = $api->editUserById($id, $fields);

    if ($result["success"]) {
        insertLogForEditData($customer);
        return true;
    }
    return false;
}

function editSpotPhoneCustomer($data)
{
    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerPhoneById($data['id']);
        $newSiteDb = new NEW_SITEDB();

        $id = $data["id"];
        $phone = $data["value"];

        $sql = "UPDATE `customers` SET `spot_phone`='{$phone}'  WHERE `spot_id` = '{$id}'";

        $update_User = $newSiteDb->exec($sql);
        $api = new SpotOption();

        $fields = array(
            "Phone" => $phone
        );
        $result = $api->editUserById($id, $fields);

        if ($result["success"] && $update_User == 1) {
            insertLogForEditData($data);
            die('{"success":"' . $update_User . '","phone":"' . $phone . '"}');
        }

        die('{"error":"' . $update_User . '"}');


        //  die('{"success":"2","message":"Error"}');

    }

}

function editSpotMobileCustomer($data)
{
    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerMobileById($data['id']);
        $newSiteDb = new NEW_SITEDB();

        $id = $data["id"];
        $mobile = $data["value"];

        $sql = "UPDATE `customers` SET `spot_mobile`='{$mobile}'  WHERE `spot_id` = '{$id}'";

        $update_User = $newSiteDb->exec($sql);
        $api = new SpotOption();

        $fields = array(
            "cellphone" => $mobile
        );
        $result = $api->editUserById($id, $fields);

        if ($result["success"] && $update_User == 1) {
            insertLogForEditData($data);
            die('{"success":"' . $update_User . '","mobile":"' . $mobile . '"}');
        }

        die('{"error":"' . $update_User . '"}');

    }

}

function editSpotEmailCustomer($data)
{
    if (verificationLocalCustomerBySpotId($data['id'])) {

        $data['oldValue'] = getLocalCustomerEmailById($data['id']);
        $newSiteDb = new NEW_SITEDB();

        $id = $data["id"];
        $email = $data["value"];

        $sql = "UPDATE `customers` SET `spot_email`='{$email}'  WHERE `spot_id` = '{$id}'";

        $update_User = $newSiteDb->exec($sql);

        $api = new SpotOption();

        $fields = array(
            "email" => $email
        );
        $result = $api->editUserById($id, $fields);


        if ($result["success"] && $update_User == 1) {

            insertLogForEditData($data);

            die('{"success":"' . $update_User . '","email":"' . $email . '"}');
        }
        die('{"error":"' . $update_User . '"}');

    }

}

function getCCDeposit($customerId)
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT
	        customers.id as user_id,
	        customers.FirstName as First_Name ,
	        customers.LastName as Last_Name,
	        customers.currency as Currency,
	        customers.phone as Phone_Number,
	        customers.postCode as Postal_Code,
	        customers.City as City,
	        customers.Street as Street,
	        country.iso as Country_iso,
	        country.name as country_name,
	        customers.Country as Country,
	        customers.State as State,
	        customers.email as Email
	      FROM customers
		  	LEFT JOIN country
				ON customers.Country = country.id
	      WHERE customers.id = '{$customerId}'";

    $results = $spotDB->fetchAll($sql);
    $results[0]['currency_symbol'] = getCurrencySymbol($results[0]['Currency']);
    return $results;

}

function getProcessorForCCDeposit($currency)
{

//    $sql = "SELECT *
//					 FROM " . $GLOBALS["site_name"] . "_site.currencies
//					 LEFT JOIN " . $GLOBALS["site_name"] . "_site.cc_processors
//					 ON currencies.cc_processor = cc_processors.processor
//					 WHERE currency = '$currency'";
//
//    $stmt = $this->dbh->prepare($sql);
//    if ($stmt->execute()) {
//        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
//        return $result;
//    }
//
//    return false;
    $SITEDb = new SITEDB();
    $sql = "SELECT *
					 FROM currencies
					 LEFT JOIN cc_processors
					 ON currencies.cc_processor = cc_processors.processor
					 WHERE currency = '{$currency}'";
    $results = $SITEDb->fetchAll($sql);

    foreach ($results as $result) {
        $returnArray[] = $result['cc_processor'];
    }
    return $returnArray;

}

function depositNewCC($userId)
{
    // $api = new SpotOptionHelper();
    // $api = new SpotOption();
    // die('{"success":"true","message":"teeee"}');
    $cc_processor = getProcessorForCCDeposit($_POST['currency']);
    //  die('{"success":"true","msgbox":"' . $cc_processor[0] . '"}');
    $first_attempt = true;
    $_POST['ip_address'] = getUserIpAddr();

//    if (!$api->isValidDepositAmount($userId, $_POST['depositAmount']))
//        return array("error" => lang("api_min_deposit_amount"));

//    if ($_POST['cc_number'] === '4111111111111111') {
//        //TODO: Check this :)
//        $sarr = explode('_', $_SESSION['campaign_sub']);
//        if (count($sarr) == 4) {
//            switch ($sarr[0]) {
//                case "HO":
//                    switch ($sarr[2]) {
//                        case '8': //Player goal for FTD offer
//                            $return = @file_get_contents('http://hop.clkbo.com/aff_lsr?offer_id=' . $sarr[2] . '&transaction_id=' . $sarr[3]);
//                            break;
//                        case '10': //Player goal for REV offer
//                            $return = @file_get_contents('http://hop.clkbo.com/aff_goal?a=lsr&goal_id=23&transaction_id=' . $sarr[3]);
//                            break;
//                        case '6': //Player goal for CPL offer
//                            $return = @file_get_contents('http://hop.clkbo.com/aff_goal?a=lsr&goal_id=27&transaction_id=' . $sarr[3]);
//                            break;
//                        case '2': //deposits amount goal for internal offer
//                            $return = @file_get_contents('http://hop.clkbo.com/aff_goal?a=lsr&goal_id=4&transaction_id=' . $sarr[3] . '&amount=' . $deposit['amountUSD']);
//                            $return = @file_get_contents('http://hop.clkbo.com/aff_goal?a=lsr&goal_id=25&transaction_id=' . $sarr[3]);
//                            break;
//                    }
//                    break;
//            }
//        }
//
//        giveUserBonus($userId, $_POST['depositAmount'], $_POST['promo'], false);
//
//        $fields = array(
//            "navigate" => "?success"
//        );
//
//    } else {

    switch ($cc_processor[0]['cc_processor']) {
        case 'fibonatix':
            $fields = fibonatixNewDepositCC($_POST, $userId, $first_attempt = true);
            // $fields = spotoptionNewDepositCC($_POST, $userId, $first_attempt = true);
            break;

        default:
            // $fields = fibonatixNewDepositCC($_POST, $userId, $first_attempt = true);
            $fields = spotoptionNewDepositCC($_POST, $userId, $first_attempt = true);
            break;
    }


    // }

    return $fields;

}

function fibonatixNewDepositCC($post, $userId, $first_attempt = false)
{
    require_once "inc/FibonatixHelper.php";
    require_once "inc/logs/deposit_log.php";

    switch ($post['country_iso']) {
        case 'CA':
            $post['state'] = "AB";
            break;
        case 'US':
            $post['state'] = "DC";
            break;
        case 'AU':
            $post['state'] = "SA";
            break;

        default:
            $post['state'] = "NA";
            break;
    }

    $api = new fibonatixHelper($post, $_SESSION);
    $depositLog = new DepositLog();

    $success = false;

    //set variables for log entry
    $currency_log = (isset($_SESSION['user_currency']) ? $_SESSION['user_currency'] : $_POST['currency']);
    $first_attempt_log = ($first_attempt == true ? 1 : 0);
    $credit_card_digits = substr($post['cc_number'], -5);


    $resultDeposit = $api->addDepositWithNewCreditcard(); //deposit with new credit card
    $resultDeposit = preg_replace('/[\r\n]+/', '', $resultDeposit); //remove new line characters
    parse_str($resultDeposit, $resultDepositArr); //parse response

    //check if mandatory parameters are exists without errors
    if (isset($resultDepositArr['merchant-order-id']) &&
        isset($resultDepositArr['paynet-order-id']) &&
        isset($resultDepositArr['serial-number']) &&
        !isset($resultDepositArr['error-code']) &&
        !isset($resultDepositArr['error-message'])
    ) {

        //deposit log
        $depositLog->createEntry(
            $userId,
            'fibonatix',
            $currency_log,
            $first_attempt_log,
            $post['depositAmount'],
            $credit_card_digits,
            $post['expire_year'],
            $post['expire_month'],
            $post['country'],
            $post['city'],
            $resultDeposit,
            'deposit',
            'in progress'
        );

        //let Fibonatix few seconds to proccess before moving on
        sleep(5);

        //check transaction status
        $success = fibonatixCheckStatus($api, $depositLog, $post, $userId, $resultDepositArr['merchant-order-id'], $resultDepositArr['paynet-order-id'], $resultDepositArr['serial-number'], $currency_log, $first_attempt_log, $credit_card_digits);

        //let Fibonatix few more seconds to proccess if still under processing
        if ($success == "processing") {
            for ($i = 3; $i < 0; $i++) {

                sleep(10);

                //check transaction status
                $success = fibonatixCheckStatus($api, $depositLog, $post, $userId, $resultDepositArr['merchant-order-id'], $resultDepositArr['paynet-order-id'], $resultDepositArr['serial-number'], $currency_log, $first_attempt_log, $credit_card_digits);

                if ($success == "approved") {
                    // break;
                }

            }

            //if status still processing even after sleeping, turn into lazy
            if ($success == "processing") {
                $success == "lazy";
            }
        }

    } else {
        if (isset($resultDepositArr['error-message']) && $resultDepositArr['error-message'] != '') {

            //deposit log
            $depositLog->createEntry(
                $userId,
                'fibonatix',
                $currency_log,
                $first_attempt_log,
                $post['depositAmount'],
                $credit_card_digits,
                $post['expire_year'],
                $post['expire_month'],
                $post['country'],
                $post['city'],
                $resultDeposit,
                'deposit',
                'fail',
                $resultDepositArr['error-message']
            );
        }
    }


    //return response with the right message
    if ($success == "approved") {
        return array("success" => true, "msgbox" => "Deposit approved in Fibonatix !

        											dont forget to update spot crm for user " . $post["email"]);
    } elseif ($success == "lazy" || $success == "processing") {
        return array("success" => true, "message" => "Please contact your account manager to approve your deposit!", "msgbox" => "Processing");
    } else {
        //if its the first time
        if ($first_attempt == true) {

            //try to deposit with spotoption
            $first_attempt = false;
            $fields = spotoptionNewDepositCC($post, $userId, $first_attempt);
            return $fields;

        }
        return array("error" => "We’re sorry - your card was declined. Please check the details provided and try again.");
    }


}

function fibonatixCheckStatus($api, $depositLog, $post, $userId, $merchant_order_id, $paynet_order_id, $serial_number, $currency_log, $first_attempt_log, $credit_card_digits)
{

    $status = false;

    //check order by deposit response
    $resultOrderCheck = $api->checkOrderStatus($merchant_order_id, $paynet_order_id, $serial_number);
    $resultOrderCheck = preg_replace('/[\r\n]+/', '', $resultOrderCheck);
    parse_str($resultOrderCheck, $resultOrderCheckArr);

    //check if transaction 'approved'
    if (isset($resultOrderCheckArr['status']) && $resultOrderCheckArr['status'] == "approved") {

        //deposit log
        $depositLog->createEntry(
            $userId,
            'fibonatix',
            $currency_log,
            $first_attempt_log,
            $post['depositAmount'],
            $credit_card_digits,
            $post['expire_year'],
            $post['expire_month'],
            $post['country'],
            $post['city'],
            $resultOrderCheck,
            'status',
            'approved'
        );

        $_POST['amount'] = $post['depositAmount'];
        $_POST['currency'] = (isset($_SESSION['user_currency']) ? $_SESSION['user_currency'] : $_POST['currency']);
        $_POST['transactionId'] = $resultOrderCheckArr['merchant-order-id'];
        $_POST['reason'] = 'fibonatix transaction';
        $_POST['codeStatus'] = 0;
        $_POST['msg'] = 'fibonatix transaction';
        $_POST['timeStamp'] = time();
        // depositCreditCardTerminal($userId , "success", "fibonatix");
        $status = "approved";
        //$_SESSION['user_firstTimeDeposit'] = false;
    } elseif (isset($resultOrderCheckArr['status']) && $resultOrderCheckArr['status'] == "processing") {

        //deposit log
        $depositLog->createEntry(
            $userId,
            'fibonatix',
            $currency_log,
            $first_attempt_log,
            $post['depositAmount'],
            $credit_card_digits,
            $post['expire_year'],
            $post['expire_month'],
            $post['country'],
            $post['city'],
            $resultOrderCheck,
            'status',
            'processing'
        );

        $status = "processing";
    } else {

        if (isset($resultOrderCheckArr['error-message']) && $resultOrderCheckArr['error-message']) {
            //deposit log
            $depositLog->createEntry(
                $userId,
                'fibonatix',
                $currency_log,
                $first_attempt_log,
                $post['depositAmount'],
                $credit_card_digits,
                $post['expire_year'],
                $post['expire_month'],
                $post['country'],
                $post['city'],
                $resultOrderCheck,
                'status',
                'declined',
                $resultOrderCheckArr['error-message']
            );
        }

    }

    return $status;

}

function getCurrencySymbol($currency)
{
    $currency_symbol = '';

    switch ($currency) {
        case "JPY":
            $currency_symbol = "&yen;";
            break;
        case "CNY":
            $currency_symbol = '&yen;';
            break;
        case "BRL":
            $currency_symbol = 'R$';
            break;

        case "GBP":
            $currency_symbol = "&pound;";
            break;
        case "EUR":
            $currency_symbol = "&euro;";
            break;
        case "USD":
            $currency_symbol = "$";
            break;
    }
    return $currency_symbol;
}

function spotoptionNewDepositCC($post, $userId, $first_attempt = false)
{
    require_once "inc/logs/deposit_log.php";

    $api = new SpotOption();

    $result = getCustomerPhoneById($userId);
    $args = array(
        "deposit-amount" => $post['depositAmount'],
        "firstname" => $post['firstname'],
        "lastname" => $post['lastname'],
        "creditcard" => $post['cc_number'],
        "expirationdate" => $post['expire_month'],
        "year" => $post['expire_year'],
        "your-address" => $post['street'],
        "your-city" => $post['city'],
        "country" => $post['country'],
        "securitycode" => $post['cvv'],
        "cardtype" => 1,
        "Phone" => $result[0]['Phone'],
        "IPAddress" => $post['ip_address']
    );

    $result = $api->addDepositWithNewCreditcard($args, $userId);
    //  die('{"success":"true","message":"' . json_encode($result). '"}');
    $currency_log = (isset($_SESSION['user_currency']) ? $_SESSION['user_currency'] : $_POST['currency']);
    $first_attempt_log = ($first_attempt == true ? 1 : 0);
    $credit_card_digits = substr($post['cc_number'], -5);

    //deposit log
    $depositLog = new DepositLog();
    if (isset($result['success']) && $result['success'] == true) {
        $depositLog->createEntry(
            $userId,
            'spotoption',
            $currency_log,
            $first_attempt_log,
            $post['depositAmount'],
            $credit_card_digits,
            $post['expire_year'],
            $post['expire_month'],
            $post['country'],
            $post['city'],
            json_encode($result),
            'deposit',
            'approved'
        );
        $result['msgbox'] = "Deposit approved !";
    } else {
        $depositLog->createEntry(
            $userId,
            'spotoption',
            $currency_log,
            $first_attempt_log,
            $post['depositAmount'],
            $credit_card_digits,
            $post['expire_year'],
            $post['expire_month'],
            $post['country'],
            $post['city'],
            json_encode($result),
            'deposit',
            'declined'
        );
        //   $result['msgbox']="Deposit declined";
    }


    if (isset($result['error']) && $first_attempt == true) {
        $message = "error:" . $result['error'] . " user : " . $userId . " was declined in spotoption switching to fibonatix";
        error_log($message);
        $first_attempt = false;
        // $fields = fibonatixNewDepositCC($post , $userId, $first_attempt);
        $result = fibonatixNewDepositCC($post, $userId, $first_attempt);
    } elseif (isset($result['error'])) {
        $message = "user : " . $userId . "We're sorry - your card was declined. Please check the details provided and try again";
        error_log($message);
        //We're sorry - your card was declined. Please check the details provided and try again.
        //Credit Card Already Exists
        return array("error" => "We're sorry - your card was declined. Please check the details provided and try again.");
    } else {
        $message = "user : " . $userId . " successfuly deposited in spotoption ";
        error_log($message);
        $_SESSION['user_firstTimeDeposit'] = false;

    }
    /// die('{"success":"true","message":"'.json_encode($result).'"}');
    return $result;

}

function depositCreditCardTerminal($userId, $status, $description = false)
{
    $api = new SpotOption();

    $args = array(
        "amount" => $_POST['amount'],
        "currency" => (isset($_SESSION['user_currency']) ? $_SESSION['user_currency'] : $_POST['currency']),
        "transactionId" => $_POST['transactionId'],
        "reason" => $_POST['reason'],
        "codeStatus" => $_POST['codeStatus'],
        "timeStamp" => $_POST['timeStamp'],
        "msg" => $_POST['msg'],
        "promo" => (isset($_POST['promo']) ? $_POST['promo'] : false)
    );
    if ($status == "success") {
        $result = $api->depositTerminal($userId, $args, $description);
        if ($result['success']) {
            giveUserBonus($userId, $args['amount'], $args['promo'], false);
        }
        //TODO : LOG
    } else {
        //TODO : LOG
    }

    return $result;
}


function getonlineCustomers()
{
    $client = new Predis\Client();
    $onlineUsers = json_decode($client->get('onlineUsers'));
    $result = array_filter($onlineUsers, 'isCustomerOwner');
    return (!isset($result)) ? '[]' : json_encode($result);
}

function isCustomerOwner($onlineUser)
{
    if ($onlineUser->employeeInChargeId == $_SESSION['userdata']['spotId']) {
        return true;
    } else {
        return false;
    }
}

function getDesk()
{
    $spotDB = new spotDB_TradingPlatform();
    $sql = "SELECT id, name FROM " . $GLOBALS["site_name"] . "_platform.desks where status in (1,5) and name not in ('LONDON2', 'QA')";
    $result = $spotDB->fetchAll($sql);
    return $result;
}

function getVinciDesk(){
	$vinciDB = new leverateDB_Connection();
	
	$sql = "SELECT BusinessUnitId AS id , 
	               Name
	        FROM dbo.BusinessUnitBase
	        WHERE IsDisabled=0";
			
	return $vinciDB->fetchAll($sql,array('id')); 		
}

function file_get_contents_curl($url) {

    $ch = curl_init();

    curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);

    $data = curl_exec($ch);
    var_dump($data);
    die();
    curl_close($ch);

    return $data;
}

function getAllDocuments()
{
	
    $salt = '123TradeSalt';


    $arrContextOptions = array(
        "ssl" => array(
            "verify_peer" => false,
            "verify_peer_name" => false,
        )
    );

    $result = json_decode(file_get_contents("https://nc.onetwotrade.com/ott?cmd=getAllUsersFiles", false, stream_context_create($arrContextOptions)));
    $docs = array();
    $doc = array();


    if ($result->success) {
        foreach ($result->files as $file) {
            if (strpos('temp' . $file->desc, 'File ') == FALSE) {
                $doc['time'] = $file->time;
                $doc['user'] = $file->user;
                $doc['file'] = $file->file;
                $doc['desc'] = $file->desc;
                $doc['verif'] = $file->verif;
                $doc['v'] = $file->desc;
                $doc['token'] = md5($file->user . $salt);

                array_push($docs, $doc);
            }
        }
    }
    return $docs;
}


function customerDocuments($customer_id)
{
	$customer_id = trim($customer_id);
    $salt = '123TradeSalt';
	$token = md5($customer_id.$salt);

    $arrContextOptions = array(
        "ssl" => array(
            "verify_peer" => false,
            "verify_peer_name" => false,
        )
     );
	$result['id'] = $customer_id;
	$result['token'] = $token;
	$result['customer'] = json_decode(file_get_contents("https://nc.onetwotrade.com/ott?cmd=getUserFiles&userid=".$customer_id."&token=".$token, false, stream_context_create($arrContextOptions)));
    
    return $result;
}

function getCustomerToCAll($dpStart, $dpEnd, $employeeId)
{
    $TradingPlatformDB = new spotDB_TradingPlatform();

    $sql = "SELECT customers.id as id, CONCAT(customers.FirstName, ' ', customers.LastName) as customerName, customers.firstDepositDate, CONCAT(users.FirstName,' ', users.LastName) AS employee,
            country.name as country,
            (SELECT sum(customer_deposits.amountUSD) FROM customer_deposits WHERE customer_deposits.customerId = customers.id AND customer_deposits.status='approved' AND customer_deposits.paymentMethod!='bonus') AS amountUSD,
            customers.currency,
            customers.lastLoginDate,
            customers.Phone as PhoneNumber,
            customers.cellphone as MobileNumber
          FROM customers
          LEFT JOIN users ON customers.employeeInChargeId = users.id
          LEFT JOIN country ON country.id = customers.Country
          WHERE customers.regTime BETWEEN '{$dpStart} 00:00:00' AND '{$dpEnd} 23:59:59'
          AND customers.isDemo=0 ";

    if (is_numeric($employeeId) && $employeeId != 0) {
        $sql .= " AND customers.employeeInChargeId=" . $employeeId;
    }

    $sql .= " GROUP BY customers.id";
//var_dump($sql);

    $results = $TradingPlatformDB->fetchAll($sql);
    $final_results = array();
    $i = 0;

    foreach ($results as $value) {
        if (getLocalCustomerPhoneById($value["id"]))
        {
            $results[$i]["PhoneNumber"] = getLocalCustomerPhoneById($value["id"]);
        }
        if (getLocalCustomerMobileById($value["id"]))
        {
            $results[$i]["MobileNumber"] = getLocalCustomerMobileById($value["id"]);
        }

        $i++;
    }

    return $results;
}

function insertNewCall($agentID, $customerID)
{
    $MainCoonDB = new MySqlDriver();

    $sql = "INSERT INTO autodialer_Records (agentID, customerID, uploadStatusID, updatedBy, updatedTime) VALUES ($agentID, $customerID, 1, 'by process', NOW())";
    $result = $MainCoonDB->execID($sql);
    return $result;
}

function updateCallInUploadAutoDialer($accountNumber, $status, $rowID, $errorMsg)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "UPDATE autodialer_Records SET accountNumber='$accountNumber', uploadStatusID=$status, sendTime=NOW(), errorMsg='$errorMsg', updatedBy='by process', updatedTime=NOW() WHERE id=$rowID";
    //var_dump($sql);
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function updateCallInDialAutoDialer($accountNumber, $callTime, $dialStatus)
{
    $MainCoonDB = new MySqlDriver();
    $sql = "UPDATE autodialer_Records SET dailStatusID=$dialStatus, callTime='$callTime', updatedBy='by process', updatedTime=NOW() WHERE accountNumber='$accountNumber'";
    //var_dump($sql);
    $result = $MainCoonDB->exec($sql);
    return $result;
}

function insertCallsToBynet($bynetDataCalls)
{
    $dataToBynet = "[";
    foreach ($bynetDataCalls as $key => $value){
        $dataToBynet .= json_encode($value);
        $dataToBynet .= ",";
    }
    $dataToBynet = substr($dataToBynet, 0, -1);
    $dataToBynet .= "]";

    $URL = "http://31.168.4.178:5005/dialer/insert";
    $ch = curl_init($URL);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json'));
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $dataToBynet);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($ch);
    curl_close($ch);

    die('{"success":"2","message":' . $result . '}');
}

function getCallsStatusFromBynet($campaignId, $agentName, $fromDate, $toDate)
{

//, "agentName" => $agentName
    $getStatusParams = array("campaignId" => $campaignId, "fromDate" => $fromDate, "toDate" => $toDate, "returnFields" => 'B, C');

//var_dump($getStatusParams);
    $URL = "http://31.168.4.178:5005/dialer/getStatus";
    $ch = curl_init($URL);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json'));
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($getStatusParams));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($ch);
    curl_close($ch);

    die('{"success":"2","message":' . $result . '}');
}

function clickToCall($phone, $agentId, $customerId)
{
    $dialParams = array("agentId" => $agentId, "phoneNumber" => $phone . "#");

    $URL = "http://31.168.4.178:5005/cm/dial";
    $ch = curl_init($URL);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json'));
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($dialParams));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = curl_exec($ch);
    curl_close($ch);
    
//	die('{"success":"2","message":' . $result . '}');
    
/*	$optimalQ_result = $result!='Extension not found in real time data.' ?
	                   optimalQ_log($phone, $customerId, $result) :
					   'No Data Sent Due to ByNet Api.'; */
	$optimalQ_result = 	optimalQ_log($phone, $customerId, $result);			   
    die('{"success":"2","message":' . $result . ',"optimalQ message":'.$optimalQ_result.'}');  
}

function optimalQ_log($calledPhone, $customerId, $bynetResponse){
		
	$spotDB = new spotDB_TradingPlatform();
	$mainCoon = new MySqlDriver();
	
	$redis = new Predis\Client();
	
	$spotId = $_SESSION['userdata']['spotId']!=0 ? $_SESSION['userdata']['spotId'] : $_SESSION['userdata']['real_spotId'];
	$sql = "SELECT users.username FROM users
	        LEFT JOIN customers ON customers.employeeInChargeId=users.id 
	        WHERE customers.id=$customerId";
	$username_arr = $spotDB->fetchAll($sql);
	$username = $username_arr[0]['username'];
	
/*	$file_name = 'cron/optimalQ/optimalQ_employees.json';
	$file = fopen($file_name,'r');
	$optimalQ_employees = fread($file,filesize($file_name));
	$optimalQ_employees = json_decode($optimalQ_employees);
	fclose($file); */
	$optimalQ_employees = $redis->get('optimalQ_employees');
	$optimalQ_employees = json_decode($optimalQ_employees);
	if(!in_array($username,$optimalQ_employees)){
		return 'User does not exist';
	};
	
    $url =  "https://api.porky.optimalq.net/apollo/v1/organizations/{$GLOBALS["site_name"]}/users/$username/leads/active";
	$http_header = array('Content-Type:application/json','X-API-KEY:Njc3NzgxMTkxZGIwNTdhMmZmYmM3ZD');
	$post = json_encode(array($customerId));
	$options = array( CURLOPT_HTTPHEADER     => $http_header,
                               CURLOPT_SSL_VERIFYPEER => false,
                               CURLOPT_SSL_VERIFYHOST => false, 
                               CURLOPT_RETURNTRANSFER => true,
                               CURLOPT_POST           => true,
                               CURLOPT_POSTFIELDS     => $post
                             );
    $curl = curl_init($url);
    curl_setopt_array($curl, $options);
    $data = json_decode(curl_exec($curl));
	$errors = curl_error($curl);
    $response = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
    
	$optimalQ_error = '';
	$score = null;
	$availability = 'none';
	$phone = ''; 
	
    if($errors!=null){
		$optimalQ_error = 'error '.$errors;
	}else if($response!=200){
		$optimalQ_error = 'response '.$response;
	}else{	 
    $data = $data->response->leads[0];
	$score = $data->score; 
	$availability = $data->availability;
	$phone = $data->phoneNumber;
	}
	
	$calledPhone = preg_replace("/[^0-9]/", "", $calledPhone);
    $calledPhone = ltrim($calledPhone,'0');
    $calledPhone = $calledPhone!='' ? '+'.$calledPhone : $calledPhone;
	
	$sql = "INSERT INTO {$GLOBALS["system"]}.call_log (customerId,availabilityStatus,score,optimalQ_error,bynetResponse,caller,phone,calledPhone) VALUES ($customerId,'$availability',";
	$sql .= is_null($score) ? "null" : $score;
	$sql .=",'$optimalQ_error','$bynetResponse',$spotId,'$phone','$calledPhone')";
	
	$result = $mainCoon->exec($sql);
	return 'call log '.($optimalQ_error!='' ? $optimalQ_error: $result);

}

function getDepartmentCustomersOnline($department)
{
    $DBPlatform = new DB_TradingPlatform();
    $sql = "SELECT
                  " . $GLOBALS["site_name"] ."_platform.customers.id,
                  " . $GLOBALS["site_name"] ."_platform.customers.FirstName,
                  " . $GLOBALS["site_name"] ."_platform.customers.LastName,
                  " . $GLOBALS["site_name"] ."_platform.country.name AS country,
                  IF(" . $GLOBALS["site_name"] ."_site.customers.spot_email = " . $GLOBALS["site_name"] ."_platform.customers.email COLLATE utf8_unicode_ci,
                      " . $GLOBALS["site_name"] ."_site.customers.email,
                      " . $GLOBALS["site_name"] ."_platform.customers.email) AS Email,
                  " . $GLOBALS["site_name"] ."_platform.campaigns.name AS Campaigns,
                  " . $GLOBALS["site_name"] ."_platform.sub_campaigns.param AS subCampaign,
                  " . $GLOBALS["site_name"] ."_platform.customers.saleStatus,
                  " . $GLOBALS["site_name"] ."_platform.customers.regTime,
                  CONCAT(users.firstName, ' ', users.lastName) AS employee";
    if ($department == "retention") {
        $sql .= " , desks.name AS deskName ";
    }
    $sql .= " FROM
                  customers
                      LEFT JOIN
                  " . $GLOBALS["site_name"] ."_site.customers ON " . $GLOBALS["site_name"] ."_platform.customers.id = " . $GLOBALS["site_name"] ."_site.customers.spot_id
                      LEFT JOIN
                  country ON (customers.Country = country.id)
                      LEFT JOIN
                  campaigns ON (customers.campaignId = campaigns.id)
                      LEFT JOIN
                  sub_campaigns ON (customers.subCampaignId = sub_campaigns.id)
                      LEFT JOIN
                  users ON (customers.employeeInChargeId = users.id) ";
    if ($department == "retention") {
        $sql .= " LEFT JOIN
                  user_desks ON (users.id = user_desks.userId)
                      LEFT JOIN
                  desks ON (user_desks.deskId = desks.id) ";
    }
    $sql .= " WHERE
              (lastLoginDate >= DATE_SUB(NOW(), INTERVAL 15 MINUTE)
                  OR lastTimeActive >= DATE_SUB(NOW(), INTERVAL 15 MINUTE))
                  AND isDemo = 0 ";
    if ($department == "retention") {
        $sql .= " AND firstDepositDate > '0000-00-00 00:00:00' ";
    } else {
        $sql .= " AND firstDepositDate = 0 ";
    }
    if ($_SESSION['userdata']['spotId'] > 0) {
        $sql .= " AND " . $GLOBALS["site_name"] ."_platform.customers.employeeInChargeId=" . $_SESSION['userdata']['spotId'];
    }
    $result_report = $DBPlatform->fetchAll($sql);

    return $result_report;

}


function assignCampaignDesk($cid, $did, $tpid, $countries) {

    $uid = $_SESSION['userdata']['id'];
    $siteDB = new MySqlDriver();
    $DB = new SITEDB();

    $countries = (empty($countries) || is_null($countries)) ? '0' : $countries;
    $forex_countries = [];
    $binary_countries = [];
    $binary_countries_string = $forex_countries_string = 'NULL';

    if($countries !== '0') {
        $arr = explode(',', $countries);

        foreach($arr as $v) {
            if(strstr($v, 'binary')) {
               $binary_countries[] = str_replace('binary_', '', $v);
            }
            if(strstr($v, 'forex')) {
                $forex_countries[] = str_replace('forex_', '', $v);
            }
        }

        if(in_array('0', $binary_countries)) {
            $binary_countries_string = '0';
        } else {
            if(!empty($binary_countries)) {
                $binary_countries_string = "'" . implode(',', $binary_countries) . "'";
            }
        }

        if(in_array('0', $forex_countries)) {
            $forex_countries_string = '0';
        } else {
            if (!empty($forex_countries) && sizeof($forex_countries) > 0) {
                $forex_countries_string = "'" . implode(',', $forex_countries) . "'";
            }
        }

    } else {
        switch($tpid) {
            case '1':
                $binary_countries_string = $countries;
                break;
            case '2':
                $forex_countries_string = $countries;
                break;
            case '3':
                $binary_countries_string = $countries;
                $forex_countries_string = $countries;
                break;
        }
    }

    if(empty($did)) {
        // delete row with the campaign
        $res_assign = $siteDB->fetchAll("SELECT * FROM `campaigns_by_desks` WHERE `id_campaign` = {$cid}");
        $aid = $res_assign[0]['id'];
        $sql_del1 = "DELETE FROM `MainCoon`.`campaigns_by_desks` WHERE `id_campaign` = {$cid}";
        $sql_del2 = "DELETE FROM `hedgestonegroup_site`.`campaign_settings` WHERE `campaign_id` = {$cid}";
        if($siteDB->exec($sql_del1) && $DB->exec($sql_del2)) {
            $data =  ['date_assign' => ''];
        }
    } else {
        // insert or update connection campaign to desk
        $sql_ins = "INSERT INTO `campaigns_by_desks` (`id_campaign`, `id_desk`, `id_user`) VALUES ({$cid}, {$did}, {$uid}) 
            ON DUPLICATE KEY UPDATE `id_desk` = {$did}, `id_user` = {$uid}";
        $aid = $siteDB->execID($sql_ins);

        $sql_ins = "INSERT INTO `campaign_settings` (`campaign_id`, `binary_country_id`, `forex_country_id`, `platform_id`) 
            VALUES ({$cid}, {$binary_countries_string}, {$forex_countries_string}, {$tpid})
            ON DUPLICATE KEY UPDATE `binary_country_id` = {$binary_countries_string}, `forex_country_id` = {$forex_countries_string}, `platform_id` = {$tpid}";
        $bid = $DB->execID($sql_ins);

        $data = $siteDB->fetchAll("SELECT * FROM `V_campaigns_by_desks` WHERE `id_campaign` = {$cid} AND `id_desk` = {$did}")[0];
    }

    if($aid && $bid) {
        // if everything is fine - write to log
        $siteDB->exec("INSERT INTO `campaigns_by_desks_log` (`id_assign`, `id_user`, `id_desk`) VALUES ({$aid}, {$uid}, {$did})");
    }

    return $data;
}

function addDepositVinciLog($depositData)
{
	if ($_SESSION['userdata']['spotId'] == 0)
    {
		$employeeId = $_SESSION['userdata']['real_spotId'];
    }else{
        $employeeId = $_SESSION['userdata']['spotId'];
    }


    //$employeeId = '3076';

    $time=time();

    $depositId = $depositData['spotId'].$depositData['lavarateId'].$time;
    
    $newSiteDb = new NEW_SITEDB();
	
	$spotId = $depositData['spotId'];
	$lavarateId = $depositData['lavarateId'];
	$depositAmount = $depositData['amount'];
	$requestData = serialize($depositData);
	
    $sql = "INSERT INTO lavarate_customer_deposit_log (spotId, lavarateId, depositId, amount, employeeId, requestData) VALUES ('$spotId', '$lavarateId', $depositId, $depositAmount, $employeeId, '$requestData')";
	
    $result = $newSiteDb->execID($sql);
    
    $arrayName = array('success' => true, 'depositId' => $depositId);
    return $arrayName;
}

function switchCustomerToBinary($leverateId) {

    if($_SESSION['userdata']['per_platform_switch'] == '0') {
        return ['error' => 'No access'];
    }

    if(isset($leverateId) && !empty($leverateId)) {
        $db = new SITEDB();
        $sql = "UPDATE `lavarate_customers` SET `swichedToBinary` = '1' WHERE `tradingPlatformAccountName` = {$leverateId}";
        if($db->exec($sql)) {
            return true;
        } else {
            return ['error' => 'Query failed'];
        }
    } else {
        return ['error' => 'No required parameters'];
    }
}

function editLocalSpotPlatform($id, $platform)
{
    $db = new SITEDBi();

    $platform = $db->escape($platform);
    $id = $db->escape($id);

    if(isset($id) && !empty($id)) {
        $sql = "UPDATE `customers` SET `spot_platform` = '{$platform}' WHERE `spot_id` = '{$id}'";
        if($db->exec($sql)) {
            $data['id'] = $platform;
            $data['name'] = ($platform == '1') ? 'Binary' : 'Forex';
            return $data;
        } else {
            return ['error' => 'Query failed'];
        }
    } else {
        return ['error' => 'No required parameters'];
    }
}

function getSpotPaymentPage($params) {
    $fields = $params['params'];
    if(!empty($fields['customer_email']) && !empty($fields['currency'])) {
        $fields['amount'] = number_format($fields['amount'], 2, '.', '');
        $fields["merchant_reference"] = "CRM";
        $fields['min_amount'] = 120;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_POST, count($fields));
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($fields));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_URL, config::$spotPayment['endpoint']);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/x-www-form-urlencoded',
            'Authorization: Bearer ' . config::$spotPayment['api_key'],
        ));
        $result = json_decode(curl_exec($ch));
        curl_close($ch);

        if($result->code == '000') {
            return $result;
        } else {
            if(isset($result->failures) && !empty(isset($result->failures))) {
                $failures = [];
                foreach($result->failures as $e) {
                    $failures[] = $e[0];
                }
                return ['error' => implode('. ', $failures)];
            } else {
                return ['error' => 'Some error happened'];
            }
        }
    } else {
        return ['error' => 'No required parameters'];
    }
}

function changeMinDepositByCampaign($f) {
    $cId = $f['campaign_id'];
    $min = $f['min_deposit'];
    $db = new SITEDB();
    
    if($min < 1) {
        return ['error' => 'Amount is too small'];
    }

    $sql = "SELECT campaign_id FROM campaign_settings WHERE campaign_id = {$cId}";
    $campaign = $db->fetchAll($sql);
    if(empty($campaign)) {
        $sql = "INSERT INTO campaign_settings (campaign_id, min_deposit) VALUES ({$cId}, {$min})";
    } else {
        $sql = "UPDATE campaign_settings SET min_deposit = {$min} WHERE campaign_id = {$cId}";
    }

    if($db->exec($sql)) {
        return ['success' => true];
    }

    return ['error' => 'Data was not stored'];
}

function dropMinDepositByCampaign($cId) {
    if(!preg_match('/^(\d){1,}$/', $cId))
        return ['error' => 'Wrong Campaign ID'];

    $db = new SITEDB();
    $sql = "UPDATE campaign_settings SET min_deposit = NULL WHERE campaign_id = {$cId}";

    if($db->exec($sql)) {
        return ['success' => true];
    }

    return ['error' => 'Minimum Deposit not deleted'];
}

function getRiskStatus(){
	$MainCoonDB = new MySqlDriver();
	
	$sql = "SELECT id, riskStatus
	        FROM risk_status_list";
    return $MainCoonDB->fetchAll($sql);	          
}

function setRiskStatus($customerId,$riskStatus){
	$MainCoonDB = new MySqlDriver();
	$userId= $_SESSION['userdata']['real_spotId'];
	$sql = "INSERT INTO customer_risk_status (spotId,riskStatusId,userId) VALUES ($customerId,$riskStatus,$userId)";
	
	return $MainCoonDB->exec($sql);
}

